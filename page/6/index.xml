<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>许嘉华的笔记</title>
    <link>https://xujiahua.github.io/</link>
    <description>Recent content on 许嘉华的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Sep 2020 10:48:11 +0800</lastBuildDate>
    
        <atom:link href="https://xujiahua.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>读 Mastering Ethereum</title>
        <link>https://xujiahua.github.io/posts/20181029-mastering-ethereum/</link>
        <pubDate>Mon, 29 Oct 2018 08:37:44 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20181029-mastering-ethereum/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20181029-mastering-ethereum/ -&lt;p&gt;（笔记迁移 @ 2020年）&lt;/p&gt;
&lt;p&gt;区块链上不应该只有数字货币。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ethereum was conceived at a time when people recognized the power of the Bitcoin model, and were trying to move beyond cryptocurrency applications.&lt;/p&gt;
&lt;p&gt;Ethereum’s founders were thinking about a blockchain without a specific purpose, that could support a broad variety of applications by being programmed.&lt;/p&gt;
&lt;p&gt;Ethereum has memory that stores both code and data, and it uses the Ethereum blockchain to track how this memory changes over time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;What Is Ethereum? &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/01what-is.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/01what-is.asciidoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ethereum Basics &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/02intro.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/02intro.asciidoc&lt;/a&gt; 【metaMask转账，在remix上smart contract开发、使用】&lt;/li&gt;
&lt;li&gt;Ethereum Clients &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/03clients.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/03clients.asciidoc&lt;/a&gt; 【安装节点，还有一些操作，需要等到数据同步完成】&lt;/li&gt;
&lt;li&gt;Cryptography &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/04keys-addresses.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/04keys-addresses.asciidoc&lt;/a&gt; 【密码学 公私钥】&lt;/li&gt;
&lt;li&gt;Wallets &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/05wallets.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/05wallets.asciidoc&lt;/a&gt; 【for user-facing】&lt;/li&gt;
&lt;li&gt;Transactions &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/06transactions.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/06transactions.asciidoc&lt;/a&gt; 【开始接触smart contract】&lt;/li&gt;
&lt;li&gt;Smart Contracts and Solidity &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/07smart-contracts-solidity.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/07smart-contracts-solidity.asciidoc&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;solidity文档是学习智能合约的好参考。https://solidity.readthedocs.io/en/v0.5.5/&lt;/p&gt;
&lt;h3 id=&#34;笔记&#34;&gt;笔记&lt;/h3&gt;
&lt;p&gt;两种账户类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The type of account you created in the MetaMask wallet is called an externally owned account (EOA)&lt;/li&gt;
&lt;li&gt;A contract account has smart contract code, which a simple EOA can’t have. Furthermore, a contract account does not have a private key. Instead, it is owned (and controlled) by the logic of its smart contract code: the software program recorded on the Ethereum blockchain at the contract account’s creation and executed by the EVM.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;节点分两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;full node client （需要大磁盘服务器）&lt;/li&gt;
&lt;li&gt;remote client/ wallet (e.g., MetaMask)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装Ethereum节点。&lt;em&gt;不安装也行，安装MetaMask插件后，每个chrome tab都有了web3的上下文。可以使用web3执行创建合约，转账等操作。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;以安装Geth为例（Ethereum）。&lt;/p&gt;
&lt;p&gt;下载源代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone git@github.com:ethereum/go-ethereum.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go get -d github.com/ethereum/go-ethereum&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译并配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/ethereum/go-ethereum

make geth

geth dumpconfig &amp;gt; geth.toml

# modify geth.toml if nesserary

geth --config geth.toml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/03clients.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/03clients.asciidoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/blob/master/README.md&#34;&gt;https://github.com/ethereum/go-ethereum/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以太坊的transaction应该是多了个data字段。除了金额，还能承载一些东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A transaction with only value is a payment. A transaction with only data is an invocation. A transaction with both value and data is both a payment and an invocation. A transaction with neither value nor data—well that’s probably just a waste of gas! But it is still possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200625085657502.png&#34; alt=&#34;image-20200625085657502&#34;&gt;&lt;/p&gt;
&lt;p&gt;MetaMask利用的是Web3的能力。打开chrome console就能拿到上下文。直接使用Web3的能力。&lt;/p&gt;
&lt;p&gt;Web3 JS API文档:
&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/JavaScript-API&#34;&gt;https://github.com/ethereum/wiki/wiki/JavaScript-API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;智能合约，如果转账地址是contract address，非EOA， data字段就会被EVM解析成合约调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For now, let’s assume your transaction is delivering data to a contract address. In that case, the data will be interpreted by the EVM as a contract invocation. Most contracts use this data more specifically as a function invocation, calling the named function and passing any encoded arguments to the function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;data字段&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200625085721182.png&#34; alt=&#34;image-20200625085721182&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200625085734912.png&#34; alt=&#34;image-20200625085734912&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200625085741766.png&#34; alt=&#34;image-20200625085741766&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;function selector = 方法hash的前4个字节，&lt;/li&gt;
&lt;li&gt;function arguments = hex(input argument)&lt;/li&gt;
&lt;li&gt;payload = pad32(function selector, function arguments)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;往合约地址，包含data的交易，只是执行合约。&lt;/p&gt;
&lt;p&gt;往0x0地址（除了合约地址、EOA地址，所以0x0是第三种账户），包含data的交易，是合约的创建。&lt;/p&gt;
&lt;p&gt;向非EOA地址，发送value，就是销毁ETH。&lt;/p&gt;
&lt;p&gt;安装solc（编译合约代码成二进制）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://solidity.readthedocs.io/en/v0.4.21/installing-solidity.html&#34;&gt;https://solidity.readthedocs.io/en/v0.4.21/installing-solidity.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;solc --bin Faucet.sol


src = web3.eth.accounts[0]

faucet_code = ...

web3.eth.sendTransaction({from: src, to: 0, data: faucet_code, gas: 113558, gasPrice: 200000000000}, function(error, result){
   if(!error)
       console.log(JSON.stringify(result));
   else
       console.error(error);
})
&lt;/code&gt;&lt;/pre&gt;- https://xujiahua.github.io/posts/20181029-mastering-ethereum/ - </description>
        </item>
    
    
    
        <item>
        <title>一点压力测试的经验</title>
        <link>https://xujiahua.github.io/posts/20181017-perf-testing/</link>
        <pubDate>Wed, 17 Oct 2018 07:42:56 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20181017-perf-testing/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20181017-perf-testing/ -&lt;p&gt;（笔记迁移 @ 2020年）&lt;/p&gt;
&lt;h2 id=&#34;一概念最基础最重要&#34;&gt;一、概念，最基础最重要&lt;/h2&gt;
&lt;h3 id=&#34;1-响应时间-tp99-tp90是什么&#34;&gt;1. 响应时间 TP99, TP90是什么&lt;/h3&gt;
&lt;p&gt;除了要看TPS，也要看请求的响应时间是否在合理的范围内。太离谱，压测该停了。&lt;/p&gt;
&lt;p&gt;响应时间的指标有最大响应时间、平均响应时间、TPXXX等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/90-percentile1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TP – Top Percentile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TP90 = 500ms ：90%的请求都是在500ms以内。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-错误率&#34;&gt;2. 错误率&lt;/h3&gt;
&lt;p&gt;压测过程中发现异常或是错误，或者，错误率明显上升，这时候压测就该停了。&lt;/p&gt;
&lt;h3 id=&#34;3-吞吐量-tps&#34;&gt;3. 吞吐量 TPS&lt;/h3&gt;
&lt;p&gt;单纯看TPS是没有意义的。要结合上述两个指标，一般是0错误率，TP99在xxx ms（看具体应用场景）内的TPS。&lt;/p&gt;
&lt;p&gt;比如这么描述TPS，TP99小于100ms的前提下，系统没有错误，系统可承载的TPS是1000。&lt;/p&gt;
&lt;h3 id=&#34;4-压测案例&#34;&gt;4. 压测案例&lt;/h3&gt;
&lt;p&gt;选择生产环境中并发要求高的请求。&lt;/p&gt;
&lt;h2 id=&#34;二工具选型选最合适的&#34;&gt;二、工具选型，选最合适的&lt;/h2&gt;
&lt;p&gt;工具的选择，一要看场景，二要看自己是否趁手。&lt;/p&gt;
&lt;h3 id=&#34;ab-apache-benchmark&#34;&gt;ab (apache benchmark)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ab -kc 1000 -n 10000 http://www.some-site.cc/tmp/index.html&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-k   Enables HTTP keep-alive&lt;/li&gt;
&lt;li&gt;-c   Number of concurrent requests&lt;/li&gt;
&lt;li&gt;-n   Number of total requests to make&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只能使用单核。本身就可能是压测的瓶颈。&lt;/li&gt;
&lt;li&gt;对于带多个步骤的压测场景无力。&lt;/li&gt;
&lt;li&gt;没有（没找到）自定义断言的能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/ApacheBench&#34;&gt;https://en.wikipedia.org/wiki/ApacheBench&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;wrk&#34;&gt;wrk&lt;/h3&gt;
&lt;p&gt;wrk小巧，性能非常好，报告直观。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wrk -t2 -c100 -d30s -R2000 http://127.0.0.1:8080/index.html&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-d30s: 压测时间30s&lt;/li&gt;
&lt;li&gt;-t2: 2个线程&lt;/li&gt;
&lt;li&gt;-c100: 100个&amp;quot;用户数&amp;rdquo;&lt;/li&gt;
&lt;li&gt;-R2000: constant throughput of 2000 requests per second&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于带多个步骤的压测场景无力。lua脚本写的很费劲。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reference: &lt;a href=&#34;https://github.com/giltene/wrk2&#34;&gt;https://github.com/giltene/wrk2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;jmeter&#34;&gt;jmeter&lt;/h3&gt;
&lt;p&gt;框架功能强大。个人感觉太重了，全是界面的配置。&lt;/p&gt;
&lt;h3 id=&#34;locust&#34;&gt;locust&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用python脚本编写案例。脚本化，方便peer review。&lt;/li&gt;
&lt;li&gt;大并发的支持：因为python本身对多核的利用不够好，提高并发量的办法是多起几个进程作为slave。&lt;/li&gt;
&lt;li&gt;统计能力满足需求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reference: &lt;a href=&#34;https://locust.io/&#34;&gt;https://locust.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三实战中的经验&#34;&gt;三、实战中的经验&lt;/h2&gt;
&lt;p&gt;TPS压不上去怎么办。看下请求的链路，从源头开始排查瓶颈。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;压测源 -&amp;gt; （对外）网络 -&amp;gt; 负载均衡 -&amp;gt; 内部网络 -&amp;gt; 应用服务器 -&amp;gt; 数据库、共享内存&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;压测源&#34;&gt;压测源&lt;/h3&gt;
&lt;p&gt;一次http请求，客户端也是占用资源的。请求的构造与发送、返回结果的接收与解析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/http-requests.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据你选用的压测框架找下瓶颈。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jmeter线程数是否不够了&lt;/li&gt;
&lt;li&gt;locust的slave进程是否都已占用100%的CPU。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;网络&#34;&gt;网络&lt;/h3&gt;
&lt;p&gt;一般内部网络不会是瓶颈。
对外网络因为带宽费用问题，手头拮据点的会使用1M带宽。再怎么测试，压的都是网络的瓶颈。&lt;/p&gt;
&lt;p&gt;建议把压力源放到内部网络内，再测试。&lt;/p&gt;
&lt;h3 id=&#34;应用服务器&#34;&gt;应用服务器&lt;/h3&gt;
&lt;p&gt;服务器的指标有这么几项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;li&gt;磁盘IO&lt;/li&gt;
&lt;li&gt;网络IO&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查看的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单粗暴，登录服务器敲命令 &lt;code&gt;htop&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;插件取数据&lt;/li&gt;
&lt;li&gt;阿里云监控，如果是阿里云机器&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;四golang应用监控开发篇&#34;&gt;四、golang应用监控（开发篇）&lt;/h2&gt;
&lt;h3 id=&#34;开发者角度分析并发瓶颈&#34;&gt;开发者角度分析并发瓶颈&lt;/h3&gt;
&lt;p&gt;自己写的代码已经忘了，或是别人的代码不了解，建议通过阅读代码画出时序图。&lt;/p&gt;
&lt;h3 id=&#34;pprof火焰图查看cpu耗时内存占用&#34;&gt;pprof火焰图，查看CPU耗时、内存占用&lt;/h3&gt;
&lt;p&gt;最新版本的pprof已经支持了火焰图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200624075225452.png&#34; alt=&#34;image-20200624075225452&#34;&gt;&lt;/p&gt;
&lt;p&gt;火焰图的y轴表示cpu调用方法的先后，x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多。&lt;/p&gt;
&lt;h4 id=&#34;1-安装最新版的pprof&#34;&gt;1. 安装最新版的pprof&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;go get -u github.com/google/pprof
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pprof具体路径为 $GOPATH/bin/pprof&lt;/p&gt;
&lt;h4 id=&#34;2-数据采用代码引用&#34;&gt;2. 数据采用代码引用&lt;/h4&gt;
&lt;p&gt;web应用，通过http接口的方式获得采样数据（非web应用也建议这么做，接口比较high level）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// pprof
go func() {
   r := http.NewServeMux()
   // Register pprof handlers
   r.HandleFunc(&amp;quot;/debug/pprof/&amp;quot;, pprof.Index)
   r.HandleFunc(&amp;quot;/debug/pprof/cmdline&amp;quot;, pprof.Cmdline)
   r.HandleFunc(&amp;quot;/debug/pprof/profile&amp;quot;, pprof.Profile)
   r.HandleFunc(&amp;quot;/debug/pprof/symbol&amp;quot;, pprof.Symbol)
   r.HandleFunc(&amp;quot;/debug/pprof/trace&amp;quot;, pprof.Trace)

   http.ListenAndServe(&amp;quot;:8000&amp;quot;, r)
}()
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3-打开管理工具&#34;&gt;3. 打开管理工具&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;-- CPU
$GOPATH/bin/pprof -http=:9000 coupon http://localhost:8000/debug/pprof/profile
-- Memory
$GOPATH/bin/pprof -http=:9000 coupon http://localhost:8000/debug/pprof/heap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中间的&lt;code&gt;coupon&lt;/code&gt;是二进制文件。用于取symbol。发布的时候留一份copy。&lt;/p&gt;
&lt;h4 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;go build -o &#39;coupon&#39;

./coupon &amp;gt; coupon.log &amp;amp;

$GOPATH/bin/pprof -http=:9000 coupon http://localhost:8000/debug/pprof/profile

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;reference&#34;&gt;reference&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/&#34;&gt;http://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/pprof/blob/master/doc/pprof.md&#34;&gt;https://github.com/google/pprof/blob/master/doc/pprof.md&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;性能测试应该怎么做？ &lt;a href=&#34;https://coolshell.cn/articles/17381.html&#34;&gt;https://coolshell.cn/articles/17381.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20181017-perf-testing/ - </description>
        </item>
    
    
    
        <item>
        <title>利用Jenkins&#43;Ansible做持续部署</title>
        <link>https://xujiahua.github.io/posts/20170413-jenkins&#43;ansible/</link>
        <pubDate>Thu, 13 Apr 2017 11:37:09 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20170413-jenkins&#43;ansible/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20170413-jenkins&#43;ansible/ -&lt;h2 id=&#34;ansible&#34;&gt;Ansible&lt;/h2&gt;
&lt;p&gt;工作需要，接盘又做后端开发，本着不做重复劳动的理念，加上前人留下来的脚本不够优秀，需要重搞一套一键部署的脚本。&lt;/p&gt;
&lt;p&gt;之前在Windows平台开发的时候，使用cmd、 powershell也写过一套部署脚本，还算凑合着用。&lt;/p&gt;
&lt;p&gt;这次是在Linux平台上，在重整之前，我也调研了下业界经验。最后选择了&lt;a href=&#34;https://www.ansible.com/how-ansible-works&#34;&gt;Ansible&lt;/a&gt;。Ansible比起bash简单很多，而且不怕重复执行相同命令有副作用，Ansible内置操作都是幂等的。同样的功能，用bash都能写。但是站在巨人肩膀上，效率更高。&lt;/p&gt;
&lt;p&gt;选择Ansible的时候也考虑过Puppet、Chef。&lt;/p&gt;
&lt;p&gt;比较之下，Puppet等都需要在每台被部署机上安装agent程序。而Ansible，只要被部署机上有Python即可。&lt;/p&gt;
&lt;p&gt;考虑到公司服务器都是内置Python的Ubuntu系统，就放心使用Ansible了。&lt;/p&gt;
&lt;p&gt;我们也基于Ansible上编写了应用发布的滚动部署脚本、回退脚本。
也编写了一套一键配置服务器的脚本，目前支持Nginx环境、APP服务器环境、Logstash安装等。&lt;/p&gt;
&lt;p&gt;主要用途，结合讯联场景，有这么几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器的配置（包括软件安装）可以做到脚本化、版本控制 —— 服务器的配置应该像源代码一样控制起来，而不是一个黑盒、或是随意性太多，比如redis的安装路径都不一样、测试环境与生产环境的nginx配置不一样。服务器部署文档并没有脚本那么精确，只能算是一份人工操作指南，程序员重复劳动太多&lt;/li&gt;
&lt;li&gt;适合一套架构需要部署几个环境的场景 —— 比如支付宝国际项目需要一套独立后端系统的需求&lt;/li&gt;
&lt;li&gt;服务器需要水平扩展，无需人工一台台处理 —— 构建一些应用服务器，将应用服务器加入到nginx load balancer里，都是可以脚本化的（包含在滚动部署里了）&lt;/li&gt;
&lt;li&gt;应用部署、滚动部署 —— 云收银的部署，感觉有点奇怪，发布的时候需要重新编译一遍程序，两台生产服务器就需要编译两次。虽然部署有脚本，但还是有手工处理的场景。部署没问题的前提是程序员没有checkout错git分支。觉得这个没必要。测试通过，生产环境就直接用测试环境的包，除了配置。这个可以结合jenkins做到的，发布测试环境的同时构建一个生产的包。测试人员验收通过测试包，发布时就用对应的生产包&lt;/li&gt;
&lt;li&gt;快速构建一套测试环境 —— 如何构建一套mongo集群？测试有这样的需求，刚入职的同事都有这样的需求&lt;/li&gt;
&lt;li&gt;进程监控是否存在 —— 写好进程检查脚本，通过ansible脚本定时执行就能看到结果了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滚动部署就是个循环&#34;&gt;滚动部署，就是个循环&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;for i in webservers:
    for j in nginxservers:
        remove i from load balancer
    // wait for a while until webserver i finish processing requests
    sleep(1 * minute) 
    deploy(i)

    for j in nginxservers:
        add i from load balancer
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h2&gt;
&lt;p&gt;真正考虑要搭个Jenkins，是因为Android打包太慢了、测试催着开发要最新的测试包。&lt;/p&gt;
&lt;p&gt;有了Jenkins，测试可以自己查看最新的包了、开发忙自己的。&lt;/p&gt;
&lt;p&gt;题外话，因为历史原因，没在刚开始就在MacOS系统上搭建Jenkins。以至于最后存在了两套Jenkins，另外一套专门给iOS打包用的。&lt;/p&gt;
&lt;p&gt;接盘后端系统，顺便规范下之前的开发、测试、发布流程。&lt;/p&gt;
&lt;p&gt;发现使用Jenkins Pipeline做持续部署很方便。&lt;/p&gt;
&lt;h2 id=&#34;jenkins权限控制&#34;&gt;Jenkins权限控制&lt;/h2&gt;
&lt;p&gt;严格控制生产部署。
也不需要写Jenkins插件，做在pipeline里，因为其本身就是基于Groovy的DSL，可以在其中写点代码。&lt;/p&gt;
- https://xujiahua.github.io/posts/20170413-jenkins&#43;ansible/ - </description>
        </item>
    
    
    
        <item>
        <title>Android热更新框架的使用</title>
        <link>https://xujiahua.github.io/posts/20170408-android-hot-update/</link>
        <pubDate>Sat, 08 Apr 2017 11:45:49 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20170408-android-hot-update/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20170408-android-hot-update/ -&lt;h2 id=&#34;一个伪需求&#34;&gt;一个伪需求&lt;/h2&gt;
&lt;p&gt;Android热更新框架听的多了，真正开始用是因为组织突发奇想，说能否在智能POS上做个应用／插件，让开发者不改一行代码就能支持做扫码交易了。&lt;/p&gt;
&lt;p&gt;智能POS其实就是带刷卡槽，芯片插卡槽，NFC读卡器的Android系统。&lt;/p&gt;
&lt;p&gt;看完需求后，感觉意义不大啊，都是Android系统了，加个扫码模块很难么，对一个Android程序员，分分钟集成一个这是基本素养了。有点伪需求的味道。&lt;/p&gt;
&lt;h2 id=&#34;好奇心&#34;&gt;好奇心&lt;/h2&gt;
&lt;p&gt;不管是不是伪需求，还是激发了我的好奇心，有趣，如果做，该怎么做。有想过让硬件供应商协助下，能否在SDK上开个口，但想想还是算了，成本有点高。&lt;/p&gt;
&lt;p&gt;交代下，后端提供了套规范，终端将条码信息转成卡号和二磁道信息，后端就能转回条码，发往微信、支付宝。所以无论是刷卡交易还是条码交易，对终端来说，请求报文可以做到是一套规范。&lt;/p&gt;
&lt;p&gt;自然就想到了方法劫持的思路，打开刷卡器方法变成打开摄像头，读磁道信息方法变成读取扫描到的条码，这样用户真不用改什么代码了。说到方法劫持，就要指望Android的热更新框架了。&lt;/p&gt;
&lt;h2 id=&#34;android热更新框架&#34;&gt;Android热更新框架&lt;/h2&gt;
&lt;p&gt;Android的热更新框架一般都是阿里系、腾讯系的作品。可能是他们的apk包实在很大吧。相比我们的应用只有几M。
收集了些资料，简单对比了下。个人没有每个都实践过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/android_hot_fix_framework.png&#34; alt=&#34;Android热更新框架对比&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到需求上来，我们需要的是一个能够即时生效的框架。目前用了下Dexposed，因为编程方式比较方便。
Dexposed的感受，Android 4.x Dalvik虚拟机上基本算是完美了，但是ART虚拟机就不适配了。也是Dexposed被弃用的原因。AndFix延续了Dexposed。&lt;/p&gt;
&lt;p&gt;因为使用Dexposed，第一版，只能用在Android 4.x上，这周演示效果良好。有机会再做下Android 5.x的兼容。&lt;/p&gt;
&lt;p&gt;最后产品还是要让开发者动代码，加一行代码。因为这些热更新框架没有哪个是能劫持其他APP方法的。&lt;/p&gt;
&lt;p&gt;小想法，Dexposed/AndFix这个套路修复问题，以后估计会越来越难做，Android 7.x都已经支持JIT了，将Java代码编译到了本地代码，还怎么劫持Java方法呢，跑的都是本地代码了。&lt;/p&gt;
- https://xujiahua.github.io/posts/20170408-android-hot-update/ - </description>
        </item>
    
    
    
    
  </channel>
</rss> 
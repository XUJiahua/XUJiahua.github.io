<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>许嘉华的博客</title>
    <link>https://xujiahua.github.io/</link>
    <description>Recent content on 许嘉华的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 10 Jul 2020 10:35:08 +0800</lastBuildDate>
    
        <atom:link href="https://xujiahua.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>5G认识小结</title>
        <link>https://xujiahua.github.io/posts/20200222-5g/</link>
        <pubDate>Sat, 22 Feb 2020 23:32:14 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200222-5g/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200222-5g/ -&lt;p&gt;去年11月尝鲜，买了个三星5G手机。找基站测5G速度成了刚买时候的乐趣。用了几个月，深感5G功能很鸡肋，5G基站太少。&lt;/p&gt;
&lt;p&gt;这两天翻了好多知乎上关于5G的评论，对5G的概念、应用场景有了些厘清。&lt;/p&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;5G，第五代移动通信技术。也就是5G的边界是移动通信网络。&lt;/li&gt;
&lt;li&gt;5G的直接作用是提高了移动设备到基站的下载速率，能达到1G/s，也就是所谓的空口延迟低。&lt;/li&gt;
&lt;li&gt;5G下载的速度上限还是光纤的下载速度上限。&lt;/li&gt;
&lt;li&gt;5G的流量套餐应该不会便宜，除非国家出政策。为什么套餐不会便宜，这得看成本。5G的基站建设成本远比4G高。5G基站覆盖面积小，需要几倍于4G的基站，5G基站耗电成本也是几倍于4G基站。肥了设备商（华为中兴），苦了运营商（移动联通电信），最后还是消费者买单。&lt;/li&gt;
&lt;li&gt;理论速度极可能跑不满。使用者多了，平均到每个终端，带宽就不够。现在我的4G速度好慢，完全没到理论速度。现在的矛盾不是需要更快的网络，而是更多的网络。&lt;/li&gt;
&lt;li&gt;木桶效应，一个桶能装多少水由短板决定，以前的移动通信是短板，但是通过3G、4G到现在的5G的改善，已经成为长板了。运营商的承载网等配套也得扩容。不然5G的超高下载速率就是一个理论值。又是运营商的成本。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;p&gt;大部分人的共识是，5G的杀手级应用仍在探索中。&lt;/p&gt;
&lt;p&gt;什么样的场景，只有通过5G能够做到，而其他技术不行，这样的场景就是典型的5G应用场景。要找到技术的适用场景，不能生搬硬套。区块链也是这样一个典型。过滤那些“可以使用XXX技术，但是完全没必要”的场景。&lt;/p&gt;
&lt;p&gt;媒体上关于5G的一些应用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;远程手术 —— 为什么不用光纤，可靠性更好。如果是边远山区不方便铺光纤，5G可能是好的替代。有总比没有好。&lt;/li&gt;
&lt;li&gt;远程挖掘机 —— 微博上看到的，挖掘机通过5G联网，驾驶员在机房操控，安全性更高。&lt;/li&gt;
&lt;li&gt;远程办公、远程上课 —— 这些光纤都能做到。对于山村里不方便通光纤的，是好事。但是山村里的困难是超乎我们想象的。看新闻，因为疫情不得不在家上课，几个小孩子共用一个手机，流量又贵，不舍得用。太难了。&lt;/li&gt;
&lt;li&gt;AR/VR —— 不看好。光纤，百兆宽带都这么普及了，AR/VR发展不好的根本原因应该是AR/VR本身吧，5G救不了ARVR。&lt;/li&gt;
&lt;li&gt;无人驾驶 —— 不看好。移动通信中的延时一直保持很低很困难吧，比如短时间太多人/设备使用基站导致拥挤。可靠性太重要了，毕竟汽车是高速移动的，稍微的疏忽就是惨痛代价。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;会不会带来下一个移动互联网&#34;&gt;会不会带来下一个“移动互联网”&lt;/h2&gt;
&lt;p&gt;之所以大家对5G这么关注，就是在想，5G能否像3/4G一样带动下一个移动互联网（电商、O2O、移动支付、短视频、直播）。&lt;/p&gt;
&lt;p&gt;先来看看移动互联网是怎么发展起来的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;苹果公司发布iPhone，智能手机的火种。&lt;/li&gt;
&lt;li&gt;小米等一众国产品牌的低价策略，带来了&lt;strong&gt;智能手机的普及&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;国务院要求&lt;strong&gt;运营商资费下降&lt;/strong&gt;。大家都用得起流量。&lt;/li&gt;
&lt;li&gt;总结就是：智能手机普及 + 运营商资费下降。&lt;/li&gt;
&lt;li&gt;其中智能手机，这是从无到有，从0到1的奇迹，颠覆了之前的所有手机。（好久没有让人激动的科技产品了，苹果的创新能力也是在备受质疑，因为大家期望太高了。）&lt;/li&gt;
&lt;li&gt;其中运营商资费下降，这是国家权力。（知乎用户：钱都让互联网企业赚走了，通讯行业等同于修路。）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5G目前的作用仅限于加快了与基站之间的通信速度，假如说3G完成了从0到1，4G完成了从1到10，那么5G是从10到100吧。根据边际效应准则，后面的收益会越来越少。&lt;/p&gt;
&lt;p&gt;很难看出能带来什么样的产业革命来。&lt;/p&gt;
&lt;h2 id=&#34;5g的利益关系&#34;&gt;5G的利益关系&lt;/h2&gt;
&lt;p&gt;利好：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;5G基站厂商。华为为主。&lt;/li&gt;
&lt;li&gt;国家层面。5G是国家战略，是政治正确。其一，靠专利技术薅世界羊毛，从国家角度是有利可图的。其二，带动产业发展，拉动GDP。&lt;/li&gt;
&lt;li&gt;手机终端厂商。近年来手机上的创新的吸睛能力真不行，消费欲望降低。靠5G这个卖点，能赚一波眼球。&lt;/li&gt;
&lt;li&gt;还有众多蹭5G话题流量的：广告公司、创业公司。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;利坏：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;三大运营商。基站投入是高成本的，为了发展5G生态，国家也会限制套餐费用，影响其收入。还好是国企。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：https://www.zhihu.com/question/342366514/answer/820922564&lt;/p&gt;
&lt;h2 id=&#34;杂言&#34;&gt;杂言&lt;/h2&gt;
&lt;p&gt;真正有颠覆性的，真正能突破人们想象力的，都在基础科学。比如材料科学，电池技术现在是瓶颈。离我很远。我做的事情真的对人类价值不大，只是个普通人，只能做到赚钱养家对家庭做贡献了。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200222-5g/ - </description>
        </item>
    
    
    
        <item>
        <title>Implicit：推荐系统协同过滤库的测评</title>
        <link>https://xujiahua.github.io/posts/20200211-recsys-implicit/</link>
        <pubDate>Tue, 11 Feb 2020 14:34:27 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200211-recsys-implicit/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200211-recsys-implicit/ -&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Implicit是一个推荐系统协同过滤库。所谓协同过滤，只用到了user、item的ID和user、item交互后的评分（或是某个度量）。&lt;/p&gt;
&lt;p&gt;GitHub：https://github.com/benfred/implicit&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pip install implicit
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;其他选择&#34;&gt;其他选择&lt;/h2&gt;
&lt;p&gt;自己照着「推荐系统实战」里的基于物品推荐的相似度公式（类似关联分析中的Lift公式），也写了一个item-item recommender。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看推荐结果，自己写与implicit ALS有点差别，与implicit Cosine的结果差不多。&lt;/li&gt;
&lt;li&gt;纯python，没有并行，没有用C/C++，果然很慢。&lt;/li&gt;
&lt;li&gt;自己写一个的目的，除了练手，也想看看implicit的效果具体怎么样。&lt;/li&gt;
&lt;li&gt;生产使用，不建议用自己手写的，水平真的有限。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Spark Mllib怎么样。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spark Mllib支持分布式，感觉没必要。本来Implicit单机就很强了。只要把数据导出来，导到训练机器上即可。&lt;/li&gt;
&lt;li&gt;Spark分布式，扩展性好，但是性能并没有Implicit那么好。&lt;/li&gt;
&lt;li&gt;Spark还得搭配HDFS，真的蛮重的，开发效率也没那么好。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;背后的原理&#34;&gt;背后的原理&lt;/h2&gt;
&lt;p&gt;今早根据作者文章Distance Metrics for Fun and Profit，整理了一份读后感，把之前的知识给梳理起来了。这篇文章主要介绍的是距离公式，用于K近邻的推荐算法。&lt;/p&gt;
&lt;p&gt;协同过滤算法分两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于记忆的，K近邻算法（基于“距离”公式），建议使用BM25。优势在读后感中有写。（实际效果怎么样，还得看数据）&lt;/li&gt;
&lt;li&gt;基于模型的，矩阵分解算法，建议使用 (implicit) ALS，其变种是支持implicit dataset的。矩阵分解算法SGD，只适用于评分。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;效果，见测评图。ALS的效果是最好的了。这是在movielens100k的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/3D66F424-97FD-4236-8A57-98111FAF65A7.png&#34; alt=&#34;3D66F424-97FD-4236-8A57-98111FAF65A7&#34;&gt;&lt;/p&gt;
&lt;p&gt;看起来指标都很低，「推荐系统实战」里差不多这个结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/FBC00415-D1AE-4F22-9B86-A0B070484ACF.png&#34; alt=&#34;FBC00415-D1AE-4F22-9B86-A0B070484ACF&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;遇到的小问题&#34;&gt;遇到的小问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;K近邻算法的model没有model.recommend_all方法。&lt;/li&gt;
&lt;li&gt;model.recommend与model.recommend_all的返回数据结构不同，model.recommend是包含评分的，而model.recommend_all只返回ID。&lt;/li&gt;
&lt;li&gt;recommend(0)，传入第一个用户ID，与recommend_all[0]，取出第一个用户ID，两者的结果是不一样的，不管用什么算法都一样！去年12月就有这样的issue：https://github.com/benfred/implicit/issues/299，我解决了，回复了这个issue。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;猜想，因为recommend方法用到indices的原因？试着重新构建下user-item维度的sparse matrix。改完后，果然就一致了。技术原因，sparse matrix transpose后，indices是未转置前的indices，没有变化。 具体地，user_items.indices与item_users.T.indices是不同的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/159B8A3D-4238-401B-A4D3-61E086FF9F0B.png&#34; alt=&#34;159B8A3D-4238-401B-A4D3-61E086FF9F0B&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;ALS算法在Mac上表现稀烂啊，同样的代码。ALS_Faiss还报错了。先在Linux上用吧。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mac上的ALS效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/409E288C-81F6-4588-8731-9849D1F3278B.png&#34; alt=&#34;409E288C-81F6-4588-8731-9849D1F3278B&#34;&gt;&lt;/p&gt;
&lt;p&gt;Linux上的ALS效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/8DD26395-F62D-4DA8-A801-493098799456.png&#34; alt=&#34;8DD26395-F62D-4DA8-A801-493098799456&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;冷启动&#34;&gt;冷启动&lt;/h2&gt;
&lt;p&gt;一开始并没有那么多行为数据。训练出的结果肯定是挺一般的。这时候用标签推荐，运营根据经验配置标签和推荐的映射即可。&lt;/p&gt;
&lt;h2 id=&#34;考虑用户特征商品特征而不仅仅是id&#34;&gt;考虑用户特征、商品特征（而不仅仅是ID）&lt;/h2&gt;
&lt;p&gt;如果有user特征、item特征，可以使用更一般的监督学习算法。或是使用factorization machine。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200211-recsys-implicit/ - </description>
        </item>
    
    
    
        <item>
        <title>2019 eBay Big Data TechDay</title>
        <link>https://xujiahua.github.io/posts/20191123-ebay-bigdata-techday/</link>
        <pubDate>Sat, 23 Nov 2019 16:13:01 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20191123-ebay-bigdata-techday/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20191123-ebay-bigdata-techday/ -&lt;p&gt;（笔记迁移 @ 2020年）&lt;/p&gt;
&lt;p&gt;现场听了下eBay大数据的分享。视频/PPT &lt;a href=&#34;https://www.slidestalk.com/ebay&#34;&gt;https://www.slidestalk.com/ebay&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总体感觉，很棒。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;环境很好。德国中心，提供了星巴克、点心。&lt;/li&gt;
&lt;li&gt;技术氛围好。几百人做大数据呢！而且做得都比较深。&lt;/li&gt;
&lt;li&gt;拥抱开源：基于开源的二次开发，外围开发，平台化（易用性）等工作。&lt;/li&gt;
&lt;li&gt;风控经理演讲水平好棒。&lt;/li&gt;
&lt;li&gt;Spark SQL / Flink Streaming / Spark Streaming / ElasticSearch 这些是目前大数据的主流&lt;/li&gt;
&lt;li&gt;真正投身大数据，最优选择是学习Spark。&lt;/li&gt;
&lt;li&gt;没有中奖，不过拿了小礼物，心里美滋滋。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;应用角度data-driven-payment-risk&#34;&gt;【应用角度】Data Driven Payment Risk&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;演讲、台风挺好的。&lt;/li&gt;
&lt;li&gt;内容方面没有很新颖但是很扎实（基于图算法的挖掘其实挺少听见的，是让人眼前一亮的东西，但是我之前正好看过这块了。）。&lt;/li&gt;
&lt;li&gt;基本上是在支付风控这个应用角度。&lt;/li&gt;
&lt;li&gt;如果去PayPal，这块支付风控是可以好好学习的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;flink-streamingrheos-sql-a-real-time-processing-language&#34;&gt;【Flink Streaming】Rheos-SQL: A Real-Time Processing Language&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;两个年轻人联合做的分享。&lt;/li&gt;
&lt;li&gt;基于Flink的，Flink还有SQL功能。Flink这块我没接触。&lt;/li&gt;
&lt;li&gt;扩展SQL语法的思路，加入了一些新功能，比如sqlflow也是这么做的（阿里巴巴）。写SQL就能连Kafka、ES。这点很不错的扩展。&lt;/li&gt;
&lt;li&gt;还做了一个平台。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;spark-streamingdesigning-etl-pipelines-with-structured-streaming-and-delta-lake&#34;&gt;【Spark Streaming】Designing ETL pipelines with Structured Streaming and Delta lake&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;干货不多，一些最佳实践（因为没怎么做过streaming，印象不深）。感觉是Delta Lake的推广。&lt;/li&gt;
&lt;li&gt;Delta Lake能替换hive么？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;elasticsearchpronto---elasticsearch-as-a-service-at-ebay&#34;&gt;【ElasticSearch】Pronto - ElasticSearch as a service at ebay&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Kibaba插件开发扩展ELK&lt;/li&gt;
&lt;li&gt;做了一个平台管理ES。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;aibigdatanous---empower-data-analysis-through-augmented-analytics&#34;&gt;【AI+BigData】Nous - Empower Data Analysis through Augmented Analytics&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;增强分析。大数据分析+知识图谱，自然语言处理（英文）。这个topic太时髦了。&lt;/li&gt;
&lt;li&gt;演示效果，界面真很好看了。&lt;/li&gt;
&lt;li&gt;风趣的开场白。技术又好。&lt;/li&gt;
&lt;li&gt;英语对话，这么流利。有被刺激到。&lt;/li&gt;
&lt;li&gt;从规则引擎开始&lt;/li&gt;
&lt;li&gt;积累数据，机器学习生成规则&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;spark-sqlcarmel---optimizing-sparksql-for-interative-analysis&#34;&gt;【Spark SQL】Carmel - Optimizing SparkSQL for Interative Analysis&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;eBay优化Spark sql（改写内部代码）替换TeraData，作为MPP方案。Impala不好吗。。。&lt;/li&gt;
&lt;li&gt;观众提问，SQL on spark没有索引，是不是历史的倒退。有个问题挺好。回答是下推到parquet，列式存储会过滤。&lt;/li&gt;
&lt;li&gt;是大牛，技术做的很深。Druid/Kylin/Spark/Spark SQL。一句话很经典，批处理也可以很快。&lt;/li&gt;
&lt;li&gt;演讲基本上是站着不动，看着PPT疯狂输出信息。&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20191123-ebay-bigdata-techday/ - </description>
        </item>
    
    
    
        <item>
        <title>量子计算——读「古今密码学趣谈」展望未来的密码学</title>
        <link>https://xujiahua.github.io/posts/20191031-quantum-computer/</link>
        <pubDate>Thu, 31 Oct 2019 15:22:33 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20191031-quantum-computer/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20191031-quantum-computer/ -&lt;p&gt;（笔记迁移 @ 2020年）&lt;/p&gt;
&lt;p&gt;主要讲了密码学怎么来应对量子计算。量子计算的并行性（N个量子位，能&lt;strong&gt;同时&lt;/strong&gt;表示2^N个数字，而同样的比特位，同时只能表示一个2^N以内的数字。太神奇了），将以前指数级别的破解难度降低为了线性级别。RSA、ECC等现代密码学技术都会被轻易攻破。&lt;/p&gt;
&lt;p&gt;量子计算机的历史：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在美国电话电报公司贝尔实验室工作的数学家肖尔（Peter W.Shor，1959）于1994年发现了快速分解大整数的量子算法！他因此于1998年获得了由国际数学联盟颁发的奈望林纳应用数学奖。&lt;/li&gt;
&lt;li&gt;2001年，美国IBM公司率先研制成功7个量子位的示例型量子计算机。&lt;/li&gt;
&lt;li&gt;2007年2月，加拿大D-Wave System公司宣布研制成功世界上第一台商用16量子位的量子计算机。&lt;/li&gt;
&lt;li&gt;2011年5月30日，D-Wave System公司宣布研制成功128量子位的量子计算机，并且出人意料地以每台 1000万美元的价格公开出售，还提供与传统计算机软件接口的软件工具包。&lt;/li&gt;
&lt;li&gt;2011年9月2日，美国加州大学圣芭芭拉分校的科学家宣布，已通过量子电路成功实现了冯·诺依曼计算机结构，证实了未来量子大规模集成电路指日可待。&lt;/li&gt;
&lt;li&gt;2012 年3月1日，美国IBM公司宣布，找到一种可以提升量子计算机规模的关键技术，从而使大规模量子计算机的实现成为可能&lt;/li&gt;
&lt;li&gt;In 2015, D-Wave&amp;rsquo;s 2X Quantum Computer with more than &lt;strong&gt;1000 qubits&lt;/strong&gt; was installed at the Quantum Artificial Intelligence Lab at NASA Ames Research Center.&lt;/li&gt;
&lt;li&gt;January 2017 &lt;strong&gt;2048 qubits&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In 2019, D-Wave announced a &lt;strong&gt;5000 qubit&lt;/strong&gt; system available &lt;strong&gt;mid-2020&lt;/strong&gt;, using their new Pegasus chip with 15 connections per qubit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于Dwave，客观看待，以下是引用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20191031151535708.png&#34; alt=&#34;image-20191031151535708&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用Dwave的量子退火提速找机器学习中的最优解，这是个很实用的功能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;量子计算机中的算法需要特殊设计的。&lt;/p&gt;
&lt;p&gt;现代密码学是基于一些数学难题的，比如大整数分解、椭圆曲线。为了对抗量子计算破解，如果继续走基于数学路线，就需要找新的数学难题，比如基于格的难题（虽然接触过，但还是无法理解）。&lt;/p&gt;
&lt;p&gt;非数学难题思路的应对方式（看的一知半解）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;量子密码。思路起源：1969 年，美国哥伦比亚大学的一位名叫威斯纳（Stephen Wiesner，1942）的研究生完成了一篇题为“共轭编码”（Conjugate Coding）的论文，其中提出了“量子钱”（Quantum Money）的概念。根据量子力学原理，任何对量子的观察必然都会干扰其原来的状态，从而导致钱币失效。| 所以，使用量子密码达到安全通信的根本就是一旦观察会干扰其原来的状态。（现代密码学是对通信内容进行加密。）&lt;/li&gt;
&lt;li&gt;生物密码，指的是DNA密码，DNA的形成是一个分子生物过程。一条DNA链由数百万个的基本单位按不同的顺序排列而成，所以其中包含了惊人的信息量。从数学的角度来看，一条DNA链是由4种不同的符号A,G,C,T组成的长串，类似于计算机所处理的以0,1组成的符号串。但DNA的形成是一个分子生物过程，并非数学计算的结果。于是科学家们突发奇想：能否利用形成DNA的分子生物过程来解决数学问题呢？| 将信息隐藏在DNA微点（微点的定义？）&lt;/li&gt;
&lt;li&gt;混沌密码。实践更少了。不做赘述。混沌，蝴蝶效应源于此。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;D-Wave Systems &lt;a href=&#34;https://en.wikipedia.org/wiki/D-Wave_Systems&#34;&gt;https://en.wikipedia.org/wiki/D-Wave_Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如何用 IT 业者能听懂的话介绍量子计算的原理？ &lt;a href=&#34;https://www.zhihu.com/question/26933442/answer/34598726&#34;&gt;https://www.zhihu.com/question/26933442/answer/34598726&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20191031-quantum-computer/ - </description>
        </item>
    
    
    
        <item>
        <title>数字货币资料整理：FB Libra，央行 DCEP</title>
        <link>https://xujiahua.github.io/posts/20191030-dcep-libra/</link>
        <pubDate>Wed, 30 Oct 2019 15:31:21 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20191030-dcep-libra/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20191030-dcep-libra/ -&lt;p&gt;（笔记迁移 @ 2020年）&lt;/p&gt;
&lt;p&gt;资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;「区块链到底能干嘛」，赏味不足，梁杰ggtalk博客&lt;/li&gt;
&lt;li&gt;「Libra与数字货币展望」，央行_穆长春，得到课程&lt;/li&gt;
&lt;li&gt;「有关DCEP/Libra/支付/金融科技企业」，Mikko，微博：现金（央行发行）- 存款（银行）- 余额（支付机构比如支付宝）- 货币基金之间的（层级）关系。第一次这么系统地去理解金融系统&lt;/li&gt;
&lt;li&gt;Libra白皮书，官网&lt;/li&gt;
&lt;li&gt;「参议院就Facebook的Libra听证会」 &lt;a href=&#34;https://www.bilibili.com/video/av59535863/&#34;&gt;https://www.bilibili.com/video/av59535863/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Libra：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Libra是分层架构（混合架构），节点与节点之间是用区块链，节点与用户之间是中心化服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;央行数字货币DCEP优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DCEP是法币，价值属性等同现金，央行发行，国家信用担保&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;离线支付，应该是NFC技术，具体实现细节没有披露&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;保护国家货币主权和法币地位&lt;/li&gt;
&lt;li&gt;便携性：现钞发行、运输、存储、防伪等环节成本高，使用DCEP可以规避这一点&lt;/li&gt;
&lt;li&gt;匿名性：（现金支持匿名性，而支付宝、银行都没有隐私可言），DCEP也支持匿名性（一定程度上），具体实现细节见下文&lt;/li&gt;
&lt;li&gt;防止犯罪：反洗钱、反逃税、反恐怖融资。这一点与匿名性有点相悖。文章提到使用大数据来挖掘特征，符合风险特征的会进行身份比对。（原文这么说：所以说，出于反洗钱的考虑，我们对数字钱包也是有分级和限额安排的。比如说你就用一个手机号码注册一个钱包，那你这个钱包当然可以用，但是级别一定是最低的，只能满足日常小额支付需求；但如果你要能上传一下身份证，或者再上传一个银行卡，就可以获得更高级别的数字钱包，如果你还能到柜台去面签一下，那可能就没有限额了。）也就是说小额支持匿名，而大额不行。&lt;/li&gt;
&lt;li&gt;与区块链没有必然联系：央行没有要求使用区块链，央行调研结论也是区块链没法满足高并发需求（Libra是一个双层架构，节点与节点之间是用区块链，节点与用户之间是中心化服务）&lt;/li&gt;
&lt;li&gt;采取的是&lt;strong&gt;双层运营体系&lt;/strong&gt;，央行做上层，商业银行做第二层；商业机构向央行全额、100%缴纳准备金，央行的数字货币依然是中央银行负债，由中央银行信用担保，具有无限法偿性：这些是与人民币现金一个路子。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DCEP：中国自己的数字货币 &lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzA5MDAxMjcwOQ==&amp;amp;mid=2447616917&amp;amp;idx=1&amp;amp;sn=73207944a32667c50ea12d65e209c4c8&amp;amp;chksm=840526dfb372afc947bf188f9154a37b773320a1ab3a2bb8de87fbe5b7a89b8c05934a100b2d&amp;amp;scene=0&amp;amp;xtrack=1&#34;&gt;https://mp.weixin.qq.com/s?__biz=MzA5MDAxMjcwOQ==&amp;amp;mid=2447616917&amp;amp;idx=1&amp;amp;sn=73207944a32667c50ea12d65e209c4c8&amp;amp;chksm=840526dfb372afc947bf188f9154a37b773320a1ab3a2bb8de87fbe5b7a89b8c05934a100b2d&amp;amp;scene=0&amp;amp;xtrack=1&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;区块链的弱点（没法支持零售级别的交易）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;并发性能低（可扩展性差），共识机制导致的天然劣势，所有节点一起竞争记账权，相当于堵死在一件事上了&lt;/li&gt;
&lt;li&gt;存储的可扩展性差，这个只能定期archive历史数据来解决了。&lt;/li&gt;
&lt;li&gt;安全性只保证了数据不会被篡改，至于匿名，通过大数据是可以破解的&lt;/li&gt;
&lt;li&gt;没有原生的加密机制：公有链匿名性，通过大数据可以挖掘出真实身份&lt;/li&gt;
&lt;li&gt;等待确认太慢，不适合日常使用&lt;/li&gt;
&lt;li&gt;51%算力攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;怎么思考区块链：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去中心化？比中心化还要中心化。更集权。节点自己没法改。无法解决所有者作弊的问题，但对所有者（统治者）是利好的工具（赏味不足的说法，有道理）&lt;/li&gt;
&lt;li&gt;（IT上能）提升效率：一份数据在各个系统流转，那么这份数据就存在区块链数据库上就可以了。&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20191030-dcep-libra/ - </description>
        </item>
    
    
    
        <item>
        <title>Go Plugin</title>
        <link>https://xujiahua.github.io/posts/20190304-go-plugin/</link>
        <pubDate>Mon, 04 Mar 2019 08:27:31 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20190304-go-plugin/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20190304-go-plugin/ -&lt;p&gt;（笔记迁移 @ 2020年）&lt;/p&gt;
&lt;p&gt;早已忘记 C/C++ 中常用的动态链接库了。日常开发中，使用 Go 引入一个组件，常常是&lt;code&gt;go get&lt;/code&gt;引入其源码，放在一起编译。&lt;/p&gt;
&lt;p&gt;Go 1.8 起也提供了动态链接库的功能。&lt;/p&gt;
&lt;p&gt;因为看 HyperLedger Fabric 源码的关系，接触到这块，稍微记录下。&lt;/p&gt;
&lt;h2 id=&#34;一使用流程&#34;&gt;一、使用流程&lt;/h2&gt;
&lt;p&gt;这里有个demo可以参考下：&lt;a href=&#34;https://github.com/vladimirvivien/go-plugin-example&#34;&gt;https://github.com/vladimirvivien/go-plugin-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者写作时，Go 1.8，plugin特性尚不支持MacOS。目前（Go 1.11.4），是支持Linux/MacOS的。&lt;/p&gt;
&lt;h3 id=&#34;1-编译模块module-so&#34;&gt;1. 编译模块（module, .so）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;go build -buildmode=plugin -o path/to/shared/object/file.so path/to/source/code.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意&lt;code&gt;-buildmode=plugin&lt;/code&gt;这个编译Flag。&lt;/p&gt;
&lt;h3 id=&#34;2-引入plugin&#34;&gt;2. 引入&amp;quot;plugin&amp;rdquo;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;plugin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-加载module&#34;&gt;3. 加载module&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;plug, err := plugin.Open(&amp;quot;path/to/shared/object/file.so&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4-查找symbol比如exported-functionvariable&#34;&gt;4. 查找symbol，比如exported function/variable&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;symGreeter, err := plug.Lookup(&amp;quot;Greeter&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;plug.Lookup的返回类型是Symbol，其实就是&lt;a href=&#34;https://tip.golang.org/pkg/plugin/#Symbol&#34;&gt;interface{}&lt;/a&gt;，为了正常使用，需要做类型转换。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Symbol interface{}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5-类型转换-type-assertion&#34;&gt;5. 类型转换 type assertion&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var greeter Greeter
greeter, ok := symGreeter.(Greeter)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很重要，不然没法使用。&lt;/p&gt;
&lt;h3 id=&#34;6-正常使用&#34;&gt;6. 正常使用&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;greeter.Greet()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二已知问题&#34;&gt;二、已知问题&lt;/h2&gt;
&lt;h3 id=&#34;无法debug&#34;&gt;无法debug&lt;/h3&gt;
&lt;p&gt;分别在MacOS和Ubuntu尝试debug使用plugin包的应用，报错如下（Go 1.11.4）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacOS, could not launch process: decoding dwarf section info at offset 0x0: too short&lt;/li&gt;
&lt;li&gt;Linux, could not launch process: could not get .debug_frame section: could not find .debug_frame section&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用gvm安装了其他Go版本尝试，no luck。&lt;/p&gt;
&lt;p&gt;算是已知bug，一些issue如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方说1.12会修复 &lt;a href=&#34;https://github.com/golang/go/issues/23733&#34;&gt;https://github.com/golang/go/issues/23733&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;go-112&#34;&gt;Go 1.12&lt;/h4&gt;
&lt;p&gt;Go 1.12发布了。看release notes并没有提到这块 &lt;a href=&#34;https://golang.org/doc/go1.12&#34;&gt;https://golang.org/doc/go1.12&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;尝试下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go build -buildmode=plugin -o eng/eng.so eng/greeter.go
dlv debug greeter.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这次报错信息变了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;plugin.Open(&amp;rdquo;./eng/eng&amp;rdquo;): plugin was built with a different version of package math/bits
Process 64622 has exited with status 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TBC.&lt;/p&gt;
&lt;h2 id=&#34;三总结&#34;&gt;三、总结&lt;/h2&gt;
&lt;p&gt;目前plugin特性还不够稳定，谨慎使用。&lt;/p&gt;
&lt;h2 id=&#34;四在fabric中的应用&#34;&gt;四、在Fabric中的应用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hyperledger-fabric.readthedocs.io/en/latest/systemchaincode.html&#34;&gt;https://hyperledger-fabric.readthedocs.io/en/latest/systemchaincode.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;system-chaincode&#34;&gt;system chaincode&lt;/h3&gt;
&lt;p&gt;system chaincode是作为plugin引入的。
一例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*
Copyright SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package main

import (
	&amp;quot;github.com/hyperledger/fabric/core/chaincode/shim&amp;quot;
	pb &amp;quot;github.com/hyperledger/fabric/protos/peer&amp;quot;
)

// New returns an implementation of the chaincode interface
func New() shim.Chaincode {
	return &amp;amp;scc{}
}

type scc struct{}

// Init implements the chaincode shim interface
func (s *scc) Init(stub shim.ChaincodeStubInterface) pb.Response {
	return shim.Success(nil)
}

// Invoke implements the chaincode shim interface
func (s *scc) Invoke(stub shim.ChaincodeStubInterface) pb.Response {
	return shim.Success(nil)
}

func main() {}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;倒是应用层的chaincode不需要实现New方法，只要实现一个interface的两个方法即可。&lt;/p&gt;
&lt;h3 id=&#34;peerorderer-operation-implementation&#34;&gt;peer/orderer operation implementation&lt;/h3&gt;
&lt;p&gt;另外一个是peer中的auth、endorer等操作的实现也是通过plugin加载进来的。&lt;/p&gt;
&lt;p&gt;这是过度设计吧。有plugin形式，也有编译形式的。&lt;/p&gt;
&lt;h3 id=&#34;加密服务&#34;&gt;加密服务&lt;/h3&gt;
&lt;p&gt;BCCSP（Blockchain crypto provider)）也是plugin.&lt;/p&gt;
&lt;p&gt;// BCCSP is the blockchain cryptographic service provider that offers
// the implementation of cryptographic standards and algorithms.。&lt;/p&gt;
- https://xujiahua.github.io/posts/20190304-go-plugin/ - </description>
        </item>
    
    
    
        <item>
        <title>读 Mastering Ethereum</title>
        <link>https://xujiahua.github.io/posts/20181029-mastering-ethereum/</link>
        <pubDate>Mon, 29 Oct 2018 08:37:44 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20181029-mastering-ethereum/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20181029-mastering-ethereum/ -&lt;p&gt;（笔记迁移 @ 2020年）&lt;/p&gt;
&lt;p&gt;区块链上不应该只有数字货币。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ethereum was conceived at a time when people recognized the power of the Bitcoin model, and were trying to move beyond cryptocurrency applications.&lt;/p&gt;
&lt;p&gt;Ethereum’s founders were thinking about a blockchain without a specific purpose, that could support a broad variety of applications by being programmed.&lt;/p&gt;
&lt;p&gt;Ethereum has memory that stores both code and data, and it uses the Ethereum blockchain to track how this memory changes over time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;What Is Ethereum? &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/01what-is.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/01what-is.asciidoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ethereum Basics &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/02intro.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/02intro.asciidoc&lt;/a&gt; 【metaMask转账，在remix上smart contract开发、使用】&lt;/li&gt;
&lt;li&gt;Ethereum Clients &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/03clients.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/03clients.asciidoc&lt;/a&gt; 【安装节点，还有一些操作，需要等到数据同步完成】&lt;/li&gt;
&lt;li&gt;Cryptography &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/04keys-addresses.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/04keys-addresses.asciidoc&lt;/a&gt; 【密码学 公私钥】&lt;/li&gt;
&lt;li&gt;Wallets &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/05wallets.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/05wallets.asciidoc&lt;/a&gt; 【for user-facing】&lt;/li&gt;
&lt;li&gt;Transactions &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/06transactions.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/06transactions.asciidoc&lt;/a&gt; 【开始接触smart contract】&lt;/li&gt;
&lt;li&gt;Smart Contracts and Solidity &lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/07smart-contracts-solidity.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/07smart-contracts-solidity.asciidoc&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;solidity文档是学习智能合约的好参考。https://solidity.readthedocs.io/en/v0.5.5/&lt;/p&gt;
&lt;h3 id=&#34;笔记&#34;&gt;笔记&lt;/h3&gt;
&lt;p&gt;两种账户类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The type of account you created in the MetaMask wallet is called an externally owned account (EOA)&lt;/li&gt;
&lt;li&gt;A contract account has smart contract code, which a simple EOA can’t have. Furthermore, a contract account does not have a private key. Instead, it is owned (and controlled) by the logic of its smart contract code: the software program recorded on the Ethereum blockchain at the contract account’s creation and executed by the EVM.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;节点分两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;full node client （需要大磁盘服务器）&lt;/li&gt;
&lt;li&gt;remote client/ wallet (e.g., MetaMask)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装Ethereum节点。&lt;em&gt;不安装也行，安装MetaMask插件后，每个chrome tab都有了web3的上下文。可以使用web3执行创建合约，转账等操作。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;以安装Geth为例（Ethereum）。&lt;/p&gt;
&lt;p&gt;下载源代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone git@github.com:ethereum/go-ethereum.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go get -d github.com/ethereum/go-ethereum&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译并配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/ethereum/go-ethereum

make geth

geth dumpconfig &amp;gt; geth.toml

# modify geth.toml if nesserary

geth --config geth.toml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ethereumbook/ethereumbook/blob/develop/03clients.asciidoc&#34;&gt;https://github.com/ethereumbook/ethereumbook/blob/develop/03clients.asciidoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/blob/master/README.md&#34;&gt;https://github.com/ethereum/go-ethereum/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以太坊的transaction应该是多了个data字段。除了金额，还能承载一些东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A transaction with only value is a payment. A transaction with only data is an invocation. A transaction with both value and data is both a payment and an invocation. A transaction with neither value nor data—well that’s probably just a waste of gas! But it is still possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200625085657502.png&#34; alt=&#34;image-20200625085657502&#34;&gt;&lt;/p&gt;
&lt;p&gt;MetaMask利用的是Web3的能力。打开chrome console就能拿到上下文。直接使用Web3的能力。&lt;/p&gt;
&lt;p&gt;Web3 JS API文档:
&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/JavaScript-API&#34;&gt;https://github.com/ethereum/wiki/wiki/JavaScript-API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;智能合约，如果转账地址是contract address，非EOA， data字段就会被EVM解析成合约调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For now, let’s assume your transaction is delivering data to a contract address. In that case, the data will be interpreted by the EVM as a contract invocation. Most contracts use this data more specifically as a function invocation, calling the named function and passing any encoded arguments to the function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;data字段&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200625085721182.png&#34; alt=&#34;image-20200625085721182&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200625085734912.png&#34; alt=&#34;image-20200625085734912&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200625085741766.png&#34; alt=&#34;image-20200625085741766&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;function selector = 方法hash的前4个字节，&lt;/li&gt;
&lt;li&gt;function arguments = hex(input argument)&lt;/li&gt;
&lt;li&gt;payload = pad32(function selector, function arguments)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;往合约地址，包含data的交易，只是执行合约。&lt;/p&gt;
&lt;p&gt;往0x0地址（除了合约地址、EOA地址，所以0x0是第三种账户），包含data的交易，是合约的创建。&lt;/p&gt;
&lt;p&gt;向非EOA地址，发送value，就是销毁ETH。&lt;/p&gt;
&lt;p&gt;安装solc（编译合约代码成二进制）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://solidity.readthedocs.io/en/v0.4.21/installing-solidity.html&#34;&gt;https://solidity.readthedocs.io/en/v0.4.21/installing-solidity.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;solc --bin Faucet.sol


src = web3.eth.accounts[0]

faucet_code = ...

web3.eth.sendTransaction({from: src, to: 0, data: faucet_code, gas: 113558, gasPrice: 200000000000}, function(error, result){
   if(!error)
       console.log(JSON.stringify(result));
   else
       console.error(error);
})
&lt;/code&gt;&lt;/pre&gt;- https://xujiahua.github.io/posts/20181029-mastering-ethereum/ - </description>
        </item>
    
    
    
        <item>
        <title>一点压力测试的经验</title>
        <link>https://xujiahua.github.io/posts/20181017-perf-testing/</link>
        <pubDate>Wed, 17 Oct 2018 07:42:56 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20181017-perf-testing/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20181017-perf-testing/ -&lt;p&gt;（笔记迁移 @ 2020年）&lt;/p&gt;
&lt;h2 id=&#34;一概念最基础最重要&#34;&gt;一、概念，最基础最重要&lt;/h2&gt;
&lt;h3 id=&#34;1-响应时间-tp99-tp90是什么&#34;&gt;1. 响应时间 TP99, TP90是什么&lt;/h3&gt;
&lt;p&gt;除了要看TPS，也要看请求的响应时间是否在合理的范围内。太离谱，压测该停了。&lt;/p&gt;
&lt;p&gt;响应时间的指标有最大响应时间、平均响应时间、TPXXX等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/90-percentile1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TP – Top Percentile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TP90 = 500ms ：90%的请求都是在500ms以内。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-错误率&#34;&gt;2. 错误率&lt;/h3&gt;
&lt;p&gt;压测过程中发现异常或是错误，或者，错误率明显上升，这时候压测就该停了。&lt;/p&gt;
&lt;h3 id=&#34;3-吞吐量-tps&#34;&gt;3. 吞吐量 TPS&lt;/h3&gt;
&lt;p&gt;单纯看TPS是没有意义的。要结合上述两个指标，一般是0错误率，TP99在xxx ms（看具体应用场景）内的TPS。&lt;/p&gt;
&lt;p&gt;比如这么描述TPS，TP99小于100ms的前提下，系统没有错误，系统可承载的TPS是1000。&lt;/p&gt;
&lt;h3 id=&#34;4-压测案例&#34;&gt;4. 压测案例&lt;/h3&gt;
&lt;p&gt;选择生产环境中并发要求高的请求。&lt;/p&gt;
&lt;h2 id=&#34;二工具选型选最合适的&#34;&gt;二、工具选型，选最合适的&lt;/h2&gt;
&lt;p&gt;工具的选择，一要看场景，二要看自己是否趁手。&lt;/p&gt;
&lt;h3 id=&#34;ab-apache-benchmark&#34;&gt;ab (apache benchmark)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ab -kc 1000 -n 10000 http://www.some-site.cc/tmp/index.html&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-k   Enables HTTP keep-alive&lt;/li&gt;
&lt;li&gt;-c   Number of concurrent requests&lt;/li&gt;
&lt;li&gt;-n   Number of total requests to make&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只能使用单核。本身就可能是压测的瓶颈。&lt;/li&gt;
&lt;li&gt;对于带多个步骤的压测场景无力。&lt;/li&gt;
&lt;li&gt;没有（没找到）自定义断言的能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/ApacheBench&#34;&gt;https://en.wikipedia.org/wiki/ApacheBench&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;wrk&#34;&gt;wrk&lt;/h3&gt;
&lt;p&gt;wrk小巧，性能非常好，报告直观。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wrk -t2 -c100 -d30s -R2000 http://127.0.0.1:8080/index.html&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-d30s: 压测时间30s&lt;/li&gt;
&lt;li&gt;-t2: 2个线程&lt;/li&gt;
&lt;li&gt;-c100: 100个&amp;quot;用户数&amp;rdquo;&lt;/li&gt;
&lt;li&gt;-R2000: constant throughput of 2000 requests per second&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于带多个步骤的压测场景无力。lua脚本写的很费劲。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reference: &lt;a href=&#34;https://github.com/giltene/wrk2&#34;&gt;https://github.com/giltene/wrk2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;jmeter&#34;&gt;jmeter&lt;/h3&gt;
&lt;p&gt;框架功能强大。个人感觉太重了，全是界面的配置。&lt;/p&gt;
&lt;h3 id=&#34;locust&#34;&gt;locust&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用python脚本编写案例。脚本化，方便peer review。&lt;/li&gt;
&lt;li&gt;大并发的支持：因为python本身对多核的利用不够好，提高并发量的办法是多起几个进程作为slave。&lt;/li&gt;
&lt;li&gt;统计能力满足需求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reference: &lt;a href=&#34;https://locust.io/&#34;&gt;https://locust.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三实战中的经验&#34;&gt;三、实战中的经验&lt;/h2&gt;
&lt;p&gt;TPS压不上去怎么办。看下请求的链路，从源头开始排查瓶颈。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;压测源 -&amp;gt; （对外）网络 -&amp;gt; 负载均衡 -&amp;gt; 内部网络 -&amp;gt; 应用服务器 -&amp;gt; 数据库、共享内存&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;压测源&#34;&gt;压测源&lt;/h3&gt;
&lt;p&gt;一次http请求，客户端也是占用资源的。请求的构造与发送、返回结果的接收与解析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/http-requests.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据你选用的压测框架找下瓶颈。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jmeter线程数是否不够了&lt;/li&gt;
&lt;li&gt;locust的slave进程是否都已占用100%的CPU。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;网络&#34;&gt;网络&lt;/h3&gt;
&lt;p&gt;一般内部网络不会是瓶颈。
对外网络因为带宽费用问题，手头拮据点的会使用1M带宽。再怎么测试，压的都是网络的瓶颈。&lt;/p&gt;
&lt;p&gt;建议把压力源放到内部网络内，再测试。&lt;/p&gt;
&lt;h3 id=&#34;应用服务器&#34;&gt;应用服务器&lt;/h3&gt;
&lt;p&gt;服务器的指标有这么几项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;li&gt;磁盘IO&lt;/li&gt;
&lt;li&gt;网络IO&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查看的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单粗暴，登录服务器敲命令 &lt;code&gt;htop&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;插件取数据&lt;/li&gt;
&lt;li&gt;阿里云监控，如果是阿里云机器&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;四golang应用监控开发篇&#34;&gt;四、golang应用监控（开发篇）&lt;/h2&gt;
&lt;h3 id=&#34;开发者角度分析并发瓶颈&#34;&gt;开发者角度分析并发瓶颈&lt;/h3&gt;
&lt;p&gt;自己写的代码已经忘了，或是别人的代码不了解，建议通过阅读代码画出时序图。&lt;/p&gt;
&lt;h3 id=&#34;pprof火焰图查看cpu耗时内存占用&#34;&gt;pprof火焰图，查看CPU耗时、内存占用&lt;/h3&gt;
&lt;p&gt;最新版本的pprof已经支持了火焰图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200624075225452.png&#34; alt=&#34;image-20200624075225452&#34;&gt;&lt;/p&gt;
&lt;p&gt;火焰图的y轴表示cpu调用方法的先后，x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多。&lt;/p&gt;
&lt;h4 id=&#34;1-安装最新版的pprof&#34;&gt;1. 安装最新版的pprof&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;go get -u github.com/google/pprof
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pprof具体路径为 $GOPATH/bin/pprof&lt;/p&gt;
&lt;h4 id=&#34;2-数据采用代码引用&#34;&gt;2. 数据采用代码引用&lt;/h4&gt;
&lt;p&gt;web应用，通过http接口的方式获得采样数据（非web应用也建议这么做，接口比较high level）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// pprof
go func() {
   r := http.NewServeMux()
   // Register pprof handlers
   r.HandleFunc(&amp;quot;/debug/pprof/&amp;quot;, pprof.Index)
   r.HandleFunc(&amp;quot;/debug/pprof/cmdline&amp;quot;, pprof.Cmdline)
   r.HandleFunc(&amp;quot;/debug/pprof/profile&amp;quot;, pprof.Profile)
   r.HandleFunc(&amp;quot;/debug/pprof/symbol&amp;quot;, pprof.Symbol)
   r.HandleFunc(&amp;quot;/debug/pprof/trace&amp;quot;, pprof.Trace)

   http.ListenAndServe(&amp;quot;:8000&amp;quot;, r)
}()
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3-打开管理工具&#34;&gt;3. 打开管理工具&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;-- CPU
$GOPATH/bin/pprof -http=:9000 coupon http://localhost:8000/debug/pprof/profile
-- Memory
$GOPATH/bin/pprof -http=:9000 coupon http://localhost:8000/debug/pprof/heap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中间的&lt;code&gt;coupon&lt;/code&gt;是二进制文件。用于取symbol。发布的时候留一份copy。&lt;/p&gt;
&lt;h4 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;go build -o &#39;coupon&#39;

./coupon &amp;gt; coupon.log &amp;amp;

$GOPATH/bin/pprof -http=:9000 coupon http://localhost:8000/debug/pprof/profile

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;reference&#34;&gt;reference&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/&#34;&gt;http://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/pprof/blob/master/doc/pprof.md&#34;&gt;https://github.com/google/pprof/blob/master/doc/pprof.md&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;性能测试应该怎么做？ &lt;a href=&#34;https://coolshell.cn/articles/17381.html&#34;&gt;https://coolshell.cn/articles/17381.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20181017-perf-testing/ - </description>
        </item>
    
    
    
    
  </channel>
</rss> 
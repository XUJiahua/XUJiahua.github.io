<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>许嘉华的博客</title>
    <link>https://xujiahua.github.io/</link>
    <description>Recent content on 许嘉华的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 15 Jun 2020 17:19:50 +0800</lastBuildDate>
    
        <atom:link href="https://xujiahua.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Metabase 客户隔离</title>
        <link>https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/</link>
        <pubDate>Mon, 15 Jun 2020 17:19:50 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/ -&lt;p&gt;之前有讨论，在不改动代码的情况下，可以使用分组功能来做客户隔离。但是该方案面临的问题是，每个客户一套模板，模板可维护性低。&lt;/p&gt;
&lt;p&gt;问题的关键就是如何共享SQL模板并客户隔离。需要改动源代码。&lt;/p&gt;
&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;代码复用。同一套SQL代码。不用copy/paste，好维护。一个dashboard所有客户都能看。&lt;/li&gt;
&lt;li&gt;客户隔离，保证数据安全。不同客户只能看到自己的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;
&lt;p&gt;执行dashboard/chart中SQL代码时，动态插入客户隔离标识。&lt;/p&gt;
&lt;p&gt;首先来看下一次SQL Query的生命周期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200616151301507.png&#34; alt=&#34;image-20200616151301507&#34;&gt;&lt;/p&gt;
&lt;p&gt;找了个比较接近的处理逻辑，&lt;code&gt;substitute-parameters&lt;/code&gt;用于将&lt;code&gt;{ {xxx} }&lt;/code&gt;替换为widget中选的值。模仿之，SQL中定义一个&lt;code&gt;##client_id##&lt;/code&gt;占位符，写了一个&lt;code&gt;substitute-placeholder&lt;/code&gt;方法使用用户的&lt;code&gt;client-id&lt;/code&gt;替代占位符。&lt;/p&gt;
&lt;p&gt;code: &lt;a href=&#34;https://github.com/XUJiahua/metabase/pull/4/files&#34;&gt;https://github.com/XUJiahua/metabase/pull/4/files&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;demo&#34;&gt;DEMO&lt;/h3&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;使用Sample Data数据集测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; PEOPLE
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;STATE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;STATE&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=##&lt;/span&gt;client_id&lt;span style=&#34;color:#f92672&#34;&gt;##&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;返回的SQL中，可见占位符被替换为Google。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200616150506812.png&#34; alt=&#34;image-20200616150506812&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为还没有集成SSO系统，&lt;code&gt;client-id&lt;/code&gt;临时用&lt;code&gt;first-name&lt;/code&gt;来代替。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200616150614876.png&#34; alt=&#34;image-20200616150614876&#34;&gt;&lt;/p&gt;
- https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/ - </description>
        </item>
    
    
    
        <item>
        <title>使用 Perceptual hashing 去除微信头像内容干扰</title>
        <link>https://xujiahua.github.io/posts/20200611-phash/</link>
        <pubDate>Thu, 11 Jun 2020 11:38:55 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200611-phash/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200611-phash/ -&lt;p&gt;本文是&lt;a href=&#34;https://xujiahua.github.io/posts/20200514-wx-avatar/&#34;&gt;「微信用户授权头像内容带随机干扰的问题」&lt;/a&gt;的延续。本文对效果进行量化，并找到一个phash库，达到了更好的效果。&lt;/p&gt;
&lt;h2 id=&#34;实验框架&#34;&gt;实验框架&lt;/h2&gt;
&lt;p&gt;相关脚本&lt;a href=&#34;https://github.com/XUJiahua/phash_test&#34;&gt;点此&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;实验数据&#34;&gt;实验数据&lt;/h3&gt;
&lt;p&gt;10 组微信头像，每组 10万个头像。&lt;/p&gt;
&lt;p&gt;准备 10万 微信头像链接，重复下载10次：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./download.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;实验期望&#34;&gt;实验期望&lt;/h3&gt;
&lt;p&gt;期望目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 个头像链接对应 1 个特征：期望特征抽取算法能够剥离微信对头像内容加入的干扰。不然使用密码学哈希算法，1 个头像链接下载 10 次可能就对应 10 个特征了。&lt;/li&gt;
&lt;li&gt;1 个特征对应 1 个头像链接。跟哈希算法一样，希望哈希冲突尽可能小。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实验&#34;&gt;实验&lt;/h2&gt;
&lt;h3 id=&#34;图像降维方法&#34;&gt;图像降维方法&lt;/h3&gt;
&lt;p&gt;延续上文中在有限数据下得出的规则，图像降维到：32级灰度，10x10 尺寸。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python extract_feature_p2.py

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file,feature&amp;#34;&lt;/span&gt; &amp;gt; header.csv
cat header.csv download_1.csv download_2.csv download_3.csv download_4.csv download_5.csv download_6.csv download_7.csv download_8.csv download_9.csv download_10.csv &amp;gt; data.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个指标分析如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select avg(cnt) as expect1 from (select file, count(distinct feature) as cnt from &amp;#39;data&amp;#39; group by file)&amp;#34;&lt;/span&gt; data.csv

expect1
2.186088754189832

csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select avg(cnt) as expect1 from (select feature, count(distinct file) as cnt from &amp;#39;data&amp;#39; group by feature)&amp;#34;&lt;/span&gt; data.csv

expect1
1.0051170602511927
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个头像链接，重复下载 10 次的情况下，平均有生成 2.18 个特征。&lt;/p&gt;
&lt;p&gt;每个特征，平均对应 1 个头像链接。在期望内，毕竟是密码学哈希算出的特征。&lt;/p&gt;
&lt;h3 id=&#34;perceptual-hashing&#34;&gt;Perceptual hashing&lt;/h3&gt;
&lt;p&gt;使用了&lt;a href=&#34;https://github.com/JohannesBuchner/imagehash&#34;&gt;这个库&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python extract_feature_p.py

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file,feature&amp;#34;&lt;/span&gt; &amp;gt; header.csv
cat header.csv download_1.csv download_2.csv download_3.csv download_4.csv download_5.csv download_6.csv download_7.csv download_8.csv download_9.csv download_10.csv &amp;gt; data.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个指标分析如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select avg(cnt) as expect1 from (select file, count(distinct feature) as cnt from &amp;#39;data&amp;#39; group by file)&amp;#34;&lt;/span&gt; data.csv

expect1
1.1413604158721875

csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select avg(cnt) as expect1 from (select feature, count(distinct file) as cnt from &amp;#39;data&amp;#39; group by feature)&amp;#34;&lt;/span&gt; data.csv

expect1
1.0312553837783924
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个头像链接，重复下载 10 次的情况下，平均有生成 1.1 个特征，效果很惊艳！&lt;/p&gt;
&lt;p&gt;每个特征，平均对应 1.03 个头像链接。性能也很好了。&lt;/p&gt;
&lt;h4 id=&#34;详细分析&#34;&gt;详细分析&lt;/h4&gt;
&lt;p&gt;1 个头像链接对应不同特征数的区间分布：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select cnt, count(1) from (select file, count(distinct feature) as cnt from &amp;#39;data&amp;#39; group by file) group by cnt order by cnt&amp;#34;&lt;/span&gt; data.csv &amp;gt; dist1.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/image-20200611172502130.png&#34; alt=&#34;image-20200611172502130&#34;&gt;&lt;/p&gt;
&lt;p&gt;重复下载 10 次的情况下，89%的头像链接都映射到了唯一值。&lt;/p&gt;
&lt;p&gt;还有11%都是什么表现呢？大部分如图所示，只有部分位不同。可以理解，phash就是为了相似图搜索设计的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611174113623.png&#34; alt=&#34;image-20200611174113623&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个特征值对应不同头像链接的区间分布：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select cnt, count(1) from (select feature, count(distinct file) as cnt from &amp;#39;data&amp;#39; group by feature) group by cnt order by cnt&amp;#34;&lt;/span&gt; data.csv &amp;gt; dist2.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/image-20200611172438551.png&#34; alt=&#34;image-20200611172438551&#34;&gt;&lt;/p&gt;
&lt;p&gt;98%的特征值对应一个头像链接。分析下剩余的2%的特征值，一个个处理。&lt;/p&gt;
&lt;p&gt;使用如下脚本将相同特征值的图像放一块比较，参数为特征值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./open_same_hash_images.sh ec9e1413e268c377
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有两组图是比较异常的。如图169张图的特征值是一样的。共性是纯色。特征值也很奇怪 8000000000000000。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611155105274.png&#34; alt=&#34;image-20200611155105274&#34;&gt;&lt;/p&gt;
&lt;p&gt;如图46张图的特征值是一样的，共性是纯色。hash值也很奇怪 0000000000000000。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611155003908.png&#34; alt=&#34;image-20200611155003908&#34;&gt;&lt;/p&gt;
&lt;p&gt;其他hash值相同的图像文件，确实是相同的图像（肉眼看是一样的），如预期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611162618300.png&#34; alt=&#34;image-20200611162618300&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611162511234.png&#34; alt=&#34;image-20200611162511234&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;todo&#34;&gt;TODO&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;phash对不同纯色的图，生成的hash值是相同的。8000000000000000/0000000000000000这两个hash值很奇怪。&lt;/li&gt;
&lt;li&gt;相似的图，生成的hash值可能不同的，2-3位的数字可能不同。查看原理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;虽然对 phash 算法还是有点陌生，但是其效果基本满足了业务需求。至少比自己分析出的规则好很多。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200611-phash/ - </description>
        </item>
    
    
    
        <item>
        <title>Metabase SSO 登录</title>
        <link>https://xujiahua.github.io/posts/20200609-metabase-sso-login/</link>
        <pubDate>Tue, 09 Jun 2020 10:37:09 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200609-metabase-sso-login/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200609-metabase-sso-login/ -&lt;p&gt;探讨如何将 Metabase 融入业务系统（SaaS 服务）。&lt;/p&gt;
&lt;p&gt;为何需要集成 Metabase 到业务系统中呢？一般，通用的数据需求都做到SaaS服务中了。而现实情况是，客户是有很多定制化数据需求的。使用 Metabase 制作报表，直接跳过前后端开发，快速满足客户需求。&lt;/p&gt;
&lt;p&gt;（最终极地，进一步提高生产效率，把 Metabase 的组件化能力内化到 SaaS 服务中才是正道。）&lt;/p&gt;
&lt;p&gt;试分析下 Metabase 提供的方案，以及适配我们的场景，分析该怎么改。&lt;/p&gt;
&lt;h2 id=&#34;分析现存方案&#34;&gt;分析现存方案&lt;/h2&gt;
&lt;p&gt;开源版本的 Metabase 支持两种第三方登录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LDAP: Allows users within your LDAP directory to log in to Metabase with their LDAP credentials, and allows automatic mapping of LDAP groups to Metabase groups.&lt;/li&gt;
&lt;li&gt;Sign in with Google: Allows users with &lt;strong&gt;existing Metabase accounts&lt;/strong&gt; to login with a Google account that &lt;strong&gt;matches their email address&lt;/strong&gt; in addition to their Metabase username and password.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;企业版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SAML&lt;/li&gt;
&lt;li&gt;JWT&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Authenticating with Google Sign-In or LDAP &lt;a href=&#34;https://www.metabase.com/docs/latest/administration-guide/10-single-sign-on.html&#34;&gt;https://www.metabase.com/docs/latest/administration-guide/10-single-sign-on.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Authenticating with SAML &lt;a href=&#34;https://www.metabase.com/docs/latest/enterprise-guide/authenticating-with-saml.html&#34;&gt;https://www.metabase.com/docs/latest/enterprise-guide/authenticating-with-saml.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JWT-based Authentication &lt;a href=&#34;https://www.metabase.com/docs/latest/enterprise-guide/authenticating-with-jwt.html&#34;&gt;https://www.metabase.com/docs/latest/enterprise-guide/authenticating-with-jwt.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;sign-in-with-google&#34;&gt;Sign in with Google&lt;/h3&gt;
&lt;p&gt;其底层对接的是Google的Sign-In for Website &lt;a href=&#34;https://developers.google.com/identity/sign-in/web&#34;&gt;https://developers.google.com/identity/sign-in/web&lt;/a&gt; 。并假设 Google 返回的数据是完全可信的。&lt;/p&gt;
&lt;p&gt;根据文档配置获取 clientID。本地测试，Authorized JavaScript origins 设置成本地路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609164603642.png&#34; alt=&#34;image-20200609164603642&#34;&gt;&lt;/p&gt;
&lt;p&gt;管理员角色下 Metabase 配置 clientID。第二项，满足条件：email是@gmail.com结尾的，自动创建账户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609170932819.png&#34; alt=&#34;image-20200609170932819&#34;&gt;&lt;/p&gt;
&lt;p&gt;不然，需先创建Metabase账户，其email等于Google登录返回的邮箱地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609171443922.png&#34; alt=&#34;image-20200609171443922&#34;&gt;&lt;/p&gt;
&lt;p&gt;Google登录的client-id由后端提供给前端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609160327997.png&#34; alt=&#34;image-20200609160327997&#34;&gt;&lt;/p&gt;
&lt;p&gt;用户登录界面有了Google登录按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609104044953.png&#34; alt=&#34;image-20200609104044953&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击Google登录按钮，会唤起Google登录页面。登录成功，获取到Google返回结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609163652367.png&#34; alt=&#34;image-20200609163652367&#34;&gt;&lt;/p&gt;
&lt;p&gt;将Google返回里的token提交给Metabase服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609155729926.png&#34; alt=&#34;image-20200609155729926&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;google_auth&lt;/code&gt;这个接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609155759738.png&#34; alt=&#34;image-20200609155759738&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过token请求用户信息。参考：Calling the tokeninfo endpoint &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/backend-auth#calling-the-tokeninfo-endpoint&#34;&gt;https://developers.google.com/identity/sign-in/web/backend-auth#calling-the-tokeninfo-endpoint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609171805849.png&#34; alt=&#34;image-20200609171805849&#34;&gt;&lt;/p&gt;
&lt;p&gt;整体流程如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609180555022.png&#34; alt=&#34;image-20200609180555022&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ldap&#34;&gt;LDAP&lt;/h3&gt;
&lt;p&gt;LDAP 可以理解为一个用户数据库、服务，常见用途就是单点登录，用户只需要记住一个密码就可以登录多个服务。了解更多参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;轻型目录访问协议 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%BD%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE&#34;&gt;https://zh.wikipedia.org/wiki/%E8%BD%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What are CN, OU, DC in an LDAP search? &lt;a href=&#34;https://stackoverflow.com/questions/18756688/what-are-cn-ou-dc-in-an-ldap-search&#34;&gt;https://stackoverflow.com/questions/18756688/what-are-cn-ou-dc-in-an-ldap-search&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考文档搭建一个LDAP环境。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to install OpenLDAP on Ubuntu 18.04 &lt;a href=&#34;https://www.techrepublic.com/article/how-to-install-openldap-on-ubuntu-18-04/&#34;&gt;https://www.techrepublic.com/article/how-to-install-openldap-on-ubuntu-18-04/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS domain name 使用 metabase.com，我们会使用metabase的测试配置。&lt;/li&gt;
&lt;li&gt;测试配置使用 &lt;a href=&#34;https://github.com/metabase/metabase/blob/master/test_resources/ldap.ldif&#34;&gt;https://github.com/metabase/metabase/blob/master/test_resources/ldap.ldif&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ldapadd -x -D cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;admin,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;metabase,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -W -f test_resources/ldap.ldif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用一个LDAP可视化管理工具（用的 Apache Directory Studio）可以看到这样的树状结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609105314696.png&#34; alt=&#34;image-20200609105314696&#34;&gt;&lt;/p&gt;
&lt;p&gt;Metabase 管理界面配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609104528576.png&#34; alt=&#34;image-20200609104528576&#34;&gt;&lt;/p&gt;
&lt;p&gt;LDAP用户还是使用邮箱密码登录。优先使用LDAP登录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609110920538.png&#34; alt=&#34;image-20200609110920538&#34;&gt;&lt;/p&gt;
&lt;p&gt;LDAP用户、密码验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609111803290.png&#34; alt=&#34;image-20200609111803290&#34;&gt;&lt;/p&gt;
&lt;p&gt;验证通过，LDAP用户会映射为本地用户，但是不存密码。并同步group信息（LDAP group 与 metabase group 之间映射可配置）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609112238354.png&#34; alt=&#34;image-20200609112238354&#34;&gt;&lt;/p&gt;
&lt;p&gt;LDAP 用户信息的字段映射到本地用户的email/first_name/last_name，可以配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609114531757.png&#34; alt=&#34;image-20200609114531757&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;saml&#34;&gt;SAML&lt;/h3&gt;
&lt;p&gt;SAML是实现单点登录（SSO）的一种开放标准。仍然是服务方引导用户到认证中心认证，认证成功后，服务方从认证中心获取用户信息的逻辑。整体逻辑与Google Signin没两样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There three main roles in this communication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;End User&lt;/li&gt;
&lt;li&gt;Identity Provider (IdP)&lt;/li&gt;
&lt;li&gt;Service Provider (SP)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The end-user initiates the login process at the SP. The SP will redirect the user to the IdP with a SAML Request (AuthnRequest). The SAML Request will contain the necessary information for the IdP to authenticate the end-user and reply to the SP with the correct SAML Assertion (SAMLResponse).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.secureauth.com/blog/introduction-to-saml&#34;&gt;https://www.secureauth.com/blog/introduction-to-saml&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1127182513244158.Xyqs8g4zWlwULTRe33zB_height640.png&#34; alt=&#34;SAML SP Initiated SSO Flow&#34;&gt;&lt;/p&gt;
&lt;p&gt;GitHub找了个例子，了解下SAML的流程，可以有一个更具象的认识。 &lt;a href=&#34;https://github.com/crewjam/saml&#34;&gt;https://github.com/crewjam/saml&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SP 需要知道 IDP 的认证地址。需要知道 SAML Request 往哪发。&lt;/li&gt;
&lt;li&gt;IDP 需要知道 SP 的接收地址，需要知道 SAML Response 往哪发。&lt;/li&gt;
&lt;li&gt;IDP 与 SP之间是通过公私钥认证的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Security Assertion Markup Language &lt;a href=&#34;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&#34;&gt;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An Introduction to SAML (Security Assertion Markup Language) &lt;a href=&#34;https://www.secureauth.com/blog/introduction-to-saml&#34;&gt;https://www.secureauth.com/blog/introduction-to-saml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SAML library for go &lt;a href=&#34;https://github.com/crewjam/saml&#34;&gt;https://github.com/crewjam/saml&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;适配-saas-服务&#34;&gt;适配 SaaS 服务&lt;/h2&gt;
&lt;p&gt;企业内部使用，使用LDAP挺方便的。而 SaaS 服务怎么利用上Metabase呢？而且Metabase本身没有多租户（企业）的概念。&lt;/p&gt;
&lt;p&gt;大概分析如下：&lt;/p&gt;
&lt;h3 id=&#34;基于分组的数据隔离&#34;&gt;基于分组的数据隔离&lt;/h3&gt;
&lt;p&gt;SaaS 系统，多租户系统，最基本的要求是保证数据隔离。客户只能看到自己的数据（报表）。&lt;/p&gt;
&lt;p&gt;Metabase 数据隔离的手段只有分组。基于分组隔离客户，一个客户一个分组。因为少部分客户才会用到 Metabase 功能，所以分组不会非常多。&lt;/p&gt;
&lt;h3 id=&#34;报表功能复用&#34;&gt;报表功能复用？&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;这个有点难。只能一个个客户（对应每个分组）做报表。通用的功能，copy -&amp;gt; SQL里修改客户隔离标识 -&amp;gt; paste。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/&#34;&gt;Metabase 客户隔离&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;定制-sso-系统&#34;&gt;定制 SSO 系统&lt;/h3&gt;
&lt;p&gt;认证页、获取用户信息，每个SSO系统都是有的。这里需要考虑的是用户字段与Metabase的映射。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Metabase中用户信息有：&lt;code&gt;email&lt;/code&gt;/&lt;code&gt;first name&lt;/code&gt;/&lt;code&gt;last name&lt;/code&gt;。SSO系统需要有对应的字段。&lt;/li&gt;
&lt;li&gt;不是每个SaaS客户都能使用Metabase。SSO用户信息加入用户标识&lt;code&gt;metabase_enabled&lt;/code&gt;。没有标识，禁止进入 Metabase，Metabase 进行提示。&lt;/li&gt;
&lt;li&gt;用户信息中有客户隔离标识 &lt;code&gt;mid&lt;/code&gt;。对应 Metabase 分组。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;metabase&#34;&gt;Metabase&lt;/h3&gt;
&lt;p&gt;前端，Auth Provider 配置页：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置SSO认证页地址。（不能写死，生产、测试环境地址不同）&lt;/li&gt;
&lt;li&gt;配置SSO Token API地址。&lt;/li&gt;
&lt;li&gt;客户隔离标识与Metabase group映射。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前端，登录页：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供一个点击登录按钮。跳转到SSO认证页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对接 SSO 用户接口。&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20200609-metabase-sso-login/ - </description>
        </item>
    
    
    
        <item>
        <title>Metabase 日期筛选控件实践</title>
        <link>https://xujiahua.github.io/posts/20200605-metabase-field-filter/</link>
        <pubDate>Fri, 05 Jun 2020 14:41:44 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200605-metabase-field-filter/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200605-metabase-field-filter/ -&lt;p&gt;Metabase Dashboard 可以是动态的，常用的是指定时间范围筛选，查看这个时间段的指标。&lt;/p&gt;
&lt;h2 id=&#34;简单示范&#34;&gt;简单示范&lt;/h2&gt;
&lt;p&gt;使用 SAMPLE DATASET 数据库。定义一个Question：在某一时间段，订单数是多少。使用以下 SQL模板。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; ORDERS
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
[[&lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{{&lt;/span&gt;CREATED_AT&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&lt;/span&gt; ]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;Variables&lt;/code&gt;侧栏选择如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Variable type：Field Filter。（其他选项，Text/Number/Date 都是单值，没有范围。）&lt;/li&gt;
&lt;li&gt;Field to map to：选择对应的数据表字段，这里使用&lt;code&gt;ORDERS&lt;/code&gt;表的&lt;code&gt;CREATED_AT&lt;/code&gt;字段。&lt;/li&gt;
&lt;li&gt;Filter widget type：Date Range。&lt;strong&gt;注意，只有日期类型（&lt;code&gt;date&lt;/code&gt;/ &lt;code&gt;timestamp&lt;/code&gt;）有这些选择。&lt;/strong&gt;（其他选项，大同小异，都会生成对应SQL语句。）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200605151107271.png&#34; alt=&#34;image-20200605151107271&#34;&gt;&lt;/p&gt;
&lt;p&gt;在日期控件中选择时间范围，实际执行的SQL语句如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; ORDERS
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PUBLIC&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ORDERS&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATED_AT&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; date) &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; date &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-06-03&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; date &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-06-04&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开浏览器开发者工具就能看到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200605151454671.png&#34; alt=&#34;image-20200605151454671&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，生成了这个过滤条件：&lt;code&gt;CAST(&amp;quot;PUBLIC&amp;quot;.&amp;quot;ORDERS&amp;quot;.&amp;quot;CREATED_AT&amp;quot; AS date) BETWEEN date &#39;2020-06-03&#39; AND date &#39;2020-06-04&#39;&lt;/code&gt;替代了。&lt;/p&gt;
&lt;p&gt;column &lt;code&gt;CREATED_AT&lt;/code&gt; 被转为&lt;code&gt;date&lt;/code&gt;类型。因为日期控件的日期精度只到年月日，没有时分秒，实际使用中确实也没必要时分秒。&lt;/p&gt;
&lt;p&gt;不同的数据库，支持的数据类型是不同的，比如&lt;code&gt;Impala&lt;/code&gt;就不支持&lt;code&gt;date&lt;/code&gt;类型。Metabase 用如下语句达到相同效果（由各个数据库驱动负责实现），将&lt;code&gt;timestamp&lt;/code&gt;类型的精度截断到年月日：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(from_unixtime(unix_timestamp(from_timestamp(&lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; to_timestamp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-05-25 00:00:00&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; to_timestamp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-05-31 00:00:00&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SQL Parameters &lt;a href=&#34;https://www.metabase.com/docs/latest/users-guide/13-sql-parameters.html&#34;&gt;https://www.metabase.com/docs/latest/users-guide/13-sql-parameters.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;查询优化&#34;&gt;查询优化&lt;/h2&gt;
&lt;p&gt;分享下 Metabase 和 Impala 搭配使用场景下查询优化经验。&lt;/p&gt;
&lt;p&gt;查询优化的关键，主要还是SQL语句是否能够用到索引和分区键，尽量少地读数据文件。&lt;/p&gt;
&lt;p&gt;Impala 数据库以日期分区，ETL脚本每日都会为数据表新增一个分区。Impala 不支持以&lt;code&gt;timestamp&lt;/code&gt;类型作为分区键，也不支持&lt;code&gt;date&lt;/code&gt;类型，所以日期分区键的类型是&lt;code&gt;string&lt;/code&gt;，是不得不接受的现实。&lt;/p&gt;
&lt;p&gt;并建一个日期小表（如下），适应 Metabase 默认只有日期类型支持日期范围筛选的硬性要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200605160349439.png&#34; alt=&#34;image-20200605160349439&#34;&gt;&lt;/p&gt;
&lt;p&gt;Question定义从单表查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;distinct&lt;/span&gt; openid)
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dwd_fact_dks_wx_subscribe_v3
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(from_unixtime(unix_timestamp(from_timestamp(&lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;dwd_fact_dks_wx_subscribe_v3&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;subscribetime&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; to_timestamp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-05-01 00:00:00&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; to_timestamp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-05-16 00:00:00&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/image-20200605162741364.png&#34; alt=&#34;image-20200605162741364&#34;&gt;&lt;/p&gt;
&lt;p&gt;换成多表关联查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;distinct&lt;/span&gt; openid)
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dwd_fact_dks_wx_subscribe_v3
&lt;span style=&#34;color:#66d9ef&#34;&gt;inner&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt; dwd_dim_date_with_timestamp
&lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; dwd_fact_dks_wx_subscribe_v3.dt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dwd_dim_date_with_timestamp.dt
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(from_unixtime(unix_timestamp(from_timestamp(&lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;dwd_dim_date_with_timestamp&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;date_timestamp&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; to_timestamp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-05-01 00:00:00&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; to_timestamp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-05-16 00:00:00&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/image-20200605162706843.png&#34; alt=&#34;image-20200605162706843&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为用到分区键，Impala 少读不少文件，查询速度也快了很多。&lt;/p&gt;
&lt;p&gt;所以关键是要定义一个日期小表，查询使用分区键是常识。这样一个日期小表，还能解决如下的问题：&lt;/p&gt;
&lt;p&gt;一个&lt;code&gt;Question&lt;/code&gt;涉及多个事实表查询的，每个表都有时间戳字段。定义两个&lt;code&gt;Variable&lt;/code&gt;显得啰嗦，定义一个&lt;code&gt;Variable&lt;/code&gt;就无法处理了（每个Variable对应一个table column）。这时候共同关联到日期小表，用日期小表进行日期筛选。&lt;/p&gt;
&lt;h3 id=&#34;string类型也使用日期筛选控件&#34;&gt;string类型也使用日期筛选控件？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;dt&lt;/code&gt;字段是&lt;code&gt;string&lt;/code&gt;类型。以下查询与上文多表关联查询效果是一样的，但是少了定义日期小表的工作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;distinct&lt;/span&gt; openid)
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dwd_fact_dks_wx_subscribe_v3
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(from_unixtime(unix_timestamp(from_timestamp(&lt;span style=&#34;color:#66d9ef&#34;&gt;CAST&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;dwd_fact_dks_wx_subscribe_v3&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;dt&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; to_timestamp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-05-01 00:00:00&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; to_timestamp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-05-16 00:00:00&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以，如何让&lt;code&gt;string&lt;/code&gt;类型也使用日期筛选控件呢？翻了下文档，还真可以，Metabase 真的想的太周到了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A field’s “special type” is used to determine how to display it, and can also give certain types of fields special functionality. For example, by marking fields in a table as Latitude and Longitude, you allow the table to be used to create pin and heat maps. Similarly, marking a field as a URL allows users to click on it and go to that URL. &lt;a href=&#34;https://www.metabase.com/docs/latest/administration-guide/03-metadata-editing.html&#34;&gt;https://www.metabase.com/docs/latest/administration-guide/03-metadata-editing.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;管理员模式，将原是&lt;code&gt;string&lt;/code&gt;类型的字段映射成&lt;code&gt;Creation date&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200605170922208.png&#34; alt=&#34;image-20200605170922208&#34;&gt;&lt;/p&gt;
&lt;p&gt;Metabase 有三种数据类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Database type：数据库中的类型。由数据库驱动设置Database type到Data type的映射关系。&lt;/li&gt;
&lt;li&gt;Data type：Clojure进程中的类型。&lt;/li&gt;
&lt;li&gt;Field type：有特殊业务含义的类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Metabase 的设计想的很周到，文档也很齐全。因为少看了点文档，走了些弯路。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200605-metabase-field-filter/ - </description>
        </item>
    
    
    
        <item>
        <title>使用 REPL 调试 Clojure 项目（Metabase）</title>
        <link>https://xujiahua.github.io/posts/20200604-clojure-repl-debug/</link>
        <pubDate>Thu, 04 Jun 2020 16:13:27 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200604-clojure-repl-debug/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200604-clojure-repl-debug/ -&lt;h2 id=&#34;开发工具&#34;&gt;开发工具&lt;/h2&gt;
&lt;h3 id=&#34;intellij-idea--cursive&#34;&gt;Intellij IDEA + Cursive&lt;/h3&gt;
&lt;p&gt;安装 IDEA 社区版即可，并安装插件 Cursive。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200604161831382.png&#34; alt=&#34;image-20200604161831382&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;cursive-插件按键冲突&#34;&gt;Cursive 插件按键冲突&lt;/h4&gt;
&lt;p&gt;比如我会用组合键&lt;code&gt;⌘ + [&lt;/code&gt;浏览代码，与 Cursive 插件的按键冲突。可以取消 Cursive 的这个组合键。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200604162732892.png&#34; alt=&#34;image-20200604162732892&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;emacs&#34;&gt;Emacs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Added 2020-07-10&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://www.braveclojure.com/basic-emacs/&#34;&gt;How to Use Emacs, an Excellent Clojure Editor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;实践&lt;code&gt;Metabase&lt;/code&gt;代码库失败：在REPL中执行(-main)直接挂了，待研究。TBD&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;实践&#34;&gt;实践&lt;/h2&gt;
&lt;h3 id=&#34;metabase&#34;&gt;Metabase&lt;/h3&gt;
&lt;p&gt;接触 Clojure 是因为 Metabase 这个项目 &lt;a href=&#34;https://github.com/metabase/metabase&#34;&gt;https://github.com/metabase/metabase&lt;/a&gt; 。以 Metabase 为例，说明如何调试 Clojure 项目。&lt;/p&gt;
&lt;p&gt;Metabase 由前后端两部分组成，后端是由 Clojure 写的 REST API 项目。启动前端工程，需要在前端界面上触发 API 请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yarn build-hot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Metabase developers-guide &lt;a href=&#34;https://github.com/metabase/metabase/blob/master/docs/developers-guide.md&#34;&gt;https://github.com/metabase/metabase/blob/master/docs/developers-guide.md&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;repl-调试-clojure-项目&#34;&gt;REPL 调试 Clojure 项目&lt;/h3&gt;
&lt;p&gt;新建一个 Clojure REPL 配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200604163122517.png&#34; alt=&#34;image-20200604163122517&#34;&gt;&lt;/p&gt;
&lt;p&gt;展开右下角的 REPL 子窗口，Run REPL for metabase-core。（注意，此时，项目中的 clojure namespace 并没有实际加载。代码编辑区运行 Clojure 函数，会报错，&lt;code&gt;Error: :namespace-not-found&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200604163823092.png&#34; alt=&#34;image-20200604163823092&#34;&gt;&lt;/p&gt;
&lt;p&gt;metabase.core.clj 是整个项目的入口文件。执行 Load File in REPL。插件自动把所有 metabase.core 的依赖加载进 REPL 中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200604164551541.png&#34; alt=&#34;image-20200604164551541&#34;&gt;&lt;/p&gt;
&lt;p&gt;Load 成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200604165257244.png&#34; alt=&#34;image-20200604165257244&#34;&gt;&lt;/p&gt;
&lt;p&gt;入口函数&lt;code&gt;-main&lt;/code&gt;并不会自动运行的。调用&lt;code&gt;-main&lt;/code&gt;并发送函数到 REPL 中执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200604165642551.png&#34; alt=&#34;image-20200604165642551&#34;&gt;&lt;/p&gt;
&lt;p&gt;print 调试，改完代码即可生效。如下，加入打印变量函数，执行&lt;code&gt;Load File in REPL&lt;/code&gt;/&lt;code&gt;Sync Files in REPL&lt;/code&gt;/&lt;code&gt;Send xxx to REPL&lt;/code&gt;让函数生效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200604171525496.png&#34; alt=&#34;image-20200604171525496&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;repl-会阻塞&#34;&gt;REPL 会阻塞&lt;/h4&gt;
&lt;p&gt;会有发送函数到 REPL 中执行，而没有反应的情况。需要注意，REPL 会阻塞。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(.join (server/instance)))&lt;/code&gt; Jetty Server 阻塞住当前线程。所以其他函数在 REPL 中被阻塞了。&lt;/p&gt;
&lt;p&gt;Metabase 入口代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn- &lt;/span&gt;start-normally []
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;log/info&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;trs&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting Metabase in STANDALONE mode&amp;#34;&lt;/span&gt;))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; launch embedded webserver async&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;server/start-web-server!&lt;/span&gt; handler/app)
    &lt;span style=&#34;color:#75715e&#34;&gt;;; run our initialization process&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;init!&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;;; Ok, now block forever while Jetty does its thing&lt;/span&gt;
    (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;config/config-bool&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:mb-jetty-join&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;.join&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;server/instance&lt;/span&gt;)))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;catch&lt;/span&gt; Throwable e
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;log/error&lt;/span&gt; e (&lt;span style=&#34;color:#a6e22e&#34;&gt;trs&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Metabase Initialization FAILED&amp;#34;&lt;/span&gt;))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;System/exit&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;-main
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Launch Metabase in standalone mode.&amp;#34;&lt;/span&gt;
  [&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; [cmd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; args]]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;maybe-enable-tracing&lt;/span&gt;)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;cmd
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;run-cmd&lt;/span&gt; cmd args) &lt;span style=&#34;color:#75715e&#34;&gt;; run a command like `java -jar metabase.jar migrate release-locks` or `lein run migrate release-locks`&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;start-normally&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;; with no command line args just start Metabase normally&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决办法，就是不要让代码阻塞住当前线程、REPL。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Cursive REPL &lt;a href=&#34;https://cursive-ide.com/userguide/repl.html&#34;&gt;https://cursive-ide.com/userguide/repl.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;metabase-run-with-repl&#34;&gt;metabase run-with-repl&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Added 2020-07-10&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Cursive中也支持指定Profiles。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200710155103818.png&#34; alt=&#34;image-20200710155103818&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个profile的作用是设置&lt;code&gt;:mb-jetty-join&lt;/code&gt;为&lt;code&gt;false&lt;/code&gt;，不阻塞REPL主线程。另外启动&lt;code&gt;metabase.core/-main&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;project.clj

...
&lt;span style=&#34;color:#e6db74&#34;&gt;:run-with-repl&lt;/span&gt;
   [&lt;span style=&#34;color:#e6db74&#34;&gt;:exclude-tests&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;:include-all-drivers&lt;/span&gt;

    {&lt;span style=&#34;color:#e6db74&#34;&gt;:env&lt;/span&gt;
     {&lt;span style=&#34;color:#e6db74&#34;&gt;:mb-jetty-join&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;}

     &lt;span style=&#34;color:#e6db74&#34;&gt;:repl-options&lt;/span&gt;
     {&lt;span style=&#34;color:#e6db74&#34;&gt;:init&lt;/span&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;do &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;metabase.core&lt;/span&gt;)
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;metabase.core/-main&lt;/span&gt;))
      &lt;span style=&#34;color:#e6db74&#34;&gt;:timeout&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60000&lt;/span&gt;}}]
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种方式有一个缺点，&lt;code&gt;modules/drivers&lt;/code&gt;下的（源码）驱动并不会成功加载，调试&lt;code&gt;src/&lt;/code&gt;目录下的源码是没问题的。具体报错如下：（其中impala是driver名字）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Could not locate metabase/driver/impala__init.class, metabase/driver/impala.clj or metabase/driver/impala.cljc on classpath.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;试验了下，&lt;code&gt;plugins&lt;/code&gt;目录下的driver是可以成功加载的。&lt;/p&gt;
&lt;p&gt;开发模式下，按照加载机制，如果&lt;code&gt;plugins&lt;/code&gt;下的driver与&lt;code&gt;modules/drivers&lt;/code&gt;下的driver重名，会被后者覆盖掉。其实这是个bug，值没取对，导致两个目录下的同一个driver，重复加载并覆盖。（之前还好奇为何要加载两遍driver）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200710160645843.png&#34; alt=&#34;image-20200710160645843&#34;&gt;&lt;/p&gt;
&lt;p&gt;总结，目前使用这种配置，调试&lt;code&gt;Metabase&lt;/code&gt;核心包是没问题的，plugin driver建议放到&lt;code&gt;plugins&lt;/code&gt;目录。如何调试plugin driver的源码，这个还得研究。TBD&lt;/p&gt;
&lt;p&gt;不用&lt;code&gt;Cursive&lt;/code&gt;，直接运行&lt;code&gt;lein run-with-repl&lt;/code&gt;是没问题的。&lt;/p&gt;
&lt;h4 id=&#34;clojure-动态性&#34;&gt;Clojure 动态性：#&amp;rsquo;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;#&#39;&lt;/code&gt;是 Clojure 里的一个reader macro，可以理解为一个语法糖。 &lt;a href=&#34;https://en.wikibooks.org/wiki/Learning_Clojure/Reader_Macros&#34;&gt;https://en.wikibooks.org/wiki/Learning_Clojure/Reader_Macros&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际展开为&lt;code&gt;var&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#&#39;foo                 ; (var foo)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;比如一个内置方法&lt;code&gt;inc&lt;/code&gt;，以下两种写法都能用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(inc &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
=&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; = ((var inc) 1)&lt;/span&gt;
(&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
=&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种写法的区别，打开一个REPL试试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; twice version 1&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;twice [n] (* n &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;))
=&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user/twice&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; #&amp;#39;twice = (var twice) 定义simple-calc时编译器不会指向twice的内容内存地址，只是twice var的地址。&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;simple-calc &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;twice&lt;/span&gt;)
=&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user/simple-calc&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;simple-calc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
=&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6.0&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; 定义simple-calc2时编译器指向twice的内容内存地址。&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;simple-calc2 twice)
=&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user/simple-calc2&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;simple-calc2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
=&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6.0&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; 更新了 twice 的内容，两个 simple-calc 的表现就不一样了&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; twice version 2&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;twice [n] (* n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
=&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user/twice&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; 结果随着twice的变动更新了&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 每次运行 simple-calc，都会执行 (var twice)，保证取twice最新的内容内存地址。&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;simple-calc&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
=&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; 结果没变。因为内部使用的还是编译前的twice的内容内存地址。&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;simple-calc2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
=&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个回答是很好的解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dynamic handler update in Clojure Ring/Compojure REPL &lt;a href=&#34;https://stackoverflow.com/questions/28904260/dynamic-handler-update-in-clojure-ring-compojure-repl&#34;&gt;https://stackoverflow.com/questions/28904260/dynamic-handler-update-in-clojure-ring-compojure-repl&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实 Clojure 中最常用到的就是Var类型了，使用defn/def定义方法、变量都是定义Var类型，Var类型可以理解为一个容器，指向Function、Value。Clojure之所以如此动态，就是因为Var类型指向的内容可以随时更新。参考以下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/clojure-functional-concurrency-for-the-jvm-presented-at-oscon-47-728.jpg&#34; alt=&#34;Everything&amp;rsquo;s a Var! Function Namespace&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/hlship/clojure-functional-concurrency-for-the-jvm-presented-at-oscon/47-Everythings_a_Var_Function_Namespace&#34;&gt;https://www.slideshare.net/hlship/clojure-functional-concurrency-for-the-jvm-presented-at-oscon/47-Everythings_a_Var_Function_Namespace&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vars (instances of &lt;a href=&#34;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Var.java&#34;&gt;&lt;code&gt;clojure.lang.Var&lt;/code&gt;&lt;/a&gt;) are one of four constructs the Clojure language gives us to maintain a persistent reference to a changing value.&lt;a href=&#34;https://8thlight.com/blog/aaron-lahey/2016/07/20/relationship-between-clojure-functions-symbols-vars-namespaces.html#footnote-3&#34;&gt;3&lt;/a&gt; In fact, of the four constructs (&lt;a href=&#34;http://clojure.org/reference/vars&#34;&gt;vars&lt;/a&gt;, &lt;a href=&#34;http://clojure.org/reference/atoms&#34;&gt;atoms&lt;/a&gt;, &lt;a href=&#34;http://clojure.org/reference/refs&#34;&gt;refs&lt;/a&gt;, and &lt;a href=&#34;http://clojure.org/reference/agents&#34;&gt;agents&lt;/a&gt;), they&amp;rsquo;re probably the one you use the most without even realizing it! Every time something is defined using the special form &lt;code&gt;def&lt;/code&gt; (or the &lt;code&gt;defn&lt;/code&gt; macro which uses &lt;code&gt;def&lt;/code&gt; internally), Clojure creates a new var and places the value or function inside&amp;hellip;&lt;/p&gt;
&lt;p&gt;Having this mutable container act as a layer of indirection between a caller and the function being called is what allows Clojure to be so dynamic at runtime. If all invocations of a particular function are routed through this container, we&amp;rsquo;re given the opportunity to dynamically update the behavior of our program by changing or altering what is inside&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://8thlight.com/blog/aaron-lahey/2016/07/20/relationship-between-clojure-functions-symbols-vars-namespaces.html&#34;&gt;https://8thlight.com/blog/aaron-lahey/2016/07/20/relationship-between-clojure-functions-symbols-vars-namespaces.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Metabase 代码里就有很多&lt;code&gt;#&#39;&lt;/code&gt;的使用，比如这里定义的HTTP请求的middleware，保证开发时随时更改随时生效，提高开发效率。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; default-middleware是一个Vector（数组），每个元素都是一个含相同方法签名的方法。&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;default-middleware
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The default set of middleware applied to queries ran via `process-query`.&amp;#34;&lt;/span&gt;
  [&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mbql-to-native/mbql-&amp;gt;native&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check-features/check-features&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;optimize-datetime-filters/optimize-datetime-filters&lt;/span&gt;
   ...])

(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:arglists&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;([query] [query context])} process-query-async
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Process a query asynchronously, returning a `core.async` channel that is called with the final result (or Throwable).&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;base-qp&lt;/span&gt; default-middleware))

&lt;span style=&#34;color:#75715e&#34;&gt;;; In REPL-based dev rebuild the QP every time it is called; this way we don&amp;#39;t need to reload this namespace when&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; middleware is changed. Outside of dev only build the QP once for performance/locality （build once? HOW?）&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn- &lt;/span&gt;base-qp [middleware]
  &lt;span style=&#34;color:#75715e&#34;&gt;;; letfn与let类似，定义一个本地变量，letfn定义的是一个方法（变量）。&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letfn&lt;/span&gt; [(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt; [] &lt;span style=&#34;color:#75715e&#34;&gt;;; qp 方法名 [] 入参&lt;/span&gt;
              &lt;span style=&#34;color:#75715e&#34;&gt;;; 将middleware数组合并成一个middleware，可以合并是因为方法签名是一致的&lt;/span&gt;
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;qp.reducible/async-qp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;qp.reducible/combine-middleware&lt;/span&gt; middleware)))]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;config/is-dev?
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; args]
        (apply (&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;) args))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;REPL 的方式调试代码还是蛮新奇的，对我来说。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200604-clojure-repl-debug/ - </description>
        </item>
    
    
    
        <item>
        <title>记一次数据项目经历</title>
        <link>https://xujiahua.github.io/posts/20200529-bi_project/</link>
        <pubDate>Fri, 29 May 2020 11:00:23 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200529-bi_project/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200529-bi_project/ -&lt;p&gt;分享下 4月、5月（特别是5月，5/1假期后基本上全身心投入）在忙的这个数据项目经历，工作面覆盖陪同拜访客户、开会、需求分析、提供方案、数据清洗、数据分析、数据基础设施的搭建开发、帮甲方IT调试代码等环节，累到头秃。&lt;/p&gt;
&lt;p&gt;（本文刻意隐去客户信息。）&lt;/p&gt;
&lt;h2 id=&#34;需求背景&#34;&gt;需求背景&lt;/h2&gt;
&lt;p&gt;客户需求是做一个聚合小程序（此处脑补下麦当劳的微信小程序「i麦当劳」），用于广告投放，比如微信系APP的弹屏广告。应用本身不复杂，只是罗列客户其他小程序、H5应用和一些广告链接，让用户选择。&lt;/p&gt;
&lt;p&gt;投放效果需要数据量化，我们做了前后端的数据埋点，尽可能收集用户的行为记录。&lt;/p&gt;
&lt;p&gt;客户花钱投广告，是为了企业销售额等指标的提升。我们也对接了客户的订单数据，多方数据进行交叉分析。&lt;/p&gt;
&lt;p&gt;数据量化的结果，也就是数据报告，以日报、周报、月报的形式体现。&lt;/p&gt;
&lt;h2 id=&#34;技术细节&#34;&gt;技术细节&lt;/h2&gt;
&lt;p&gt;下文就以数据的生命周期来讲，数据是怎么从毛料，到精修，最后到报表的。&lt;/p&gt;
&lt;h3 id=&#34;数据采集&#34;&gt;数据采集&lt;/h3&gt;
&lt;p&gt;工作重点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义数据对接规范，或是理解别人的规范。&lt;/li&gt;
&lt;li&gt;与自家开发做好数据对接。把握数据质量。&lt;/li&gt;
&lt;li&gt;与甲方开发做好数据对接。把握数据质量。（为了加快数据对接速度，又是写示例代码、又是帮他们定位中文编码问题。体验真是酸爽。还是自家小伙伴靠谱。）&lt;/li&gt;
&lt;li&gt;数据质量很重要。数据质量决定了后续工作是否需要反复。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;1-前端应用埋点&#34;&gt;1. 前端应用埋点&lt;/h4&gt;
&lt;p&gt;用于收集聚合小程序的用户行为记录。&lt;/p&gt;
&lt;p&gt;整体架构还是沿用几年前的，唯一变化的就是埋点的规范，因为需求的不同而变化。基本上如下逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前端应用开发主动在代码中加入用户行为埋点。&lt;/li&gt;
&lt;li&gt;埋点 SDK 异步地将数据上传到服务器。多台服务器通过 DNS 解析来负载均衡。&lt;/li&gt;
&lt;li&gt;WEB 服务器使用的是 openresty，有一些 lua 脚本，用于处理 cookie，和格式化存储行为日志。&lt;/li&gt;
&lt;li&gt;之后数据通过Filebeat、Kafka、StreamSets等软件分发到Hadoop集群、实时处理任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200512145610312.png&#34; alt=&#34;image-20200512145610312&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-sftp-文件同步&#34;&gt;2. SFTP 文件同步&lt;/h4&gt;
&lt;p&gt;用于接收甲方的订单数据（二期、三期项目还有其他类型数据）。&lt;/p&gt;
&lt;p&gt;根据双方约定时间收取文件，将文件存入Hadoop集群。&lt;/p&gt;
&lt;h4 id=&#34;3-微信公众号授权&#34;&gt;3. 微信公众号授权&lt;/h4&gt;
&lt;p&gt;客户授权后，我们获取到了公众号的粉丝关注记录（由后端开发请求微信服务器取到数据并写入Kafka集群）。同样，也存放到了Hadoop集群。&lt;/p&gt;
&lt;h3 id=&#34;etl-与-数据仓库&#34;&gt;ETL 与 数据仓库&lt;/h3&gt;
&lt;p&gt;工作重点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;承上启下的工作。以方便数据分析为出发点，反过来检验数据质量。&lt;/li&gt;
&lt;li&gt;字符串类型的时间转为时间戳类型。BI 工具需要。&lt;/li&gt;
&lt;li&gt;基于数据金字塔模型、维度分析模型建模。&lt;/li&gt;
&lt;li&gt;数据仓库未来可以考虑 ClickHouse。Hadoop体系数据粒度是文件，更新历史数据中的某条记录，得更新所在的整个文件！&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;1-etl&#34;&gt;1. ETL&lt;/h4&gt;
&lt;p&gt;经过数据采集阶段，毛料数据以文件形式存储于Hadoop集群。本阶段主要将毛料数据抽取成表（实际还是文件存储）。&lt;/p&gt;
&lt;p&gt;技术上使用 Hive/Spark 框架写SQL。Hive SQL实在太慢了，所以一般使用Spark做清洗，Hive更多地是用其metastore组件，维护表结构信息。&lt;/p&gt;
&lt;p&gt;因为Spark（SQL）脚本得用Python写。抽象了一个清洗脚本模板，填空：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可选填清洗前执行的SQL。比如建表DDL。&lt;/li&gt;
&lt;li&gt;可选填毛料数据的解析schema。（直接依靠框架采样推理出schema，与实际schema比，可能缺字段，程序会崩。schema也没必要手写。一个技巧就是准备一条最全的数据记录，让Spark推理，把schema存下来使用。）&lt;/li&gt;
&lt;li&gt;填核心的清洗逻辑。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-数据仓库&#34;&gt;2. 数据仓库&lt;/h4&gt;
&lt;p&gt;数据是有层次结构的。以用户行为记录为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采集到的是&lt;strong&gt;毛料数据&lt;/strong&gt;。很多时候，为了埋点规范能够动态扩展，字段都定义在一个有嵌套JSON结构的字段里。&lt;/li&gt;
&lt;li&gt;清洗成&lt;strong&gt;明细数据&lt;/strong&gt;。一般是一张扁平表，能够描述用户在某上下文（时间、手机型号、IP地址）中点了某按钮。&lt;/li&gt;
&lt;li&gt;基于明细数据生成&lt;strong&gt;汇总数据&lt;/strong&gt;。明细数据中维度很多，是以用户维度、用户会话维度汇总？还是以按钮、手机型号汇总？&lt;/li&gt;
&lt;li&gt;汇总是有不同程度的，比如按程度从低到高，按日、按月、按年。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果把占数据量绝大部分的毛料数据放在底部，占少部分的汇总数据放在上方，数据的层次结构可以想象成金字塔。所以也有数据金字塔模型一说。&lt;/p&gt;
&lt;p&gt;数据仓库的材料网上很多，比如维度分析模型，就不展开了。&lt;/p&gt;
&lt;h3 id=&#34;olap-数据库-与-bi-工具&#34;&gt;OLAP 数据库 与 BI 工具&lt;/h3&gt;
&lt;p&gt;工作重点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为数据分析准备工作平台。&lt;/li&gt;
&lt;li&gt;保证 OLAP 数据库高效稳定。&lt;/li&gt;
&lt;li&gt;选择合适的BI工具，用户体验很重要。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200512153140285.png&#34; alt=&#34;image-20200512153140285&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-sql-on-hadoop&#34;&gt;1. SQL on Hadoop&lt;/h4&gt;
&lt;p&gt;因为数据仓库是基于Hadoop/Hive的。在这个体系下的，分析型数据库选择就不多了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用的CDH版本Hadoop，自带Impala。&lt;/li&gt;
&lt;li&gt;Hive。这个太慢了，无法适用BI场景。&lt;/li&gt;
&lt;li&gt;SparkSQL。需要独立安装。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最合适的就是Impala，查询速度快，天然由CDH Manager工具管理监控。而且每个impalad都是天然的proxy，任务会分发给其他节点，并行完成。&lt;/p&gt;
&lt;p&gt;一开始还没有为 Metabase 开发 Impala 的数据库驱动。有单独部署一个 SparkSQL Thrift Server。随着数据量上升，太容易因为 OOM 崩了。&lt;/p&gt;
&lt;h4 id=&#34;2-metabase&#34;&gt;2. Metabase&lt;/h4&gt;
&lt;p&gt;去年 10月工作内容调整，重新着手数据相关的工作。当时，时不时有一个H5营销应用的网页分析报表下载需求。为了减少人工操作，开始调研开源的 BI 工具。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;superset 名气挺大的，但是各种不方便。没法做 JOIN！写SQL没法直接做可视化！界面老土（用flask-appbuilder生成的UI模板）！&lt;/li&gt;
&lt;li&gt;Metabase。连本地MySQL做数据分析，体验没有硬伤，还有很多惊喜。对比下，技术选型还是选择了 Metabase。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Metabase的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开源。&lt;/li&gt;
&lt;li&gt;简单干净的界面，良好的文档，没遇到过大bug。 &lt;a href=&#34;https://www.metabase.com/docs/latest/users-guide/start.html&#34;&gt;https://www.metabase.com/docs/latest/users-guide/start.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;X-Ray 功能。自动生成一张表的常见统计指标。惊喜的功能！我一度还在花时间写类似的工具，用于大数据上的数据探索。因为收益太低放弃了。&lt;/li&gt;
&lt;li&gt;比较常用的可视化技术。 &lt;a href=&#34;https://www.metabase.com/docs/latest/users-guide/05-visualizing-results.html&#34;&gt;https://www.metabase.com/docs/latest/users-guide/05-visualizing-results.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RBAC。权限控制。权限的粒度，数据库、表、分析文件夹。通过创建权限组，将一类用户集中管理。用途，某某项目组下的用户只能看到Dashboard，不能进行SQL操作，&lt;/li&gt;
&lt;li&gt;Filters。Dashboard/Question 中可指定SQL参数，可设置默认值。用途，筛选时间段、筛选活动ID，不需要重复创建Dashboard。一个Dashboard建议不要太多 filter （更多filter，感觉Kibana+Elasticsearch的组合更合适）。详见 &lt;a href=&#34;https://www.metabase.com/docs/latest/users-guide/08-dashboard-filters.html&#34;&gt;https://www.metabase.com/docs/latest/users-guide/08-dashboard-filters.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;数据导出。Dashboard没法直接下载Question中的数据，需要点击进入各个Question下载。&lt;/li&gt;
&lt;li&gt;BI工具，是真正贯彻了组件化思维。可视化都是选项，通过点击就能制作一个图表。平台不再是写死的，而是动态变化的。数据分析、数据工程、前后端开发，充分解耦。目前我们平台的问题就是数据分析和前后端开发是耦合在一起的，迭代会很慢。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;美中不足，没有开箱即用的 Impala 驱动。花了些时间研究，写了个 Impala 驱动，已经在生产使用了。参考 &lt;a href=&#34;https://xujiahua.github.io/posts/20200527-metabase-impala-driver/&#34;&gt;https://xujiahua.github.io/posts/20200527-metabase-impala-driver/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据分析&#34;&gt;数据分析&lt;/h3&gt;
&lt;p&gt;工作重点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;理解客户需求，以客户需求为中心做数据分析。&lt;/li&gt;
&lt;li&gt;写 SQL。维度分析和对比分析。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;客户需求&#34;&gt;客户需求&lt;/h4&gt;
&lt;p&gt;客户需求，是运营在跟。而我是一个没有灵魂的SQL写手。渐渐因为只是写这些繁杂的SQL，觉得非常无聊。目前还深受折磨。&lt;/p&gt;
&lt;p&gt;以客户需求为中心做数据分析。这是我跟运营学到的一课。虽然数据分析有套路，但是维度那么多、对比那么多，毫无目的地发散空耗自身精力。&lt;/p&gt;
&lt;h4 id=&#34;隐藏的维度信息&#34;&gt;隐藏的维度信息&lt;/h4&gt;
&lt;p&gt;比如行为记录埋点，只有一个按钮名称。这个按钮的真正去向是什么页面、什么时候创建的，需要向开发收集。&lt;/p&gt;
&lt;p&gt;比如订单中，只有一个门店名称。这个门店所在的城市、分公司隶属关系这些信息需要收集，扩充门店的维度信息。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;以上为近2月项目的浓缩总结。人力有限，每个环节都做得比较粗放。&lt;/p&gt;
&lt;p&gt;但总体有条不紊，幸亏洪敏和我前期的积累。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200529-bi_project/ - </description>
        </item>
    
    
    
        <item>
        <title>Metabase Impala Driver 0528更新日志</title>
        <link>https://xujiahua.github.io/posts/20200528-metabase-impala-type/</link>
        <pubDate>Thu, 28 May 2020 09:30:09 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200528-metabase-impala-type/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200528-metabase-impala-type/ -&lt;p&gt;体验过程中还是碰到不少问题。&lt;/p&gt;
&lt;h2 id=&#34;1-timestamp-类型没有过滤器样式&#34;&gt;1. TIMESTAMP 类型没有过滤器样式&lt;/h2&gt;
&lt;h3 id=&#34;现象&#34;&gt;现象&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200528173609294.png&#34; alt=&#34;image-20200528173609294&#34;&gt;&lt;/p&gt;
&lt;p&gt;连 SparkSQL 没这个问题。同样是TIMESTAMP类型，表现不同。&lt;/p&gt;
&lt;h3 id=&#34;初步分析&#34;&gt;初步分析&lt;/h3&gt;
&lt;p&gt;在数据库中查看存储的字段信息，Impala/SparkSQL对比看，发现 Impala 数据库下的字段 base_type 都是 &lt;code&gt;type/*&lt;/code&gt;。而 database_type，Impala 都是大写的，比如TIMESTAMP，而不是timestamp。所以，并不仅仅是TIMESTAMP类型没有过滤器样式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200528173915594.png&#34; alt=&#34;image-20200528173915594&#34;&gt;&lt;/p&gt;
&lt;p&gt;Metabase 数据库类型会映射为 Clojure类型，数据库类型的名称是大小写敏感的。所以不能复用hive-like中的实现（都是小写的），而且Hive与Impala的类型还是有些不同的。&lt;/p&gt;
&lt;h3 id=&#34;hive-impala的数据类型异同&#34;&gt;Hive Impala的数据类型异同&lt;/h3&gt;
&lt;p&gt;以 Hive Data Types 为基准。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type Name&lt;/th&gt;
&lt;th&gt;Type Catgory&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;th&gt;Impala Support?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TINYINT&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMALLINT&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INT&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BIGINT&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FLOAT&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DOUBLE&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DOUBLE PRECISION&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;alias for DOUBLE, only available starting with Hive 2.2.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DECIMAL&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;Introduced in Hive 0.11.0 with a precision of 38 digits&lt;!-- raw HTML omitted --&gt;Hive 0.13.0 introduced user-definable precision and scale&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NUMERIC&lt;/td&gt;
&lt;td&gt;Numeric Types&lt;/td&gt;
&lt;td&gt;same as DECIMAL, starting with Hive 3.0.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIMESTAMP&lt;/td&gt;
&lt;td&gt;Date/Time Types&lt;/td&gt;
&lt;td&gt;available starting with Hive 0.8.0&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DATE&lt;/td&gt;
&lt;td&gt;Date/Time Types&lt;/td&gt;
&lt;td&gt;available starting with Hive 0.12.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INTERVAL&lt;/td&gt;
&lt;td&gt;Date/Time Types&lt;/td&gt;
&lt;td&gt;available starting with Hive 1.2.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STRING&lt;/td&gt;
&lt;td&gt;String Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VARCHAR&lt;/td&gt;
&lt;td&gt;String Types&lt;/td&gt;
&lt;td&gt;available starting with Hive 0.12.0&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CHAR&lt;/td&gt;
&lt;td&gt;String Types&lt;/td&gt;
&lt;td&gt;available starting with Hive 0.13.0&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BOOLEAN&lt;/td&gt;
&lt;td&gt;Misc Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BINARY&lt;/td&gt;
&lt;td&gt;Misc Types&lt;/td&gt;
&lt;td&gt;available starting with Hive 0.8.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arrays: ARRAY&amp;lt;data_type&amp;gt;&lt;/td&gt;
&lt;td&gt;Complex Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maps: MAP&amp;lt;primitive_type, data_type&amp;gt;&lt;/td&gt;
&lt;td&gt;Complex Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;structs: STRUCT&amp;lt;col_name : data_type [COMMENT col_comment], &amp;hellip;&amp;gt;&lt;/td&gt;
&lt;td&gt;Complex Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;union: UNIONTYPE&amp;lt;data_type, data_type, &amp;hellip;&amp;gt;&lt;/td&gt;
&lt;td&gt;Complex Types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hive Data Types &lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types&#34;&gt;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Impala Data Types &lt;a href=&#34;https://docs.cloudera.com/documentation/enterprise/latest/topics/impala_datatypes.html&#34;&gt;https://docs.cloudera.com/documentation/enterprise/latest/topics/impala_datatypes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SQL Differences Between Impala and Hive &lt;a href=&#34;https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/impala_langref_unsupported.html&#34;&gt;https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/impala_langref_unsupported.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;fix&#34;&gt;fix&lt;/h3&gt;
&lt;p&gt;根据与Hive数据类型对比，重写方法 &lt;code&gt;sql-jdbc.sync/database-type-&amp;gt;base-type&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defmethod &lt;/span&gt;sql-jdbc.sync/database-type-&amp;gt;base-type &lt;span style=&#34;color:#e6db74&#34;&gt;:impala&lt;/span&gt;
  [_ database-type]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;condp&lt;/span&gt; re-matches (name database-type)
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TINYINT&amp;#34;&lt;/span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Integer&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SMALLINT&amp;#34;&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Integer&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INT&amp;#34;&lt;/span&gt;              &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Integer&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BIGINT&amp;#34;&lt;/span&gt;           &lt;span style=&#34;color:#e6db74&#34;&gt;:type/BigInteger&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FLOAT&amp;#34;&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Float&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DOUBLE&amp;#34;&lt;/span&gt;           &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Float&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DECIMAL.*&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Decimal&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TIMESTAMP&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;:type/DateTime&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;STRING.*&amp;#34;&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Text&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VARCHAR.*&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Text&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CHAR.*&amp;#34;&lt;/span&gt;           &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Text&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BOOLEAN&amp;#34;&lt;/span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Boolean&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ARRAY.*&amp;#34;&lt;/span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Array&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MAP.*&amp;#34;&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;:type/Dictionary&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt;               &lt;span style=&#34;color:#e6db74&#34;&gt;:type/*&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/XUJiahua/metabase/pull/2/commits/e156683989844eb2405e5240e888249a2defe78c&#34;&gt;https://github.com/XUJiahua/metabase/pull/2/commits/e156683989844eb2405e5240e888249a2defe78c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200528120341696.png&#34; alt=&#34;image-20200528120341696&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样，TIMESTAMP 类型就有过滤器样式了。&lt;/p&gt;
&lt;h2 id=&#34;2-timestamp-xxx-报错信息&#34;&gt;2. timestamp xxx 报错信息&lt;/h2&gt;
&lt;h3 id=&#34;现象-1&#34;&gt;现象&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;ParseException: Syntax error in line 4:\nAND date_timestamp &amp;lt; timestamp &amp;lsquo;2019-01-03 00:00:00.000&amp;rsquo;\n ^\nEncountered: TIMESTAMP\nExpected: CASE, CAST, DEFAULT, EXISTS, FALSE, IF, INTERVAL, LEFT, NOT, NULL, REPLACE, RIGHT, TRUNCATE, TRUE, IDENTIFIER\n\nCAUSED BY: Exception: Syntax error\n&amp;rdquo;,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SQL过滤器测试用例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; product.dwd_dim_date_with_timestamp
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
[[&lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; date_timestamp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{{&lt;/span&gt;date_timestamp&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&lt;/span&gt; ]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;洪敏眼尖，发现是 Impala 不支持这个语法。&lt;/p&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;hive-like 并没有重写处理 LocalDateTime 的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200528165940717.png&#34; alt=&#34;image-20200528165940717&#34;&gt;&lt;/p&gt;
&lt;p&gt;而 Impala TIMESTAMP是没有时区的，大概率会用这个方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Impala, the TIMESTAMP data type holds a value of date and time. It can be decomposed into year, month, day, hour, minute and seconds fields, but with no time zone information available, it does not correspond to any specific point in time. &lt;a href=&#34;https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/impala_timestamp.html&#34;&gt;https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/impala_timestamp.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认实现是 timestamp 语法，报错信息就在这。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defmethod &lt;/span&gt;unprepare-value [&lt;span style=&#34;color:#e6db74&#34;&gt;:sql&lt;/span&gt; LocalDateTime]
  [_ t]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timestamp &amp;#39;%s&amp;#39;&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t/format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy-MM-dd HH:mm:ss.SSS&amp;#34;&lt;/span&gt; t)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;fix-1&#34;&gt;fix&lt;/h3&gt;
&lt;p&gt;找到 Impala 对应的 SQL 函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defmethod &lt;/span&gt;unprepare/unprepare-value [&lt;span style=&#34;color:#e6db74&#34;&gt;:impala&lt;/span&gt; LocalDateTime]
  [_ t]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;to_timestamp(&amp;#39;%s&amp;#39;, &amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;)&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t/format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;&lt;/span&gt; t)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/XUJiahua/metabase/pull/2/commits/005b878caf2fbbbd8c00a7ed016c899187f59d3c&#34;&gt;https://github.com/XUJiahua/metabase/pull/2/commits/005b878caf2fbbbd8c00a7ed016c899187f59d3c&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-date_format-unknown&#34;&gt;3. date_format() unknown&lt;/h2&gt;
&lt;h3 id=&#34;现象-2&#34;&gt;现象&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200528210146896.png&#34; alt=&#34;image-20200528210146896&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;分析-1&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;大概率又是 Impala 不支持 date_format 这个函数。代码中搜索关键字。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200528212547249.png&#34; alt=&#34;image-20200528212547249&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里简单说明下，&lt;code&gt;(hsql/call :date_format xx xx)&lt;/code&gt; 这个方法最终会生成 SQL语句 &lt;code&gt;date_format(xx, xx)&lt;/code&gt;。又一次，我们得找到 Impala 中的SQL函数来替代它。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hive/SparkSQL Built-in Functions &lt;a href=&#34;https://spark.apache.org/docs/2.4.5/api/sql/index.html#date_format&#34;&gt;https://spark.apache.org/docs/2.4.5/api/sql/index.html#date_format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Impala Built-In Functions &lt;a href=&#34;https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/impala_functions.html&#34;&gt;https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/impala_functions.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Impala Date and Time Functions &lt;a href=&#34;https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/impala_datetime_functions.html&#34;&gt;https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/impala_datetime_functions.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;fix-2&#34;&gt;fix&lt;/h3&gt;
&lt;p&gt;因为 &lt;code&gt;date-format&lt;/code&gt; 被应用中很多 &lt;code&gt;defmethod sql.qp/date&lt;/code&gt; 方法里，所以在 Impala 重新实现这些方法，尽可能用 Impala 内置的函数。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/XUJiahua/metabase/pull/2/commits/01046a664dc8bc9d815184fd6ec419b7a4c1aa10&#34;&gt;https://github.com/XUJiahua/metabase/pull/2/commits/01046a664dc8bc9d815184fd6ec419b7a4c1aa10&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这些问题主要还是 Impala 和 Hive 的 SQL 规范不一样。令人头秃。不过对 Metabase 越来越熟悉了。&lt;/p&gt;
&lt;h3 id=&#34;未完待续&#34;&gt;未完待续&lt;/h3&gt;
&lt;p&gt;这2个选项还在报错，应该是不支持对应的方法。还好暂时用不到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200528213420179.png&#34; alt=&#34;image-20200528213420179&#34;&gt;&lt;/p&gt;
- https://xujiahua.github.io/posts/20200528-metabase-impala-type/ - </description>
        </item>
    
    
    
        <item>
        <title>Metabase Impala Driver</title>
        <link>https://xujiahua.github.io/posts/20200527-metabase-impala-driver/</link>
        <pubDate>Wed, 27 May 2020 12:16:36 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200527-metabase-impala-driver/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200527-metabase-impala-driver/ -&lt;p&gt;Metabase 版本：v0.35.3&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;我们的数据仓库是 Hadoop/Hive 体系的。Hadoop 版本采用的是 CDH 发行版。在这个背景下 SQL on Hadoop 的方案有 Hive/Impala/(SparkSQL)。作为 BI 数据库，Impala 在我们的场景下比较合适。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hive：太慢了。做 ETL 可以，BI 非常不适。&lt;/li&gt;
&lt;li&gt;SparkSQL：CDH 官方 Spark 不含 Thrift Server。为了能够使用 Metabase ，独立于 CDH 启了个 Thrift Server，用着还不错。问题就在于缺乏统一管理，比如 Kerberos 的管理就得自己写脚本处理、进程 OOM 挂掉了 CDH Manager 也监测不到。&lt;/li&gt;
&lt;li&gt;Impala：CDH 官方出品，为 BI 而设计，由 CDH Manager 管理。根据这份报告，见下参考链接，Impala 好于 SparkSQL。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;出于尽可能复用已有基础设施的目的，选择 Impala。而 Metabase 官方、社区并不提供 Impala 驱动。本文就是为了探索并解决这个问题。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开源OLAP引擎测评报告(SparkSql、Presto、Impala、HAWQ、ClickHouse、GreenPlum) &lt;a href=&#34;http://www.clickhouse.com.cn/topic/5c453371389ad55f127768ea&#34;&gt;http://www.clickhouse.com.cn/topic/5c453371389ad55f127768ea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;现有驱动探索&#34;&gt;现有驱动探索&lt;/h2&gt;
&lt;h3 id=&#34;搭建-impala-开发环境&#34;&gt;搭建 Impala 开发环境&lt;/h3&gt;
&lt;p&gt;使用 Cloudera Quickstart Docker 镜像（官方已经下架 quickstart vm ）。其中，Impala版本 2.5.0。（我们的生产环境：CDH 6.3.2 Impala 3.2.0 Hive 2.1.1）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --name cloudera_quickstart --hostname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;quickstart.cloudera &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -t -i -d -p 8888:8888 -p 80:80 -p 10000:10000 -p 7180:7180 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-p 21050:21050 -p 50070:50070 -p 50075:50075 -p 50010:50010 -p 50020:50020 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-p 8020:8020 cloudera/quickstart /usr/bin/docker-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一些端口使用的说明：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Port&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8888&lt;/td&gt;
&lt;td&gt;HUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21050&lt;/td&gt;
&lt;td&gt;Impala&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;Hive&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：关闭再启动容器，Impala进程并没有重启。重启 Impala 最直接的方法就是重建容器。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;quickstart docker image &lt;a href=&#34;https://hub.docker.com/r/cloudera/quickstart&#34;&gt;https://hub.docker.com/r/cloudera/quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;15分钟——在Docker启动Cloudera并开始体验 &lt;a href=&#34;https://xieshaohu.wordpress.com/2019/02/26/15%E5%88%86%E9%92%9F-%E5%9C%A8docker%E5%90%AF%E5%8A%A8cloudera%E5%B9%B6%E5%BC%80%E5%A7%8B%E4%BD%93%E9%AA%8C/&#34;&gt;https://xieshaohu.wordpress.com/2019/02/26/15%E5%88%86%E9%92%9F-%E5%9C%A8docker%E5%90%AF%E5%8A%A8cloudera%E5%B9%B6%E5%BC%80%E5%A7%8B%E4%BD%93%E9%AA%8C/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;尝试-mwullinkmetabase&#34;&gt;尝试 mwullink/metabase&lt;/h3&gt;
&lt;p&gt;在 metabase issue 里看到一个关掉的关于Impala的PR，这方面的资料真的很少。如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Support Apache Impala database #3002 #3749 &lt;a href=&#34;https://github.com/metabase/metabase/pull/3749&#34;&gt;https://github.com/metabase/metabase/pull/3749&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support Apache Impala database #3002 &lt;a href=&#34;https://github.com/metabase/metabase/issues/3002&#34;&gt;https://github.com/metabase/metabase/issues/3002&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可惜，并没有被合并到官方库。尝试编译作者mwullink的metabase版本。 &lt;a href=&#34;https://github.com/mwullink/metabase&#34;&gt;https://github.com/mwullink/metabase&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/mwullink/metabase.git metabase-mwullink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个metabase版本太老了，前端依赖还是node 4.4.7（warning You are using Node &amp;ldquo;4.4.7&amp;rdquo; which is not supported and may encounter bugs or unexpected behavior. Yarn supports the following semver range: &amp;ldquo;^4.8.0 || ^5.7.0 || ^6.2.2 || &amp;gt;=8.0.0&amp;rdquo;），另外yarn对node4.x也有兼容问题（ &lt;a href=&#34;https://github.com/yarnpkg/yarn/issues/6900&#34;&gt;https://github.com/yarnpkg/yarn/issues/6900&lt;/a&gt; ）。&lt;/p&gt;
&lt;p&gt;特殊处理逻辑：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# nvm 安装 node 4.x 版本&lt;/span&gt;
nvm install lts/argon

&lt;span style=&#34;color:#75715e&#34;&gt;# 修改 node 版本&lt;/span&gt;
vim package.json
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;engines&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4.9.1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;npm&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.15.11&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装老版本的yarn&lt;/span&gt;
npm --global install yarn@1.12.3

&lt;span style=&#34;color:#75715e&#34;&gt;# 这样就可以了&lt;/span&gt;
./bin/build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# jar目录&lt;/span&gt;
cd ./target/uberjar

&lt;span style=&#34;color:#75715e&#34;&gt;# 将impala驱动放这里。下载和安装参考 https://github.com/metabase/metabase/pull/3749/files&lt;/span&gt;
mkdir plugins

&lt;span style=&#34;color:#75715e&#34;&gt;# 换个端口号，本地还有其他版本metabase运行&lt;/span&gt;
java -DMB_JETTY_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12345&lt;/span&gt; -jar metabase.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以直接写SQL查询，基于查询结果也能做 chart/dashboard。&lt;/li&gt;
&lt;li&gt;但是metadata（比如表结构）并没有同步。SQL查询的右边表结构也不会显示，filter功能受影响。&lt;/li&gt;
&lt;li&gt;metadata没有同步，也没有报错信息。（作为对比，连mysql是有metadata同步的。）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用官方-sparksql-驱动&#34;&gt;使用官方 sparksql 驱动&lt;/h3&gt;
&lt;p&gt;尝试使用 sparksql 驱动来连接 Impala 数据库。&lt;/p&gt;
&lt;p&gt;因为 SparkSQL 的 thrift server 复用的是 HiveServer2 的实现，架构如下图。而 Impala 可以使用 Hive 的JDBC Driver （ &lt;a href=&#34;https://impala.apache.org/docs/build/html/topics/impala_jdbc.html&#34;&gt;https://impala.apache.org/docs/build/html/topics/impala_jdbc.html&lt;/a&gt; &lt;a href=&#34;https://docs.cloudera.com/documentation/enterprise/latest/topics/impala_jdbc.html#jdbc_driver_choice&#34;&gt;https://docs.cloudera.com/documentation/enterprise/latest/topics/impala_jdbc.html#jdbc_driver_choice&lt;/a&gt; ）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200520093534168.png&#34; alt=&#34;image-20200520093534168&#34;&gt;&lt;/p&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以直接写SQL查询，基于查询结果也能做chart/dashboard。&lt;/li&gt;
&lt;li&gt;但是表结构并没有同步。SQL查询的右边表结构也不会显示，filter功能受影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步有报错信息。终于有线索了&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;db-metadata-同步出错&#34;&gt;db-metadata 同步出错&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200525102147780.png&#34; alt=&#34;image-20200525102147780&#34;&gt;&lt;/p&gt;
&lt;p&gt;第10行的这个方法崩了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200525162346701.png&#34; alt=&#34;image-20200525162346701&#34;&gt;&lt;/p&gt;
&lt;p&gt;方法 &lt;code&gt;driver/describe-database&lt;/code&gt; 的作用是获取db的所有表。方法 &lt;code&gt;driver/describe-table&lt;/code&gt;的作用是获取table的字段信息 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defmulti &lt;/span&gt;describe-database
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return a map containing information that describes all of the tables in a `database`, an instance of the `Database`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  model. It is expected that this function will be peformant and avoid draining meaningful resources of the database.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Results should match the `metabase.sync.interface/DatabaseMetadata` schema.&amp;#34;&lt;/span&gt;
  {&lt;span style=&#34;color:#e6db74&#34;&gt;:arglists&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;([driver database])}
  dispatch-on-initialized-driver
  &lt;span style=&#34;color:#e6db74&#34;&gt;:hierarchy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hierarchy&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defmulti &lt;/span&gt;describe-table
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return a map containing information that describes the physical schema of `table` (i.e. the fields contained
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  therein). `database` will be an instance of the `Database` model; and `table`, an instance of the `Table` model. It is
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  expected that this function will be peformant and avoid draining meaningful resources of the database. Results
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  should match the `metabase.sync.interface/TableMetadata` schema.&amp;#34;&lt;/span&gt;
  {&lt;span style=&#34;color:#e6db74&#34;&gt;:arglists&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;([driver database table])}
  dispatch-on-initialized-driver
  &lt;span style=&#34;color:#e6db74&#34;&gt;:hierarchy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hierarchy&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这（两）个方法调用失败，Metabase 上自然就没有表结构信息了。&lt;/p&gt;
&lt;p&gt;sparksql驱动“重载”了这两个方法。初步怀疑与重载有关，sparksql 的父驱动 jdbc-sql 是有默认实现的，尝试注释掉重载。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200525163902594.png&#34; alt=&#34;image-20200525163902594&#34;&gt;&lt;/p&gt;
&lt;p&gt;神奇地发现，注释掉这两个方法，可以直接通过sparksql驱动连接impala服务器了。&lt;/p&gt;
&lt;p&gt;猜想，SparkSQL的Thrift Server和Impala  Server实现有差异，SparkSQL Thrift Server可能因为有设计缺陷，需要在驱动上打上补丁。&lt;/p&gt;
&lt;h2 id=&#34;自己写驱动&#34;&gt;自己写驱动&lt;/h2&gt;
&lt;p&gt;基于最新版 Metabase 0.35.3 开发。（尝试编译 master 分支，发现打包结果 &lt;code&gt;java -jar metabase.jar&lt;/code&gt; 报错。）&lt;/p&gt;
&lt;p&gt;自己写驱动，目前来看有两条路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过分析 sparksql 驱动的报错信息，貌似找到了连接 Impala 数据库的方式。为了兼容现有的 sparksql 实现，在 sparksql 包中新增一个 impala 文件（复用hive-like父类实现，与sparksql 平行）。&lt;/li&gt;
&lt;li&gt;新增一个驱动包 impala。基于Impala官方的JDBC驱动实现。需要系统理解下 Metabase 驱动开发逻辑。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，都需要对 Metabase 有一定熟悉程度，先看下文档。&lt;/p&gt;
&lt;h3 id=&#34;sparksql-包中新增一个-impala-driver&#34;&gt;sparksql 包中新增一个 impala driver&lt;/h3&gt;
&lt;p&gt;按照上述思路，代码提交在这里。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/XUJiahua/metabase/tree/driver-impala-in-sparksql/modules/drivers/sparksql&#34;&gt;https://github.com/XUJiahua/metabase/tree/driver-impala-in-sparksql/modules/drivers/sparksql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本地测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200526165539889.png&#34; alt=&#34;image-20200526165539889&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200526165644979.png&#34; alt=&#34;image-20200526165644979&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200526165735569.png&#34; alt=&#34;image-20200526165735569&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;sparksql-包的依赖问题-存量bug&#34;&gt;sparksql 包的依赖问题 （存量bug）&lt;/h4&gt;
&lt;p&gt;如果服务端启用了 Kerberos 认证，会有这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200527105225274.png&#34; alt=&#34;image-20200527105225274&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;05-27 10:39:39 ERROR driver.util :: Database connection error
java.lang.IllegalArgumentException: Unrecognized Hadoop major version number: 3.1.1
	at org.apache.hadoop.hive.shims.ShimLoader.getMajorVersion(ShimLoader.java:174)
	at org.apache.hadoop.hive.shims.ShimLoader.loadShims(ShimLoader.java:139)
	at org.apache.hadoop.hive.shims.ShimLoader.getHadoopThriftAuthBridge(ShimLoader.java:125)
	at org.apache.hive.service.auth.KerberosSaslHelper.getKerberosTransport(KerberosSaslHelper.java:54)
	at org.apache.hive.jdbc.HiveConnection.createBinaryTransport(HiveConnection.java:445)
	at org.apache.hive.jdbc.HiveConnection.openTransport(HiveConnection.java:201)
	at org.apache.hive.jdbc.HiveConnection.&amp;lt;init&amp;gt;(HiveConnection.java:176)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sparksql jar 包依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 作为 hadoop 基础包，含 Kerberos 认证逻辑代码
org.apache.hadoop/hadoop-common &amp;quot;3.1.1&amp;quot;

# 1.x 系列最后一个版本
org.apache.hive/hive-jdbc &amp;quot;1.2.1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据报错信息找到了Hive的源代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200527110418542.png&#34; alt=&#34;image-20200527110418542&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/hive/blob/release-1.2.1/shims/common/src/main/java/org/apache/hadoop/hive/shims/ShimLoader.java#L159&#34;&gt;https://github.com/apache/hive/blob/release-1.2.1/shims/common/src/main/java/org/apache/hadoop/hive/shims/ShimLoader.java#L159&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以 org.apache.hive/hive-jdbc &amp;ldquo;1.2.1&amp;rdquo; 压根就不兼容 org.apache.hadoop/hadoop-common &amp;ldquo;3.x&amp;rdquo; 版本的。人写代码的时候没测到这个case。&lt;/p&gt;
&lt;p&gt;解决方式，引用hadoop-common 2.x最后一个版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;org.apache.hadoop/hadoop-common &amp;quot;2.10.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重新编译打包后效果OK。&lt;/p&gt;
&lt;h4 id=&#34;uberjar-的弊端&#34;&gt;uberjar 的弊端&lt;/h4&gt;
&lt;p&gt;Metabase为了方便包的分发，整个项目、驱动都是uberjar的打包思路。弊端其实也挺明显。JDBC 驱动与数据库的兼容性问题，一般是适配数据库，JDBC 驱动被 uberjar 后，想换驱动就得重新编译源码。&lt;/p&gt;
&lt;p&gt;比如 Hive Server 1.1.0，Hive JDBC 1.2.1 就连不上。开源产品的兼容性问题让人头秃。&lt;/p&gt;
&lt;p&gt;TODO：驱动不再uberjar，可以使用自己需要的依赖版本，比如我们使用 CDH 6.x 的 hadoop/hive jar包。&lt;/p&gt;
&lt;h4 id=&#34;题外话-sparksql-deps&#34;&gt;题外话 sparksql-deps&lt;/h4&gt;
&lt;p&gt;网上有个老版本的sparksql 驱动包 &lt;a href=&#34;https://s3.amazonaws.com/sparksql-deps/metabase-sparksql-deps-1.2.1.spark2-standalone.jar&#34;&gt;https://s3.amazonaws.com/sparksql-deps/metabase-sparksql-deps-1.2.1.spark2-standalone.jar&lt;/a&gt; 。之前解决这个问题，就是将其放到plugins目录。究其原因，其引用的hadoop-common版本是2.x的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200527111551416.png&#34; alt=&#34;image-20200527111551416&#34;&gt;&lt;/p&gt;
&lt;p&gt;而其源码包括历史记录（ &lt;a href=&#34;https://github.com/metabase/sparksql-deps&#34;&gt;https://github.com/metabase/sparksql-deps&lt;/a&gt; ）的hadoop-common版本是3.1.0。不要被误导了。&lt;/p&gt;
&lt;h3 id=&#34;todo-新增-impala-包&#34;&gt;TODO 新增 impala 包&lt;/h3&gt;
&lt;p&gt;需要系统了解下驱动是怎么写的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有整体思路，教程有点缺失 &lt;a href=&#34;https://github.com/metabase/metabase/wiki/Writing-a-Driver&#34;&gt;https://github.com/metabase/metabase/wiki/Writing-a-Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;引用本地jar包（Impala jar包是本地） &lt;a href=&#34;https://github.com/kumarshantanu/lein-localrepo&#34;&gt;https://github.com/kumarshantanu/lein-localrepo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;impala-jdbc-driver&#34;&gt;Impala JDBC Driver&lt;/h4&gt;
&lt;p&gt;我们可以使用JDBC 4.2版本的。其兼容性也挺高的。本地Impala 2.5.0，生产Impala 3.2.0都覆盖了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200524093032785.png&#34; alt=&#34;image-20200524093032785&#34;&gt;&lt;/p&gt;
&lt;p&gt;（Impala JDBC Driver压缩包内的文档）&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过摸索，改进 Metabase sparksql 包后，我们可以使用 Impala 了。至于有多少坑，还得等我深度使用后才知道。&lt;/p&gt;
&lt;p&gt;代码 &lt;a href=&#34;https://github.com/XUJiahua/metabase/tree/driver-impala-in-sparksql&#34;&gt;https://github.com/XUJiahua/metabase/tree/driver-impala-in-sparksql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为时间关系，留下一些 TODO ，未完待续。&lt;/p&gt;
&lt;h3 id=&#34;更新日志&#34;&gt;更新日志&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Metabase Impala Driver 0528更新日志 &lt;a href=&#34;https://xujiahua.github.io/posts/20200528-metabase-impala-type/&#34;&gt;https://xujiahua.github.io/posts/20200528-metabase-impala-type/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20200527-metabase-impala-driver/ - </description>
        </item>
    
    
    
        <item>
        <title>微信用户授权头像内容带随机干扰的问题</title>
        <link>https://xujiahua.github.io/posts/20200514-wx-avatar/</link>
        <pubDate>Thu, 14 May 2020 13:38:12 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200514-wx-avatar/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200514-wx-avatar/ -&lt;p&gt;项目需要基于头像、昵称对不同实体账号下的微信用户进行匹配。基于这个思路，打算先下载微信头像的图像，后计算其MD5，“单元测试”了下这个简单方法，结果惊人。&lt;/p&gt;
&lt;p&gt;同一个人的同一个头像链接返回的图像内容都不一样。内容不一样，MD5值也就不一样。&lt;/p&gt;
&lt;p&gt;看来微信对我们这些拙劣的手段早有防备。&lt;/p&gt;
&lt;h2 id=&#34;微信头像内容分析&#34;&gt;微信头像内容分析&lt;/h2&gt;
&lt;p&gt;同一个头像链接下载两次。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wget -O 1.png https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoc614h6RfCUnwQTblG9y2dq4g5PKVicVZd5CQO9JNdPCWCovl8cmsvxQcWDemcLYGW6pSt97uUW5A/132
$ wget -O 2.png https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoc614h6RfCUnwQTblG9y2dq4g5PKVicVZd5CQO9JNdPCWCovl8cmsvxQcWDemcLYGW6pSt97uUW5A/132

$ md5 1.png
MD5 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1.png&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dd6aa938cbec381a3e83702776be88a3
$ md5 2.png
MD5 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2.png&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 83668a6ad7eeee8fa8e5e0db339233d1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;肉眼比较&#34;&gt;肉眼比较&lt;/h3&gt;
&lt;p&gt;肉眼完全无法区分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200514134445598.png&#34; alt=&#34;image-20200514134445598&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;字节级比较&#34;&gt;字节级比较&lt;/h3&gt;
&lt;p&gt;两张图，可以看出差异很大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200514134712953.png&#34; alt=&#34;image-20200514134712953&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;像素级比较&#34;&gt;像素级比较&lt;/h3&gt;
&lt;p&gt;为了方便对比，图先灰度化（一个像素点的RGB三值改为1个值）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200514184021629.png&#34; alt=&#34;image-20200514184021629&#34;&gt;&lt;/p&gt;
&lt;p&gt;两张灰度图差值的数据分布。x轴为差值，y轴为出现次数。&lt;/p&gt;
&lt;p&gt;0代表相同位置的像素点相同，非0代表相同位置像素点有差异及其差异幅度。&lt;/p&gt;
&lt;p&gt;0出现次数最多，可见两张图的大部分像素点的值是相同的。差异主要分为两部分，1-10 闭区间。（试了几张图）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200515094333720.png&#34; alt=&#34;image-20200515094333720&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一种可视化，白色代表两图相同位置像素点不同。可见，图片污染非常严重。&lt;/p&gt;
&lt;p&gt;上图生成脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PIL &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Image

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_to_2d_array&lt;/span&gt;(filename):
    img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(filename)
    img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convert(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(img)

data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_to_2d_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.png&amp;#34;&lt;/span&gt;)
data2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_to_2d_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.png&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# NOTE: np.uint8(3) - np.uint8(4) = 255 引起的误差让我绝望了&lt;/span&gt;
diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uint8(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;abs(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int16(data1) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int16(data2)))

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique(diff, return_counts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{e}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; x]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(y)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bar(x, y)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count of non-zero point&amp;#34;&lt;/span&gt;, (diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum())

diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromarray(diff, mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;diff12.png&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNG&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;目标消除白点&#34;&gt;目标：消除白点&lt;/h2&gt;
&lt;p&gt;要达到多份干扰图生成相同的哈希值的效果，就是要消除白点，也就是降采样图像，主要两个方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;降低灰度级别。比如 8bit（256级灰度）图像压缩到6bit（64级灰度）图像，原像素点0、1、2、3归为一个像素点0，以此类推。&lt;/li&gt;
&lt;li&gt;降低图像尺寸。比如尺寸同比缩小一倍。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在有限数据量下测试，32级灰度，10x10 尺寸下，白点消失了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PIL &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Image

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_to_2d_array&lt;/span&gt;(filename, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, bit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
    img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(filename)
    img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convert(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resize(size)
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(img)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bit)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bit))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data

size_options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; size_options:
        data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_to_2d_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.png&amp;#34;&lt;/span&gt;, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;size, bit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bit)
        data2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_to_2d_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.png&amp;#34;&lt;/span&gt;, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;size, bit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bit)
        diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uint8(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;abs(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int16(data1) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int16(data2)))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(diff&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromarray(data1)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{bit}_{size}_1.png&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNG&amp;#34;&lt;/span&gt;)
            Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromarray(data2)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{bit}_{size}_2.png&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PNG&amp;#34;&lt;/span&gt;)
        ratio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (diff &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum() &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (diff&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;diff&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bit: {0}, size: {1}, 脏点率：{2}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(bit, size, ratio))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相似图片搜索的原理 &lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html&#34;&gt;http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;微信为了保护用户隐私，防止通过头像昵称进行用户匹配，对每次通过头像链接获取的头像内容加入了随机的扰动，像素点扰动幅度范围在 [-10, 10]，大概15%的像素点（两份干扰图的差异）受干扰，图像的差异肉眼难以察觉。&lt;/p&gt;
&lt;p&gt;最终图像哈希用于 SQL JOIN，需要将有些许差异的图像映射成一个值。不考虑相似度算法。&lt;/p&gt;
&lt;p&gt;通过在图像色彩、尺寸上降维，初步解决了这个问题。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200514-wx-avatar/ - </description>
        </item>
    
    
    
        <item>
        <title>NUC8i5BEH Hackintosh</title>
        <link>https://xujiahua.github.io/posts/20200504-hackintosh/</link>
        <pubDate>Mon, 04 May 2020 13:11:09 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200504-hackintosh/</guid>
        <description>许嘉华的博客 https://xujiahua.github.io/posts/20200504-hackintosh/ -&lt;p&gt;买了个 NUC8i5BEH 当玩具，不怎么折腾的方式体验下黑苹果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200504145011481.png&#34; alt=&#34;image-20200504145011481&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200504132303349.png&#34; alt=&#34;image-20200504132303349&#34;&gt;&lt;/p&gt;
&lt;p&gt;与我的 2018 MBP 13.3 做对比。处理器、显卡是一样的。用很少的钱提升内存，16GB 2133 DDR3 -&amp;gt; 32GB 2400 DDR4。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200504132417310.png&#34; alt=&#34;image-20200504132417310&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;成本&#34;&gt;成本&lt;/h3&gt;
&lt;p&gt;大概 ￥4000。2018年买的MacBook近￥15000。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NUC8i5BEH ￥2379&lt;/li&gt;
&lt;li&gt;DDR4 2400 16 GB X 2 笔记本内存条 ￥978&lt;/li&gt;
&lt;li&gt;500GB M.2 SSD 大约￥600（不在这次消费计划里，从现有机器抠出来的）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;不足&#34;&gt;不足&lt;/h3&gt;
&lt;p&gt;WiFi、蓝牙，以及之上的AirDrop等功能缺失。&lt;/p&gt;
&lt;p&gt;网上有解决方案，主要是网卡使用Macbook的配件替代。感觉配件也不便宜，应该是炒热了。用网线，不折腾了。&lt;/p&gt;
&lt;h2 id=&#34;why-nuc8i5beh&#34;&gt;WHY NUC8i5BEH&lt;/h2&gt;
&lt;p&gt;豆子峡谷 NUC8i5BEH 机箱真的小！性能也不差。可以说，是最具性价比的了。&lt;/p&gt;
&lt;p&gt;能做这么小，机箱与电源分离的设计功不可没。- -!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/v2-80ec6cb9eb82fa2c5e0e16cbda516f41_720w.jpg&#34; alt=&#34;v2-80ec6cb9eb82fa2c5e0e16cbda516f41_720w&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;nuc8i5beh-vs-nuc8i5bek&#34;&gt;NUC8i5BEH vs NUC8i5BEK&lt;/h3&gt;
&lt;p&gt;BEH 胖版，BEK 瘦版。瘦版差一个 2.5 寸盘位。硬盘只有一个M.2插槽。网卡魔改的方案使用M.2插槽，这样BEK就不能放硬盘了。BEH 虽然胖一点，还是很mini。&lt;/p&gt;
&lt;h3 id=&#34;nuc8i5beh-vs-nuc8i7beh&#34;&gt;NUC8i5BEH vs NUC8i7BEH&lt;/h3&gt;
&lt;p&gt;区别在CPU。差大约￥700。&lt;/p&gt;
&lt;h3 id=&#34;nuc8i5beh-vs-nuc8i7hvk&#34;&gt;NUC8i5BEH vs NUC8i7HVK&lt;/h3&gt;
&lt;p&gt;冥王峡谷 NUC8i7HVK 拥有 AMD 显卡。不玩电脑游戏，AMD卡又不方便做深度学习，另外小机身大功耗散热问题一定存在，就不考虑了。价格￥6000 起。那就非常没有必要了。&lt;/p&gt;
&lt;h2 id=&#34;安装教程&#34;&gt;安装教程&lt;/h2&gt;
&lt;h3 id=&#34;硬件安装&#34;&gt;硬件安装&lt;/h3&gt;
&lt;p&gt;插内存条和硬盘，看说明书就行。&lt;/p&gt;
&lt;h3 id=&#34;macos-安装&#34;&gt;MacOS 安装&lt;/h3&gt;
&lt;p&gt;MacOS是认硬件的，所以直接按照Apple官方制作MacOS启动盘的方式肯定不行。目前主要是用 Clover/OpenCore 等 BootLoader 骗过系统。安装过程中有两个阶段：U盘启动，硬盘启动，为了能够顺利进入系统，都要对它们的EFI分区进行修改。&lt;/p&gt;
&lt;p&gt;根据这个图文教程（NUC8i5BEH 黑果安装教程 &lt;a href=&#34;https://www.jianshu.com/p/ebd6054d4799&#34;&gt;https://www.jianshu.com/p/ebd6054d4799&lt;/a&gt; ），完成了 Mojave 的安装。图文教程对新人来说比较友好，对细节也有详细描述。（因为使用高手们封装好的镜像，U盘 EFI 分区在这个教程里就忽略了。）&lt;/p&gt;
&lt;p&gt;这个教程大差不差，但也是费了很长时间。&lt;/p&gt;
&lt;h4 id=&#34;意外情况&#34;&gt;意外情况&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;主要问题，引导很慢，一直是白苹果进度条的画面。睡了一觉起来还是这个状态，真的很气啊。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重启重试多几次。慢慢发现，要是2~3分钟进度条没走完，大概率是卡住了。多重启几次，总会有转机的。不明白到底发生了什么，所以这步操作运气成分很大。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;引导过程中遇到白苹果变成了禁止标志。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重启重试即可。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Mojave的镜像文件，内置的证书过期了。报错信息应用程序副本已损坏。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://blog.csdn.net/qq_41855420/article/details/102762647&#34;&gt;https://blog.csdn.net/qq_41855420/article/details/102762647&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;另外注意，MacOS 选择文件系统 APFS（教程中用的默认选项），适合SSD。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;bios-配置&#34;&gt;BIOS 配置&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;仅作记录&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boot -&amp;gt; Boot Configuration, disable &amp;ldquo;&lt;strong&gt;Network Boot&lt;/strong&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Power -&amp;gt; Secondary Power Settings, &amp;ldquo;&lt;strong&gt;Wake on LAN from S4/S5&lt;/strong&gt;&amp;rdquo;, set to &amp;ldquo;&lt;strong&gt;Stay Off&lt;/strong&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Boot -&amp;gt; Secure Boot, disable &amp;ldquo;&lt;strong&gt;Secure Boot&lt;/strong&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Devices -&amp;gt; OnBoard Devices, disable &amp;ldquo;&lt;strong&gt;Bluetooth&lt;/strong&gt;&amp;rdquo; (macOS is not compatible well with Intel Wi-Fi/Bluetooth)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suggested:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boot -&amp;gt; Boot Priority -&amp;gt; Legacy Boot Priority, enable &amp;ldquo;&lt;strong&gt;Legacy Boot&lt;/strong&gt;&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://github.com/sarkrui/NUC8i7BEH-Hackintosh-Build&#34;&gt;https://github.com/sarkrui/NUC8i7BEH-Hackintosh-Build&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;apple-id--icloud--app-store&#34;&gt;Apple ID / iCloud / App Store&lt;/h4&gt;
&lt;p&gt;不考虑 iMessage / FaceTime，没使用场景。&lt;/p&gt;
&lt;p&gt;按照网上说法，只要生成随机三码（工具按照规则生成），使用 iCloud / App Store 没什么问题。&lt;/p&gt;
&lt;p&gt;怎么生成随机三码，参考：NUC8（豆子峡谷）在线安装macOS，这才是OpenCore正确的打开方式 &lt;a href=&#34;https://www.jianshu.com/p/78510cfa4a64&#34;&gt;https://www.jianshu.com/p/78510cfa4a64&lt;/a&gt; （最后一节）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200513100122246.png&#34; alt=&#34;image-20200513100122246&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于什么是三码、AppleID的安全性，参考：NUC8（豆子峡谷）黑苹果新手指南Q&amp;amp;A &lt;a href=&#34;https://www.jianshu.com/p/b298da6afef3&#34;&gt;https://www.jianshu.com/p/b298da6afef3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200513100850310.png&#34; alt=&#34;image-20200513100850310&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;其他教程&#34;&gt;其他教程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;[GUIDE] Building a Mac mini beast with NUC8i7BEH &lt;a href=&#34;https://github.com/sarkrui/NUC8i7BEH-Hackintosh-Build&#34;&gt;https://github.com/sarkrui/NUC8i7BEH-Hackintosh-Build&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;包含如何处理WiFi、蓝牙模块。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;NUC8I5BEH Hackintosh &lt;a href=&#34;https://github.com/csrutil/NUC8I5BEH&#34;&gt;https://github.com/csrutil/NUC8I5BEH&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置文件可以直接使用。不算是教程。描述得比较简略。不懂的还是不懂。&lt;/p&gt;
&lt;h2 id=&#34;使用后续&#34;&gt;使用后续&lt;/h2&gt;
&lt;h3 id=&#34;2020-05-29&#34;&gt;2020-05-29&lt;/h3&gt;
&lt;p&gt;NUC 差不多用了一个月，体验很不错，超预期。我是放在办公室使用的，下班锁屏，上班解锁，电脑工作状态一点没改变，上班来就进入状态了。因为价格便宜，猛跑程序，电脑呼呼响，情绪也很稳定。&lt;/p&gt;
&lt;p&gt;一开始还担心不稳定，还带着 Macbook 备用，发现是多余的担心。&lt;/p&gt;
&lt;p&gt;一个小问题：连三星显示器偶尔出现雪花屏，试验下来，是 HDMI 接口容易雪花。TYPEC 接口没这个问题。&lt;/p&gt;
&lt;p&gt;workaround：关闭显示器电源，拔掉HDMI线，重新打开显示器电源，插入HDMI线。NUC HDMI 接口是过热了么？&lt;/p&gt;
- https://xujiahua.github.io/posts/20200504-hackintosh/ - </description>
        </item>
    
    
  </channel>
</rss> 
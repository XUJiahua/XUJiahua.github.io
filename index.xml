<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>许嘉华的笔记</title>
    <link>https://xujiahua.github.io/</link>
    <description>Recent content on 许嘉华的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 07 Aug 2020 10:34:23 +0800</lastBuildDate>
    
        <atom:link href="https://xujiahua.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>【阅读】How Ray Uses gRPC (and Arrow) to Outperform gRPC</title>
        <link>https://xujiahua.github.io/posts/20200807-ray-grpc-arrow/</link>
        <pubDate>Fri, 07 Aug 2020 10:34:23 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200807-ray-grpc-arrow/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200807-ray-grpc-arrow/ -&lt;p&gt;原文：&lt;a href=&#34;https://medium.com/distributed-computing-with-ray/how-ray-uses-grpc-and-arrow-to-outperform-grpc-43ec368cb385&#34;&gt;How Ray Uses gRPC (and Arrow) to Outperform gRPC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对理解 Ray 的底层逻辑有帮助。文中描述的Ray版本为0.8。&lt;/p&gt;
&lt;h2 id=&#34;overview-of-ray&#34;&gt;Overview of Ray&lt;/h2&gt;
&lt;p&gt;Ray 的计算任务分为两类，无状态计算任务 Task，有状态计算任务 Actor。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ray.readthedocs.io/en/latest/walkthrough.html#remote-functions-tasks&#34;&gt;&lt;strong&gt;Tasks&lt;/strong&gt;&lt;/a&gt; (remote functions): these let you run a function remotely in a cluster. Tasks are for &lt;em&gt;stateless&lt;/em&gt; computation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ray.readthedocs.io/en/latest/walkthrough.html#remote-classes-actors&#34;&gt;&lt;strong&gt;Actors&lt;/strong&gt;&lt;/a&gt; (remote classes): these are instances of Python classes running remotely in worker processes in a cluster. Actors are for &lt;em&gt;stateful&lt;/em&gt; computation, where evolving state needs to be managed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文讲的是Ray核心逻辑，如何使用gRPC和Arrow的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*HMxWNgryNrCZXM8d.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-ray-calls-translate-into-grpc-operations&#34;&gt;How Ray calls translate into gRPC operations&lt;/h2&gt;
&lt;p&gt;从几个例子可以了解到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ray 如何调度 task（python function）/actor（python class）。&lt;/li&gt;
&lt;li&gt;Ray 如何对调度工作进行优化的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;basic-ray-task-call&#34;&gt;Basic Ray Task Call&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ray.remote&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;double&lt;/span&gt;(x):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
fut1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; double&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remote(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; ray&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(fut1) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;工作进程调用 double.remote，触发如下两次 gRPC请求：&lt;/p&gt;
&lt;p&gt;第一次 gRPC 请求：GetWorkerLease RPC&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Raylet：Ray 调度后台进程，每个节点一个。&lt;/li&gt;
&lt;li&gt;向 Raylet 申请需要运行 double 的资源，ask for a lease on a worker to execute double(2)。&lt;/li&gt;
&lt;li&gt;Raylet 的调度器检查 task（也就是double方法）需要的资源（@ray.remote里可以指定需要的资源）或是依赖，根据上述信息，找到一个合适的worker。&lt;/li&gt;
&lt;li&gt;这次 gPRC 请求申请资源成功，相当于在 worker 上加了一把排他锁。其他任务无法使用worker。While it holds the lease, no other worker process can schedule tasks on the leased worker.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二次 gRPC 请求：ExecuteTask RPC&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向申请到的worker发送任务，并获取结果。&lt;/li&gt;
&lt;li&gt;因为参数和返回结果足够小，都是包含在gPRC请求里。&lt;/li&gt;
&lt;li&gt;传输大数据，后面会讲。&lt;/li&gt;
&lt;li&gt;上述gRPC请求中间出现意外，都会进行重试，直到重试上限。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*xvg9YttgxX17HbVT.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上图是在单机上运行的Ray逻辑结构。Ray 使用 gPRC 作为统一的通信层。&lt;/li&gt;
&lt;li&gt;绿框中的是Python代码。&lt;/li&gt;
&lt;li&gt;白框中的是C++代码，Ray common runtime。&lt;/li&gt;
&lt;li&gt;Python Driver进程包括Python Driver + Ray Core Worker，Python Worker进程包括Python Worker + Ray Core Worker。可以理解Python是胶水层。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;caching-scheduling-decisions&#34;&gt;Caching Scheduling Decisions&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;futures &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [double&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remote(i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)]
ray&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(futures) &lt;span style=&#34;color:#75715e&#34;&gt;# [0, 2, 4, 6, …]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码触发了1000次double.remote，因为是同一块代码，它们使用相同的worker配置，这就是优化点所在。&lt;/p&gt;
&lt;p&gt;上文得知，执行任务两步走，一是申请资源，二是实际执行任务。因为task要求的资源配置相同，可以缓存并复用资源，&lt;em&gt;caches&lt;/em&gt; scheduling decisions，大量减少 GetWorkerLease RPC的请求次数。有限次（任务的并行数）的 GetWorkerLease RPC 均摊到大量的Task上，损耗可忽略不计，可以理解为执行多少个Task，只需要执行同等数量的 ExecuteTask RPC。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*HdroniGtqcZVVWv8.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;scaling-to-multiple-nodes&#34;&gt;Scaling to Multiple Nodes&lt;/h3&gt;
&lt;p&gt;double.remote(2)的例子扩展到多节点的场景，假设本地机器没有空闲的worker了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;driver程序向raylet1，也就是本地raylet申请资源，GetWorkerLease RPC&lt;/li&gt;
&lt;li&gt;raylet1知道本节点没有资源了，但是知道raylet2（其他节点的raylet）有worker资源，将请求转发到raylet2&lt;/li&gt;
&lt;li&gt;资源就这样申请成功。暂时还没解释raylet1怎么知道raylet2有资源的。&lt;/li&gt;
&lt;li&gt;driver程序向node2上的worker发起 ExecuteTask RPC，执行任务。&lt;/li&gt;
&lt;li&gt;多节点上&lt;em&gt;caches&lt;/em&gt; scheduling decisions的策略同样有效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*VTYUxv2HQpudSvSd.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;creating-and-using-actors&#34;&gt;Creating and Using Actors&lt;/h3&gt;
&lt;p&gt;Actor 是有状态的 Task。调度逻辑大体相同。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ray.remote&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Counter&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remote()
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; ray&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;increment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remote()) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;调用 Counter.remote()，触发资源申请，GetWorkerLease RPC，申请Worker&lt;/li&gt;
&lt;li&gt;对于Actor，构造函数&lt;code&gt;__init__&lt;/code&gt;作为Task发送到 Worker 去。触发任务执行，ExecuteTask RPC。&lt;/li&gt;
&lt;li&gt;Actor是有状态的，Actor 实例与 申请的Worker 会绑定，直到Actor实例消亡。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*pAecaetsZKkxW80Q.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因为有了绑定关系，Actor实例方法的执行，直接与Worker直接通信。ExecuteTask RPC。&lt;/li&gt;
&lt;li&gt;不需要再次任务调度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*v9I-UWS61qK2UrkZ.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sending-and-sharing-large-objects-with-arrow&#34;&gt;Sending and Sharing Large Objects with Arrow&lt;/h2&gt;
&lt;p&gt;大对象（一般指的是超过100KB）通过gRPC传输不够高效。Ray 使用  shared memory object store provided by Apache Arrow 来存储大对象。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相同节点上，两个Task之间大对象的传输，实际使用的是共享内存。减少了使用gRPC带来的大对象copy。&lt;/li&gt;
&lt;li&gt;针对不同节点上的两个Task之间的大对象传输，就会涉及到两块共享内存的数据传输了，这块还是用的gRPC。&lt;/li&gt;
&lt;li&gt;driver程序执行double.remote(array)，因为array太大，首先会存储到共享内存，然后触发ExecuteTask RPC。&lt;/li&gt;
&lt;li&gt;worker上，array需要从本机的共享内存取，而共享内存按需从其他节点共享内存取。&lt;/li&gt;
&lt;li&gt;worker 的工作结果，因为也比较大，存储到共享内存。&lt;/li&gt;
&lt;li&gt;driver通过ray.get获取结果，结果才从node2的共享内存同步到node1的共享内存。懒加载。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*dw1oBwtWnESKmQUR.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ray-08-performance&#34;&gt;Ray 0.8 Performance&lt;/h2&gt;
&lt;p&gt;通过上述优化，0.8版本比老版本在请求延迟和对象传输吞吐量方面有了提高。但不是文中吸引我的地方。&lt;/p&gt;
&lt;p&gt;请求延迟，C++ gRPC 比 Python gRPC有更低的响应时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*XVY-HbhmlIkt34_N.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;对象传输吞吐量，因为采用了多条 C++ gRPC 轮询线程，对象传输快了很多。使用Python gRPC就差很多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/0*5RPiO3Cimua5iIX1.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;总结起来，用C++榨干机器性能，Python有太多overhead。Ray 公司也计划着C++/Rust的语言接口。也是为了性能考虑吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At &lt;a href=&#34;http://anyscale.io/&#34;&gt;Anyscale&lt;/a&gt;, we’re working on a number of enhancements for Ray 1.0, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for tasks/actors written in C++ and Rust (in addition to Python and Java today).&lt;/li&gt;
&lt;li&gt;Distributed reference counting for shared memory objects.&lt;/li&gt;
&lt;li&gt;Accelerated point-to-point GPU transfers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
- https://xujiahua.github.io/posts/20200807-ray-grpc-arrow/ - </description>
        </item>
    
    
    
        <item>
        <title>【阅读】Machine Learning Serving Broken</title>
        <link>https://xujiahua.github.io/posts/20200806-machine-learning-serving-broken/</link>
        <pubDate>Thu, 06 Aug 2020 09:49:47 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200806-machine-learning-serving-broken/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200806-machine-learning-serving-broken/ -&lt;p&gt;原文 &lt;a href=&#34;https://medium.com/distributed-computing-with-ray/machine-learning-serving-is-broken-f59aff2d607f&#34;&gt;Machine Learning Serving is Broken&lt;/a&gt; 是 &lt;a href=&#34;https://medium.com/distributed-computing-with-ray?source=post_page-----f59aff2d607f----------------------&#34;&gt;Distributed Computing with Ray&lt;/a&gt; 专栏文章，聊了机器学习模型的 Serving 问题，记录一二。&lt;/p&gt;
&lt;p&gt;设立好机器学习目标后，从模型角度，机器学习整体可分这么2个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模型的创建。模型训练 Training。包括训练数据准备，选择最好的模型（超参数调优）。&lt;/li&gt;
&lt;li&gt;模型的使用。模型推理 Inference。也包括输入数据的准备。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;模型被使用，才是机器学习落地的开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1*P_eJtjAZjntemqvLreZ8EA.jpeg&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;wrap-your-model-in-flask&#34;&gt;Wrap Your Model in Flask&lt;/h3&gt;
&lt;p&gt;机器学习模型一般使用 Python 开发，所以使用 Flask 是很自然就能想到的方案。&lt;/p&gt;
&lt;p&gt;从 coding 角度，与传统的Web应用开发区别不大。把模型、数据库当做黑盒，开发只关心输入输出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1*boWvKC0jg5hrVv53icMwIg.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;表面上是美好的。但是，机器学习 Serving 需要大内存加载模型，并且执行计算密集型任务。响应时间秒级，QPS 100+是常见的。下图比较的是单机与传统Web Serving的不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1*TOFL3owzto7bD0o5K1AopQ.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;解决方法也是有的，因为Model Serving本身是无状态的，很容易进行水平扩展。&lt;/p&gt;
&lt;p&gt;使用 Flask 进行 Serving，给了模型的开发者很大的便利，同样的 Python 技术栈，Flask 学习成本又低，从模型开发到模型API化可以一人搞定。不同的机器学习模型的格式差异（ScikitLearn与TensorFlow的模型格式就迥异）统一使用HTTP协议抹平。性能问题也能通过水平扩展来解决。目前为止，Flask 方案表现良好。&lt;/p&gt;
&lt;p&gt;原文指出如果 Model 扩展到了数百个，那就是数百个 * N的微服务，没有专职运维团队，开发团队是处理不过来的。个人认为这个问题应该是业务发展的技术阵痛，而不是Flask的问题呀。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the model serving scenario, each microservice only corresponds to one single model. A typical development team can manage tens of microservices but not hundreds of them without a large dedicated ops team.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;the-rise-of-specialized-systems&#34;&gt;The Rise of Specialized Systems&lt;/h3&gt;
&lt;p&gt;模型Serving专用系统的崛起。比如 TensorFlow Serving，不过只能用于 TensorFlow 模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1*MhAjfO4Wh5T8z-ex_oacOQ.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;将计算转移到专用系统后，Flask coding 的逻辑就跟 Web 开发真没两样了，瓶颈问题都转移到专用系统了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1*VuHnQMYC-DCaGC4nG2g8CQ.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;比起 Flask 包装模型的做法，Flask 应用对接 Model Serving 专用系统，需要适配专用系统的输入输出。比如对接TensorFlow Serving，其输入是一个多维数组，需要把原始请求做转换，第一次就做对是挺难的。没法复用模型训练用的数据预处理逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1*0kaOHR4XK5qkJIBrvqA1gA.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;模型开发者现在需要维护两个server：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;model server：部署模型的专用系统。&lt;/li&gt;
&lt;li&gt;web server：输入数据准备，调用model server（不同接口做不同的适配）。（其中输入数据准备，要到什么程度呢，是调用方把数据都准备好，还是模型开发者去调用一些特征数据服务。这些模糊地带，每个公司可能都不一样。）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;架构中多引入一层 Model Server，模型开发者的工作内容也发生了变化。原文指出这会给模型开发者带来 cognitive load（认知压力），引入了新的工作流程，还不顺手的那种。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Additionally, by adopting model servers, data scientists now have two problems: managing the model servers, and managing a web server that handles all the business logic. Even though the model servers might be managed by an infrastructure team, the data scientists still need to think about the featurization in the web server and the model logic in the model servers. This is a lot of cognitive load for the data scientists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也总结了一些Model Server的不足。TensorFlow Serving 只是 TensorFlow 模型的专用系统，不够通用。转化成统一的模型格式比如ONNX，可能会带来未知bug。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Framework lock-in: &lt;a href=&#34;https://www.tensorflow.org/tfx/guide/serving&#34;&gt;Tensorflow Serving&lt;/a&gt; and &lt;a href=&#34;https://pytorch.org/serve/&#34;&gt;TorchServe&lt;/a&gt; are specialized systems for each framework. Modern data science teams use the best tool at hand; this can mean a mix of &lt;a href=&#34;https://xgboost.readthedocs.io/en/latest/&#34;&gt;XGBoost&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt;, and deep learning frameworks. &lt;strong&gt;We need a system that can serve arbitrary python models.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Vendor lock-in: AWS SageMaker and the other cloud providers offer hosted ML serving solutions that wrap your models and deploy them for you. In addition, these hosted solutions don’t have a unified API. &lt;strong&gt;We need vendor neutral solutions that avoid cloud vendor lock-in&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Training &amp;amp; serving divergence: There are other solutions that take a trained model and convert it to another format for serving, like ONNX, PMML, and NVIDIA TensorRT. But &lt;strong&gt;we want to&lt;/strong&gt; &lt;strong&gt;serve their models in the same framework that was used for training to avoid unknown bugs.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ray-serve&#34;&gt;Ray Serve&lt;/h3&gt;
&lt;p&gt;总结前文中方案的不足。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wrap Your Model in Flask 模型太多不好维护（指的是开发团队自己维护）。希望部署、运维能简单。&lt;/li&gt;
&lt;li&gt;Specialized Systems 引入了新系统，不单单是原来那套顺手的Python脚本了，给模型开发者带来了额外的工作量。希望沿用老的技术栈。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两个希望就是 &lt;a href=&#34;https://docs.ray.io/en/master/serve/&#34;&gt;Ray Serve&lt;/a&gt; 的目标，遵从模型开发者的习惯，给模型开发者顺手的工具，衔接好训练和上线两个阶段，提高生产效率。&lt;/p&gt;
&lt;p&gt;原文中的案例，iterating quickly without an ops team 说出了其精髓。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A computer vision startup is using Ray Serve to serve deep learning based computer vision models. The teams of data scientists are iterating quickly without an ops team. Ray Serve helps them to quickly deploy and scale their predictions.&lt;/li&gt;
&lt;li&gt;The data science team at an E-commerce site is using Ray Serve to gain full control of the models from development to deployment. Ray Serve helps them gain visibility into the serving process as well as reducing costs by batching on GPUs. Additionally, machine learning models are typically not deployed individuality. Ray Serve enables them to easily &lt;a href=&#34;https://docs.ray.io/en/master/serve/advanced.html#composing-multiple-models&#34;&gt;compose models&lt;/a&gt; together.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/distributed-computing-with-ray/the-simplest-way-to-serve-your-nlp-model-in-production-with-pure-python-d42b6a97ad55&#34;&gt;The Simplest Way to Serve your NLP Model in Production with Pure Python&lt;/a&gt; 提到的 general-purpose ML serving infrastructure 的关键特质。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’ve concluded that there are several key properties for general-purpose ML serving infrastructure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Framework Agnostic&lt;/strong&gt; — Model serving frameworks must be able to serve &lt;a href=&#34;https://www.tensorflow.org/&#34;&gt;TensorFlow&lt;/a&gt;, &lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt;, or even arbitrary Python functions. Why? People use many different machine learning frameworks, and machine learning models are typically surrounded by lots of application logic. Limiting serving to a simple forward pass through a TensorFlow model is too restrictive. 支持各种框架，对框架没要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pure Python&lt;/strong&gt; — Model serving should be intuitive for developers and dead simple to run. That means pure Python and no verbose configurations or yaml files. Developers use Python to develop their machine learning models, so they should also be able to use Python to deploy their machine learning applications. This is growing more critical as online learning applications combine training and serving in the same applications. 纯 Python 一把梭。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple &amp;amp; Scalable&lt;/strong&gt; — Model serving must be simple to scale out of the box across many machines along with simple ways of upgrading models over time. Achieving production uptime and performance requirements are essential for success. 非常容易可伸缩。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
- https://xujiahua.github.io/posts/20200806-machine-learning-serving-broken/ - </description>
        </item>
    
    
    
        <item>
        <title>关于业务系统数据化的思考</title>
        <link>https://xujiahua.github.io/posts/20200724-bizapp-data/</link>
        <pubDate>Fri, 24 Jul 2020 16:36:01 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200724-bizapp-data/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200724-bizapp-data/ -&lt;p&gt;一个发券系统为例，该怎么发券。用 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%AD%E4%BD%95%E6%B3%95&#34;&gt;5W1H&lt;/a&gt; 分析法尝试提问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why 理由：为什么发券，为了获益。比如激活沉睡用户来消费，比如无脑群发拉一波流量，用户来了就是赚了。为什么用这个系统发券，因为这个系统能问答如下的问题。&lt;/li&gt;
&lt;li&gt;What 物品：优惠券，应该发放什么类型的优惠券。&lt;/li&gt;
&lt;li&gt;When 时间：应该在什么时间点发放优惠券。&lt;/li&gt;
&lt;li&gt;Where 地点：应该往哪个渠道发放优惠券。&lt;/li&gt;
&lt;li&gt;Who 人物：应该向什么样的人群发放优惠券。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些问题，需要软件用数据（统计数据）来回答，而不是靠参差不齐的运营人员主观臆断。&lt;/p&gt;
&lt;p&gt;数据模型该怎么设计，先分析出这些问题中的实体是什么。&lt;/p&gt;
&lt;h2 id=&#34;实体与实体画像&#34;&gt;实体与实体画像&lt;/h2&gt;
&lt;p&gt;以实体为中心，及与其他实体的交互，构建实体的画像。实体之间互相接触，实体A产生关于实体B的画像（标签），比如用户画像有时间相关的标签。&lt;/p&gt;
&lt;h3 id=&#34;优惠券物品&#34;&gt;优惠券、物品&lt;/h3&gt;
&lt;p&gt;构建物品画像。&lt;/p&gt;
&lt;p&gt;一张优惠券的画像，相当于评定优惠券发放效果好坏的结论报告。&lt;/p&gt;
&lt;h3 id=&#34;时间点&#34;&gt;时间点&lt;/h3&gt;
&lt;p&gt;构建时间画像。&lt;/p&gt;
&lt;h3 id=&#34;渠道&#34;&gt;渠道&lt;/h3&gt;
&lt;p&gt;构建渠道画像。相当于评定发放渠道的效果好坏的结论报告。&lt;/p&gt;
&lt;h4 id=&#34;用户属性&#34;&gt;用户属性&lt;/h4&gt;
&lt;p&gt;性别比例、城市分布。&lt;/p&gt;
&lt;h3 id=&#34;用户&#34;&gt;用户&lt;/h3&gt;
&lt;p&gt;构建用户画像。&lt;/p&gt;
&lt;h4 id=&#34;基础属性&#34;&gt;基础属性&lt;/h4&gt;
&lt;p&gt;比如微信授权给到的信息，性别、城市等。&lt;/p&gt;
&lt;h4 id=&#34;物品属性&#34;&gt;物品属性&lt;/h4&gt;
&lt;p&gt;比如优惠券领取率，优惠券的核销率、优惠券类型偏好。&lt;/p&gt;
&lt;h4 id=&#34;渠道属性&#34;&gt;渠道属性&lt;/h4&gt;
&lt;p&gt;渠道偏好。&lt;/p&gt;
&lt;h4 id=&#34;时间属性&#34;&gt;时间属性&lt;/h4&gt;
&lt;p&gt;各领取时间段统计、领取时间段偏好、核销时间段偏好。&lt;/p&gt;
&lt;h2 id=&#34;开发画像&#34;&gt;开发画像&lt;/h2&gt;
&lt;p&gt;T + 1 统计即可，统计数据对差一天的数据并不敏感。&lt;/p&gt;
&lt;p&gt;按照用户画像的常用套路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义标签元数据。&lt;/li&gt;
&lt;li&gt;竖表的方式开发新标签，新标签的开发通过增加开发者水平扩展。&lt;/li&gt;
&lt;li&gt;根据标签元数据，将竖表转为横表。&lt;/li&gt;
&lt;li&gt;加快多维度查询速度，可以使用ElasticSearch加速。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用画像&#34;&gt;使用画像&lt;/h2&gt;
&lt;p&gt;基于标签元数据和每日生成的画像数据，可以，&lt;/p&gt;
&lt;h3 id=&#34;精准投放&#34;&gt;精准投放&lt;/h3&gt;
&lt;p&gt;使用用户画像圈定人群。人群画像有时间偏好，选择发放时间，有渠道偏好，选择发放渠道，有优惠券偏好，选择优惠券类型。&lt;/p&gt;
&lt;p&gt;或者换个方式，先选发放时间，根据时间画像，得知性别分布等，再筛选人群。&lt;/p&gt;
&lt;h3 id=&#34;bi-可视化&#34;&gt;BI 可视化&lt;/h3&gt;
&lt;p&gt;各实体的可视化，各维度可筛选条件。&lt;/p&gt;
&lt;p&gt;实体画像是用户画像的抽象，前端开发基于这种抽象开发，可适配不断新增的实体，减少重复劳动，免开发。&lt;/p&gt;
&lt;p&gt;这就像一份知识库，作为运营人员的学习材料。比如时间的 BI 可视化，运营人员可学习到 xxx 时间段，是领取率最高的。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;一个发券系统，如何有别于其他产品。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;充分收集和保留数据。&lt;/li&gt;
&lt;li&gt;利用数据。使用统计数据，就能让产品很不同。&lt;/li&gt;
&lt;li&gt;去发掘新的实体，丰富画像。&lt;/li&gt;
&lt;li&gt;如果可以，在数据基础上加入机器学习模型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;未完待续。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200724-bizapp-data/ - </description>
        </item>
    
    
    
        <item>
        <title>实验说明 Golang HTTP 连接池参数</title>
        <link>https://xujiahua.github.io/posts/20200723-golang-http-reuse/</link>
        <pubDate>Thu, 23 Jul 2020 16:12:51 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200723-golang-http-reuse/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200723-golang-http-reuse/ -&lt;p&gt;连接相对于其他对象，创建成本较高，资源也有限。如果没有连接池，在高并发场景下，连接关闭又新建，很快就会因为过多的TIME_WAIT（连接主动关闭方）导致无法创建更多连接了，程序被压死。&lt;/p&gt;
&lt;h2 id=&#34;nethttp-连接池参数&#34;&gt;net/http 连接池参数&lt;/h2&gt;
&lt;p&gt;Go （测试版本 go 1.14）的net/http包是有连接池功能的，具体地，是 &lt;a href=&#34;https://golang.org/pkg/net/http/#Transport&#34;&gt;Transport&lt;/a&gt; 用于连接池化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Transport is an implementation of RoundTripper that supports HTTP, HTTPS, and HTTP proxies (for either HTTP or HTTPS with CONNECT).&lt;/p&gt;
&lt;p&gt;By default, Transport caches connections for future re-use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// MaxIdleConns controls the maximum number of idle (keep-alive)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// connections across all hosts. Zero means no limit.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConns&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// MaxIdleConnsPerHost, if non-zero, controls the maximum idle
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// (keep-alive) connections to keep per-host. If zero,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// DefaultMaxIdleConnsPerHost is used.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConnsPerHost&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// MaxConnsPerHost optionally limits the total number of
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// connections per host, including connections in the dialing,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// active, and idle states. On limit violation, dials will block.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Zero means no limit.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// IdleConnTimeout is the maximum amount of time an idle
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// (keep-alive) connection will remain idle before closing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// itself.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Zero means no limit.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;IdleConnTimeout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;默认值&#34;&gt;默认值&lt;/h3&gt;
&lt;p&gt;MaxIdleConns=100，MaxIdleConnsPerHost=2（=DefaultMaxIdleConnsPerHost），MaxConnsPerHost=0（不限制）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// DefaultTransport is the default implementation of Transport and is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// used by DefaultClient. It establishes network connections as needed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// and caches them for reuse by subsequent calls. It uses HTTP proxies
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// as directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// $no_proxy) environment variables.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultTransport&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RoundTripper&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Proxy&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ProxyFromEnvironment&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;DialContext&lt;/span&gt;: (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Dialer&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;KeepAlive&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;DualStack&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
	}).&lt;span style=&#34;color:#a6e22e&#34;&gt;DialContext&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ForceAttemptHTTP2&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConns&lt;/span&gt;:          &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;IdleConnTimeout&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSHandshakeTimeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ExpectContinueTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;perhost-的-host-是-addrport&#34;&gt;PerHost 的 Host 是 addr+port&lt;/h3&gt;
&lt;p&gt;单台服务器，多个端口的服务是不同的 Host。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// canonicalAddr returns url.Host but always with a &amp;#34;:port&amp;#34; suffix
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canonicalAddr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Hostname&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;idnaASCII&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Port&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;portMap&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Scheme&lt;/span&gt;]
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;JoinHostPort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参数试验&#34;&gt;参数试验&lt;/h2&gt;
&lt;h3 id=&#34;服务端准备工作&#34;&gt;服务端准备工作&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/XUJiahua/go-http-conn-pool-test&#34;&gt;https://github.com/XUJiahua/go-http-conn-pool-test&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 长连接服务器 192.168.33.10:8087&lt;/span&gt;
go run main.go -port &lt;span style=&#34;color:#ae81ff&#34;&gt;8087&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 长连接服务器 192.168.33.10:8089&lt;/span&gt;
go run main.go -port &lt;span style=&#34;color:#ae81ff&#34;&gt;8089&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 短连接服务器 192.168.33.10:8088&lt;/span&gt;
python3 -m http.server &lt;span style=&#34;color:#ae81ff&#34;&gt;8088&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;maxidleconnsperhost-控制单个host的连接池大小&#34;&gt;MaxIdleConnsPerHost 控制单个Host的连接池大小&lt;/h3&gt;
&lt;p&gt;单个连接池数设置为1。设置 MaxConnsPerHost=MaxIdleConnsPerHost，保证连接都是长连接。方便抓包工具查看连接池的数量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 参数配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_httpCli&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConnsPerHost&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;IdleConnTimeout&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSHandshakeTimeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ExpectContinueTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	},
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 测试
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestLong&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.33.10:8087&amp;#34;&lt;/span&gt;)
		}
	}()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/image-20200724143455526.png&#34; alt=&#34;image-20200724143455526&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;连接复用的效果&#34;&gt;连接复用的效果&lt;/h4&gt;
&lt;p&gt;一个连接顺序处理多个HTTP请求。Wireshark 展示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200724143722353.png&#34; alt=&#34;image-20200724143722353&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;maxconnsperhost-控制单个host的最大连接总数&#34;&gt;MaxConnsPerHost 控制单个Host的最大连接总数&lt;/h3&gt;
&lt;p&gt;net/http包里没有全局性的连接总数限制参数。该值默认是0，也就是不限制，连接池里的连接能用就用，不能用创建新连接。无法进入连接池回收的短连接，被主动关闭。&lt;/p&gt;
&lt;p&gt;如果不限制，直接 dialConn。如果限制，未达到限制，直接dialConn，计数+1；达到限制，进入等待队列中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// queueForDial queues w to wait for permission to begin dialing.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Once w receives permission to dial, it will do so in a separate goroutine.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;queueForDial&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wantConn&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;beforeDial&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dialConnFor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostMu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostMu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHost&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHost&lt;/span&gt; = make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;connectMethodKey&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHost&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dialConnFor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostWait&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostWait&lt;/span&gt; = make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;connectMethodKey&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;wantConnQueue&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostWait&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]
	&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cleanFront&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pushBack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostWait&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果计数-1，从等待队列中释放一个进行 dialConn。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// decConnsPerHost decrements the per-host connection count for key,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// which may in turn give a different waiting goroutine permission to dial.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;decConnsPerHost&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connectMethodKey&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostMu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostMu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHost&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Shouldn&amp;#39;t happen, but if it does, the counting is buggy and could
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// easily lead to a silent deadlock, so report the problem loudly.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http: internal error: connCount underflow&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Can we hand this count to a goroutine still waiting to dial?
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// (Some goroutines on the wait list may have timed out or
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// gotten a connection another way. If they&amp;#39;re all gone,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// we don&amp;#39;t want to kick off any spurious dial operations.)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostWait&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.len() &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.len() &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;popFront&lt;/span&gt;()
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt;() {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dialConnFor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;)
				&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.len() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			delete(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostWait&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// q is a value (like a slice), so we have to store
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// the updated q back into the map.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHostWait&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Otherwise, decrement the recorded count.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		delete(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connsPerHost&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;试验：尝试连接池1，最大连接数2。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 参数配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_httpCli&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConnsPerHost&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;IdleConnTimeout&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSHandshakeTimeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ExpectContinueTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	},
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 测试
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestLong&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.33.10:8087&amp;#34;&lt;/span&gt;)
		}
	}()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;连接有重建的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200724151057501.png&#34; alt=&#34;image-20200724151057501&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;maxidleconns-vs-maxidleconnsperhost-两个连接池&#34;&gt;MaxIdleConns vs MaxIdleConnsPerHost 两个连接池&lt;/h3&gt;
&lt;p&gt;如下源码，先检查 PerHost 的池子有没有满，再检查总的池子有没有满。也就是说，MaxIdleConns设置不合理，会对MaxIdleConnsPerHost有影响。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// tryPutIdleConn adds pconn to the list of idle persistent connections awaiting
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// a new request.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If pconn is no longer needed or not in a good state, tryPutIdleConn returns
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// an error explaining why it wasn&amp;#39;t registered.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// tryPutIdleConn does not close pconn. Use putOrCloseIdleConn instead for that.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;tryPutIdleConn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pconn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;persistConn&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;idles&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idleConn&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;idles&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;maxIdleConnsPerHost&lt;/span&gt;() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果超过了maxIdleConnsPerHost，报连接太多，当前pconn被关掉。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errTooManyIdleHost&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;idles&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pconn&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dup idle pconn %p in freelist&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pconn&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idleConn&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;idles&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pconn&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idleLRU&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pconn&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idleLRU&lt;/span&gt;.len() &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConns&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;oldest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idleLRU&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;removeOldest&lt;/span&gt;()
    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果超过了MaxIdleConns，杀掉老的idle connection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;oldest&lt;/span&gt;.close(&lt;span style=&#34;color:#a6e22e&#34;&gt;errTooManyIdle&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;removeIdleConnLocked&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;oldest&lt;/span&gt;)
	}
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看看是否有影响，客户端同时连接两个Host。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 参数配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_httpCli&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConns&lt;/span&gt;:          &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConnsPerHost&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;IdleConnTimeout&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSHandshakeTimeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ExpectContinueTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	},
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 测试
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestLongLong&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.33.10:8087&amp;#34;&lt;/span&gt;)
		}
	}()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.33.10:8089&amp;#34;&lt;/span&gt;)
		}
	}()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果反映，连接有不断重建的现象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200724145033252.png&#34; alt=&#34;image-20200724145033252&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置去除MaxIdleConns，不限制连接总池的大小：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 参数配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_httpCli&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConnsPerHost&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;IdleConnTimeout&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSHandshakeTimeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ExpectContinueTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	},
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果反映，对每个Host各自维持一个连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200724145240071.png&#34; alt=&#34;image-20200724145240071&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;连接复用客户端服务端需同时支持&#34;&gt;连接复用，客户端、服务端需同时支持&lt;/h3&gt;
&lt;p&gt;任何一方主动关闭连接，连接就无法复用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 参数配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_httpCli&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxIdleConnsPerHost&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnsPerHost&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;IdleConnTimeout&lt;/span&gt;:       &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSHandshakeTimeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ExpectContinueTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,
	},
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 测试
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestLongShort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.33.10:8087&amp;#34;&lt;/span&gt;)
		}
	}()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.33.10:8088&amp;#34;&lt;/span&gt;)
		}
	}()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;python server （&lt;code&gt;python3 -m http.server 8088&lt;/code&gt;）会主动关闭连接，池化参数不生效，创建连接不止1个。作为对比，对于长连接服务，池化参数生效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200724145917753.png&#34; alt=&#34;image-20200724145917753&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;服务间接口调用，维持稳定数量的长连接，对性能非常有帮助。&lt;/p&gt;
&lt;p&gt;几个参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MaxIdleConnsPerHost：优先设置这个，决定了对于单个Host需要维持的连接池大小。该值的合理确定，应该根据性能测试的结果调整。&lt;/li&gt;
&lt;li&gt;MaxIdleConns：客户端连接单个Host，不少于MaxIdleConnsPerHost大小，不然影响MaxIdleConnsPerHost控制的连接池；客户端连接 n 个Host，少于 n X MaxIdleConnsPerHost 会影响MaxIdleConnsPerHost控制的连接池（导致连接重建）。嫌麻烦，建议设置为0，不限制。&lt;/li&gt;
&lt;li&gt;MaxConnsPerHost：对于单个Host允许的最大连接数，包含IdleConns，所以一般大于等于MaxIdleConnsPerHost。设置为等于MaxIdleConnsPerHost，也就是尽可能复用连接池中的连接。另外设置过小，可能会导致并发下降，超过这个值会 block 请求，直到有空闲连接。（所以默认值是不限制的）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tuning the Go HTTP Client Settings for Load Testing &lt;a href=&#34;http://tleyden.github.io/blog/2016/11/21/tuning-the-go-http-client-library-for-load-testing/&#34;&gt;http://tleyden.github.io/blog/2016/11/21/tuning-the-go-http-client-library-for-load-testing/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20200723-golang-http-reuse/ - </description>
        </item>
    
    
    
        <item>
        <title>Metabase Impala Driver 时区问题</title>
        <link>https://xujiahua.github.io/posts/20200714-metabase-timezone/</link>
        <pubDate>Tue, 14 Jul 2020 10:14:14 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200714-metabase-timezone/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200714-metabase-timezone/ -&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;实际日期是上午11点，而&lt;code&gt;Metabase&lt;/code&gt;显示是下午7点。差8小时。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;(),hour(&lt;span style=&#34;color:#66d9ef&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/image-20200714113556806.png&#34; alt=&#34;image-20200714113556806&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.metabase.com/docs/latest/operations-guide/handling-timezones.html&#34;&gt;Handling timezones in Metabase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.metabase.com/docs/latest/troubleshooting-guide/timezones.html&#34;&gt;troubleshooting-guide/timezones&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有几个时区有关的设置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Database TimeZone，其中 impalad 启动环境是东八区，TIMESTAMP 不存储时区信息，存储的是东八区本地时间。&lt;/li&gt;
&lt;li&gt;Metabase TimeZone = JVM TimeZone = OS TimeZone，使用的是东八区。&lt;/li&gt;
&lt;li&gt;“Report Time Zone” setting，对 Impala 是不起作用的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同样的SQL在MySQL上试了下，没问题。问题定位基本在&lt;code&gt;metabase&lt;/code&gt;到&lt;code&gt;impala&lt;/code&gt;的Driver层。&lt;/p&gt;
&lt;p&gt;发现从&lt;code&gt;impala&lt;/code&gt;读取TIMESTAMP的值，TIMEZONE写死了UTC，应该是东八区。（Metabase SparkSQL Driver 也有这个问题，因为代码是从那copy的。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200714113928339.png&#34; alt=&#34;image-20200714113928339&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/XUJiahua/metabase-impala-driver/commit/0963f9890a9213d53511c61b53870476f8f82cf4&#34;&gt;https://github.com/XUJiahua/metabase-impala-driver/commit/0963f9890a9213d53511c61b53870476f8f82cf4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;metabase&lt;/code&gt;东八区启动，用北京时间显示，就会多加8小时。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200714131930694.png&#34; alt=&#34;image-20200714131930694&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修复&#34;&gt;修复&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200714113658545.png&#34; alt=&#34;image-20200714113658545&#34;&gt;&lt;/p&gt;
- https://xujiahua.github.io/posts/20200714-metabase-timezone/ - </description>
        </item>
    
    
    
        <item>
        <title>Impala TIMESTAMP 时区处理</title>
        <link>https://xujiahua.github.io/posts/20200713-impala-timezone/</link>
        <pubDate>Mon, 13 Jul 2020 16:16:27 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200713-impala-timezone/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200713-impala-timezone/ -&lt;h2 id=&#34;现象&#34;&gt;现象&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Hive&lt;/code&gt; 以&lt;code&gt;Parquet&lt;/code&gt;数据存储格式写入的 &lt;code&gt;TIMESTAMP&lt;/code&gt;字段内容，&lt;code&gt;Impala&lt;/code&gt;读取，时间差8小时。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200713162929821.png&#34; alt=&#34;image-20200713162929821&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hive&lt;/code&gt;写入&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200713163001445.png&#34; alt=&#34;image-20200713163001445&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Impala&lt;/code&gt;读取差8小时，北京时间与UTC差8小时。&lt;/p&gt;
&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Hive&lt;/code&gt;写&lt;code&gt;Parquet&lt;/code&gt;数据文件，&lt;code&gt;TIMESTAMP&lt;/code&gt;先规范化到UTC格式再存储。而&lt;code&gt;Impala&lt;/code&gt;直接读取数据文件中的内容，不会进行TIMEZONE的调整。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When Hive writes to Parquet data files, the TIMESTAMP values are normalized to UTC from the local time zone of the host where the data was written. On the other hand, Impala does not make any time zone adjustment when it writes or reads INT96 TIMESTAMP values to Parquet files. This difference in time zone handling can cause potentially inconsistent results when Impala processes TIMESTAMP values in the Parquet files written by Hive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.cloudera.com/documentation/enterprise/latest/topics/impala_timestamp.html&#34;&gt;https://docs.cloudera.com/documentation/enterprise/latest/topics/impala_timestamp.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;impalad&lt;/code&gt;加入如下参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--use_local_tz_for_unix_timestamp_conversions=true
--convert_legacy_hive_parquet_utc_timestamps=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CDH 配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200713163849195.png&#34; alt=&#34;image-20200713163849195&#34;&gt;&lt;/p&gt;
&lt;p&gt;重启即可生效。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200713-impala-timezone/ - </description>
        </item>
    
    
    
        <item>
        <title>Metabase Impala Driver 0710更新日志</title>
        <link>https://xujiahua.github.io/posts/20200710-metabase-impala-driver/</link>
        <pubDate>Fri, 10 Jul 2020 10:35:08 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200710-metabase-impala-driver/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200710-metabase-impala-driver/ -&lt;p&gt;基于 Metabase 0.35.4 版本和Cloudera的Impala JDBC驱动，重构了一份独立的 &lt;a href=&#34;https://github.com/XUJiahua/metabase-impala-driver&#34;&gt;Metabase Impala Driver&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;整体思路参考 &lt;a href=&#34;https://github.com/metabase/metabase/wiki/Writing-a-Driver&#34;&gt;Writing A Driver&lt;/a&gt; ，更多时间是参考其他驱动的代码和根据实际用例调试。还有不少待完善的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单元测试缺乏。&lt;/li&gt;
&lt;li&gt;去除没有必要的方法（首先得理解方法的含义）。&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20200710-metabase-impala-driver/ - </description>
        </item>
    
    
    
        <item>
        <title>Metabase 客户隔离</title>
        <link>https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/</link>
        <pubDate>Mon, 15 Jun 2020 17:19:50 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/ -&lt;p&gt;之前有讨论，在不改动代码的情况下，可以使用分组功能来做客户隔离。但是该方案面临的问题是，每个客户一套模板，模板可维护性低。&lt;/p&gt;
&lt;p&gt;问题的关键就是如何共享SQL模板并客户隔离。需要改动源代码。&lt;/p&gt;
&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;代码复用。同一套SQL代码。不用copy/paste，好维护。一个dashboard所有客户都能看。&lt;/li&gt;
&lt;li&gt;客户隔离，保证数据安全。不同客户只能看到自己的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;
&lt;p&gt;执行dashboard/chart中SQL代码时，动态插入客户隔离标识。&lt;/p&gt;
&lt;p&gt;首先来看下一次SQL Query的生命周期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200616151301507.png&#34; alt=&#34;image-20200616151301507&#34;&gt;&lt;/p&gt;
&lt;p&gt;找了个比较接近的处理逻辑，&lt;code&gt;substitute-parameters&lt;/code&gt;用于将&lt;code&gt;{ {xxx} }&lt;/code&gt;替换为widget中选的值。模仿之，SQL中定义一个&lt;code&gt;##client_id##&lt;/code&gt;占位符，写了一个&lt;code&gt;substitute-placeholder&lt;/code&gt;方法使用用户的&lt;code&gt;client-id&lt;/code&gt;替代占位符。&lt;/p&gt;
&lt;p&gt;code: &lt;a href=&#34;https://github.com/XUJiahua/metabase/pull/4/files&#34;&gt;https://github.com/XUJiahua/metabase/pull/4/files&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;demo&#34;&gt;DEMO&lt;/h3&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;使用Sample Data数据集测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; PEOPLE
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;STATE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;STATE&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=##&lt;/span&gt;client_id&lt;span style=&#34;color:#f92672&#34;&gt;##&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;返回的SQL中，可见占位符被替换为Google。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200616150506812.png&#34; alt=&#34;image-20200616150506812&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为还没有集成SSO系统，&lt;code&gt;client-id&lt;/code&gt;临时用&lt;code&gt;first-name&lt;/code&gt;来代替。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200616150614876.png&#34; alt=&#34;image-20200616150614876&#34;&gt;&lt;/p&gt;
- https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/ - </description>
        </item>
    
    
    
        <item>
        <title>使用 Perceptual hashing 去除微信头像内容干扰</title>
        <link>https://xujiahua.github.io/posts/20200611-phash/</link>
        <pubDate>Thu, 11 Jun 2020 11:38:55 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200611-phash/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200611-phash/ -&lt;p&gt;本文是&lt;a href=&#34;https://xujiahua.github.io/posts/20200514-wx-avatar/&#34;&gt;「微信用户授权头像内容带随机干扰的问题」&lt;/a&gt;的延续。本文对效果进行量化，并找到一个phash库，达到了更好的效果。&lt;/p&gt;
&lt;h2 id=&#34;实验框架&#34;&gt;实验框架&lt;/h2&gt;
&lt;p&gt;相关脚本&lt;a href=&#34;https://github.com/XUJiahua/phash_test&#34;&gt;点此&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;实验数据&#34;&gt;实验数据&lt;/h3&gt;
&lt;p&gt;10 组微信头像，每组 10万个头像。&lt;/p&gt;
&lt;p&gt;准备 10万 微信头像链接，重复下载10次：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./download.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;实验期望&#34;&gt;实验期望&lt;/h3&gt;
&lt;p&gt;期望目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 个头像链接对应 1 个特征：期望特征抽取算法能够剥离微信对头像内容加入的干扰。不然使用密码学哈希算法，1 个头像链接下载 10 次可能就对应 10 个特征了。&lt;/li&gt;
&lt;li&gt;1 个特征对应 1 个头像链接。跟哈希算法一样，希望哈希冲突尽可能小。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实验&#34;&gt;实验&lt;/h2&gt;
&lt;h3 id=&#34;图像降维方法&#34;&gt;图像降维方法&lt;/h3&gt;
&lt;p&gt;延续上文中在有限数据下得出的规则，图像降维到：32级灰度，10x10 尺寸。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python extract_feature_p2.py

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file,feature&amp;#34;&lt;/span&gt; &amp;gt; header.csv
cat header.csv download_1.csv download_2.csv download_3.csv download_4.csv download_5.csv download_6.csv download_7.csv download_8.csv download_9.csv download_10.csv &amp;gt; data.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个指标分析如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select avg(cnt) as expect1 from (select file, count(distinct feature) as cnt from &amp;#39;data&amp;#39; group by file)&amp;#34;&lt;/span&gt; data.csv

expect1
2.186088754189832

csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select avg(cnt) as expect1 from (select feature, count(distinct file) as cnt from &amp;#39;data&amp;#39; group by feature)&amp;#34;&lt;/span&gt; data.csv

expect1
1.0051170602511927
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个头像链接，重复下载 10 次的情况下，平均有生成 2.18 个特征。&lt;/p&gt;
&lt;p&gt;每个特征，平均对应 1 个头像链接。在期望内，毕竟是密码学哈希算出的特征。&lt;/p&gt;
&lt;h3 id=&#34;perceptual-hashing&#34;&gt;Perceptual hashing&lt;/h3&gt;
&lt;p&gt;使用了&lt;a href=&#34;https://github.com/JohannesBuchner/imagehash&#34;&gt;这个库&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python extract_feature_p.py

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file,feature&amp;#34;&lt;/span&gt; &amp;gt; header.csv
cat header.csv download_1.csv download_2.csv download_3.csv download_4.csv download_5.csv download_6.csv download_7.csv download_8.csv download_9.csv download_10.csv &amp;gt; data.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个指标分析如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select avg(cnt) as expect1 from (select file, count(distinct feature) as cnt from &amp;#39;data&amp;#39; group by file)&amp;#34;&lt;/span&gt; data.csv

expect1
1.1413604158721875

csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select avg(cnt) as expect1 from (select feature, count(distinct file) as cnt from &amp;#39;data&amp;#39; group by feature)&amp;#34;&lt;/span&gt; data.csv

expect1
1.0312553837783924
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个头像链接，重复下载 10 次的情况下，平均有生成 1.1 个特征，效果很惊艳！&lt;/p&gt;
&lt;p&gt;每个特征，平均对应 1.03 个头像链接。性能也很好了。&lt;/p&gt;
&lt;h4 id=&#34;详细分析&#34;&gt;详细分析&lt;/h4&gt;
&lt;p&gt;1 个头像链接对应不同特征数的区间分布：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select cnt, count(1) from (select file, count(distinct feature) as cnt from &amp;#39;data&amp;#39; group by file) group by cnt order by cnt&amp;#34;&lt;/span&gt; data.csv &amp;gt; dist1.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/image-20200611172502130.png&#34; alt=&#34;image-20200611172502130&#34;&gt;&lt;/p&gt;
&lt;p&gt;重复下载 10 次的情况下，89%的头像链接都映射到了唯一值。&lt;/p&gt;
&lt;p&gt;还有11%都是什么表现呢？大部分如图所示，只有部分位不同。可以理解，phash就是为了相似图搜索设计的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611174113623.png&#34; alt=&#34;image-20200611174113623&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个特征值对应不同头像链接的区间分布：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;csvsql --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select cnt, count(1) from (select feature, count(distinct file) as cnt from &amp;#39;data&amp;#39; group by feature) group by cnt order by cnt&amp;#34;&lt;/span&gt; data.csv &amp;gt; dist2.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../../images/image-20200611172438551.png&#34; alt=&#34;image-20200611172438551&#34;&gt;&lt;/p&gt;
&lt;p&gt;98%的特征值对应一个头像链接。分析下剩余的2%的特征值，一个个处理。&lt;/p&gt;
&lt;p&gt;使用如下脚本将相同特征值的图像放一块比较，参数为特征值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./open_same_hash_images.sh ec9e1413e268c377
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有两组图是比较异常的。如图169张图的特征值是一样的。共性是纯色。特征值也很奇怪 8000000000000000。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611155105274.png&#34; alt=&#34;image-20200611155105274&#34;&gt;&lt;/p&gt;
&lt;p&gt;如图46张图的特征值是一样的，共性是纯色。hash值也很奇怪 0000000000000000。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611155003908.png&#34; alt=&#34;image-20200611155003908&#34;&gt;&lt;/p&gt;
&lt;p&gt;其他hash值相同的图像文件，确实是相同的图像（肉眼看是一样的），如预期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611162618300.png&#34; alt=&#34;image-20200611162618300&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200611162511234.png&#34; alt=&#34;image-20200611162511234&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;todo&#34;&gt;TODO&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;phash对不同纯色的图，生成的hash值是相同的。8000000000000000/0000000000000000这两个hash值很奇怪。&lt;/li&gt;
&lt;li&gt;相似的图，生成的hash值可能不同的，2-3位的数字可能不同。查看原理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;虽然对 phash 算法还是有点陌生，但是其效果基本满足了业务需求。至少比自己分析出的规则好很多。&lt;/p&gt;
- https://xujiahua.github.io/posts/20200611-phash/ - </description>
        </item>
    
    
    
        <item>
        <title>Metabase SSO 登录</title>
        <link>https://xujiahua.github.io/posts/20200609-metabase-sso-login/</link>
        <pubDate>Tue, 09 Jun 2020 10:37:09 +0800</pubDate>
        
        <guid>https://xujiahua.github.io/posts/20200609-metabase-sso-login/</guid>
        <description>许嘉华的笔记 https://xujiahua.github.io/posts/20200609-metabase-sso-login/ -&lt;p&gt;探讨如何将 Metabase 融入业务系统（SaaS 服务）。&lt;/p&gt;
&lt;p&gt;为何需要集成 Metabase 到业务系统中呢？一般，通用的数据需求都做到SaaS服务中了。而现实情况是，客户是有很多定制化数据需求的。使用 Metabase 制作报表，直接跳过前后端开发，快速满足客户需求。&lt;/p&gt;
&lt;p&gt;（最终极地，进一步提高生产效率，把 Metabase 的组件化能力内化到 SaaS 服务中才是正道。）&lt;/p&gt;
&lt;p&gt;试分析下 Metabase 提供的方案，以及适配我们的场景，分析该怎么改。&lt;/p&gt;
&lt;h2 id=&#34;分析现存方案&#34;&gt;分析现存方案&lt;/h2&gt;
&lt;p&gt;开源版本的 Metabase 支持两种第三方登录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LDAP: Allows users within your LDAP directory to log in to Metabase with their LDAP credentials, and allows automatic mapping of LDAP groups to Metabase groups.&lt;/li&gt;
&lt;li&gt;Sign in with Google: Allows users with &lt;strong&gt;existing Metabase accounts&lt;/strong&gt; to login with a Google account that &lt;strong&gt;matches their email address&lt;/strong&gt; in addition to their Metabase username and password.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;企业版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SAML&lt;/li&gt;
&lt;li&gt;JWT&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Authenticating with Google Sign-In or LDAP &lt;a href=&#34;https://www.metabase.com/docs/latest/administration-guide/10-single-sign-on.html&#34;&gt;https://www.metabase.com/docs/latest/administration-guide/10-single-sign-on.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Authenticating with SAML &lt;a href=&#34;https://www.metabase.com/docs/latest/enterprise-guide/authenticating-with-saml.html&#34;&gt;https://www.metabase.com/docs/latest/enterprise-guide/authenticating-with-saml.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JWT-based Authentication &lt;a href=&#34;https://www.metabase.com/docs/latest/enterprise-guide/authenticating-with-jwt.html&#34;&gt;https://www.metabase.com/docs/latest/enterprise-guide/authenticating-with-jwt.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;sign-in-with-google&#34;&gt;Sign in with Google&lt;/h3&gt;
&lt;p&gt;其底层对接的是Google的Sign-In for Website &lt;a href=&#34;https://developers.google.com/identity/sign-in/web&#34;&gt;https://developers.google.com/identity/sign-in/web&lt;/a&gt; 。并假设 Google 返回的数据是完全可信的。&lt;/p&gt;
&lt;p&gt;根据文档配置获取 clientID。本地测试，Authorized JavaScript origins 设置成本地路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609164603642.png&#34; alt=&#34;image-20200609164603642&#34;&gt;&lt;/p&gt;
&lt;p&gt;管理员角色下 Metabase 配置 clientID。第二项，满足条件：email是@gmail.com结尾的，自动创建账户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609170932819.png&#34; alt=&#34;image-20200609170932819&#34;&gt;&lt;/p&gt;
&lt;p&gt;不然，需先创建Metabase账户，其email等于Google登录返回的邮箱地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609171443922.png&#34; alt=&#34;image-20200609171443922&#34;&gt;&lt;/p&gt;
&lt;p&gt;Google登录的client-id由后端提供给前端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609160327997.png&#34; alt=&#34;image-20200609160327997&#34;&gt;&lt;/p&gt;
&lt;p&gt;用户登录界面有了Google登录按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609104044953.png&#34; alt=&#34;image-20200609104044953&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击Google登录按钮，会唤起Google登录页面。登录成功，获取到Google返回结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609163652367.png&#34; alt=&#34;image-20200609163652367&#34;&gt;&lt;/p&gt;
&lt;p&gt;将Google返回里的token提交给Metabase服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609155729926.png&#34; alt=&#34;image-20200609155729926&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;google_auth&lt;/code&gt;这个接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609155759738.png&#34; alt=&#34;image-20200609155759738&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过token请求用户信息。参考：Calling the tokeninfo endpoint &lt;a href=&#34;https://developers.google.com/identity/sign-in/web/backend-auth#calling-the-tokeninfo-endpoint&#34;&gt;https://developers.google.com/identity/sign-in/web/backend-auth#calling-the-tokeninfo-endpoint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609171805849.png&#34; alt=&#34;image-20200609171805849&#34;&gt;&lt;/p&gt;
&lt;p&gt;整体流程如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609180555022.png&#34; alt=&#34;image-20200609180555022&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ldap&#34;&gt;LDAP&lt;/h3&gt;
&lt;p&gt;LDAP 可以理解为一个用户数据库、服务，常见用途就是单点登录，用户只需要记住一个密码就可以登录多个服务。了解更多参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;轻型目录访问协议 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%BD%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE&#34;&gt;https://zh.wikipedia.org/wiki/%E8%BD%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What are CN, OU, DC in an LDAP search? &lt;a href=&#34;https://stackoverflow.com/questions/18756688/what-are-cn-ou-dc-in-an-ldap-search&#34;&gt;https://stackoverflow.com/questions/18756688/what-are-cn-ou-dc-in-an-ldap-search&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考文档搭建一个LDAP环境。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to install OpenLDAP on Ubuntu 18.04 &lt;a href=&#34;https://www.techrepublic.com/article/how-to-install-openldap-on-ubuntu-18-04/&#34;&gt;https://www.techrepublic.com/article/how-to-install-openldap-on-ubuntu-18-04/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS domain name 使用 metabase.com，我们会使用metabase的测试配置。&lt;/li&gt;
&lt;li&gt;测试配置使用 &lt;a href=&#34;https://github.com/metabase/metabase/blob/master/test_resources/ldap.ldif&#34;&gt;https://github.com/metabase/metabase/blob/master/test_resources/ldap.ldif&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ldapadd -x -D cn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;admin,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;metabase,dc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;com -W -f test_resources/ldap.ldif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用一个LDAP可视化管理工具（用的 Apache Directory Studio）可以看到这样的树状结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609105314696.png&#34; alt=&#34;image-20200609105314696&#34;&gt;&lt;/p&gt;
&lt;p&gt;Metabase 管理界面配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609104528576.png&#34; alt=&#34;image-20200609104528576&#34;&gt;&lt;/p&gt;
&lt;p&gt;LDAP用户还是使用邮箱密码登录。优先使用LDAP登录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609110920538.png&#34; alt=&#34;image-20200609110920538&#34;&gt;&lt;/p&gt;
&lt;p&gt;LDAP用户、密码验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609111803290.png&#34; alt=&#34;image-20200609111803290&#34;&gt;&lt;/p&gt;
&lt;p&gt;验证通过，LDAP用户会映射为本地用户，但是不存密码。并同步group信息（LDAP group 与 metabase group 之间映射可配置）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609112238354.png&#34; alt=&#34;image-20200609112238354&#34;&gt;&lt;/p&gt;
&lt;p&gt;LDAP 用户信息的字段映射到本地用户的email/first_name/last_name，可以配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/image-20200609114531757.png&#34; alt=&#34;image-20200609114531757&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;saml&#34;&gt;SAML&lt;/h3&gt;
&lt;p&gt;SAML是实现单点登录（SSO）的一种开放标准。仍然是服务方引导用户到认证中心认证，认证成功后，服务方从认证中心获取用户信息的逻辑。整体逻辑与Google Signin没两样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There three main roles in this communication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;End User&lt;/li&gt;
&lt;li&gt;Identity Provider (IdP)&lt;/li&gt;
&lt;li&gt;Service Provider (SP)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The end-user initiates the login process at the SP. The SP will redirect the user to the IdP with a SAML Request (AuthnRequest). The SAML Request will contain the necessary information for the IdP to authenticate the end-user and reply to the SP with the correct SAML Assertion (SAMLResponse).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.secureauth.com/blog/introduction-to-saml&#34;&gt;https://www.secureauth.com/blog/introduction-to-saml&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1127182513244158.Xyqs8g4zWlwULTRe33zB_height640.png&#34; alt=&#34;SAML SP Initiated SSO Flow&#34;&gt;&lt;/p&gt;
&lt;p&gt;GitHub找了个例子，了解下SAML的流程，可以有一个更具象的认识。 &lt;a href=&#34;https://github.com/crewjam/saml&#34;&gt;https://github.com/crewjam/saml&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SP 需要知道 IDP 的认证地址。需要知道 SAML Request 往哪发。&lt;/li&gt;
&lt;li&gt;IDP 需要知道 SP 的接收地址，需要知道 SAML Response 往哪发。&lt;/li&gt;
&lt;li&gt;IDP 与 SP之间是通过公私钥认证的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Security Assertion Markup Language &lt;a href=&#34;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&#34;&gt;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An Introduction to SAML (Security Assertion Markup Language) &lt;a href=&#34;https://www.secureauth.com/blog/introduction-to-saml&#34;&gt;https://www.secureauth.com/blog/introduction-to-saml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SAML library for go &lt;a href=&#34;https://github.com/crewjam/saml&#34;&gt;https://github.com/crewjam/saml&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;适配-saas-服务&#34;&gt;适配 SaaS 服务&lt;/h2&gt;
&lt;p&gt;企业内部使用，使用LDAP挺方便的。而 SaaS 服务怎么利用上Metabase呢？而且Metabase本身没有多租户（企业）的概念。&lt;/p&gt;
&lt;p&gt;大概分析如下：&lt;/p&gt;
&lt;h3 id=&#34;基于分组的数据隔离&#34;&gt;基于分组的数据隔离&lt;/h3&gt;
&lt;p&gt;SaaS 系统，多租户系统，最基本的要求是保证数据隔离。客户只能看到自己的数据（报表）。&lt;/p&gt;
&lt;p&gt;Metabase 数据隔离的手段只有分组。基于分组隔离客户，一个客户一个分组。因为少部分客户才会用到 Metabase 功能，所以分组不会非常多。&lt;/p&gt;
&lt;h3 id=&#34;报表功能复用&#34;&gt;报表功能复用？&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;这个有点难。只能一个个客户（对应每个分组）做报表。通用的功能，copy -&amp;gt; SQL里修改客户隔离标识 -&amp;gt; paste。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/&#34;&gt;Metabase 客户隔离&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;定制-sso-系统&#34;&gt;定制 SSO 系统&lt;/h3&gt;
&lt;p&gt;认证页、获取用户信息，每个SSO系统都是有的。这里需要考虑的是用户字段与Metabase的映射。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Metabase中用户信息有：&lt;code&gt;email&lt;/code&gt;/&lt;code&gt;first name&lt;/code&gt;/&lt;code&gt;last name&lt;/code&gt;。SSO系统需要有对应的字段。&lt;/li&gt;
&lt;li&gt;不是每个SaaS客户都能使用Metabase。SSO用户信息加入用户标识&lt;code&gt;metabase_enabled&lt;/code&gt;。没有标识，禁止进入 Metabase，Metabase 进行提示。&lt;/li&gt;
&lt;li&gt;用户信息中有客户隔离标识 &lt;code&gt;mid&lt;/code&gt;。对应 Metabase 分组。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;metabase&#34;&gt;Metabase&lt;/h3&gt;
&lt;p&gt;前端，Auth Provider 配置页：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置SSO认证页地址。（不能写死，生产、测试环境地址不同）&lt;/li&gt;
&lt;li&gt;配置SSO Token API地址。&lt;/li&gt;
&lt;li&gt;客户隔离标识与Metabase group映射。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前端，登录页：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供一个点击登录按钮。跳转到SSO认证页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对接 SSO 用户接口。&lt;/li&gt;
&lt;/ol&gt;
- https://xujiahua.github.io/posts/20200609-metabase-sso-login/ - </description>
        </item>
    
    
  </channel>
</rss> 
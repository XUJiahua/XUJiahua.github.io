<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metabase on Happy Coding</title>
    <link>https://xujiahua.github.io/categories/metabase/</link>
    <description>Recent content in Metabase on Happy Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 14 Jul 2020 10:14:14 +0800</lastBuildDate><atom:link href="https://xujiahua.github.io/categories/metabase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Metabase Impala Driver 时区问题</title>
      <link>https://xujiahua.github.io/posts/20200714-metabase-timezone/</link>
      <pubDate>Tue, 14 Jul 2020 10:14:14 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200714-metabase-timezone/</guid>
      <description>问题 实际日期是上午11点，而Metabase显示是下午7点。差8小时。
select CURRENT_TIMESTAMP(),hour(CURRENT_TIMESTAMP()) 分析 参考：
 Handling timezones in Metabase troubleshooting-guide/timezones  有几个时区有关的设置：
 Database TimeZone，其中 impalad 启动环境是东八区，TIMESTAMP 不存储时区信息，存储的是东八区本地时间。 Metabase TimeZone = JVM TimeZone = OS TimeZone，使用的是东八区。 “Report Time Zone” setting，对 Impala 是不起作用的。  同样的SQL在MySQL上试了下，没问题。问题定位基本在metabase到impala的Driver层。
发现从impala读取TIMESTAMP的值，TIMEZONE写死了UTC，应该是东八区。（Metabase SparkSQL Driver 也有这个问题，因为代码是从那copy的。）
https://github.com/XUJiahua/metabase-impala-driver/commit/0963f9890a9213d53511c61b53870476f8f82cf4
metabase东八区启动，用北京时间显示，就会多加8小时。
修复 </description>
    </item>
    
    <item>
      <title>Metabase Impala Driver 0710更新日志</title>
      <link>https://xujiahua.github.io/posts/20200710-metabase-impala-driver/</link>
      <pubDate>Fri, 10 Jul 2020 10:35:08 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200710-metabase-impala-driver/</guid>
      <description>基于 Metabase 0.35.4 版本和Cloudera的Impala JDBC驱动，重构了一份独立的 Metabase Impala Driver。
整体思路参考 Writing A Driver ，更多时间是参考其他驱动的代码和根据实际用例调试。还有不少待完善的地方：
 单元测试缺乏。 去除没有必要的方法（首先得理解方法的含义）。  </description>
    </item>
    
    <item>
      <title>Metabase 客户隔离</title>
      <link>https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/</link>
      <pubDate>Mon, 15 Jun 2020 17:19:50 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200615-metabase-customer-isolation/</guid>
      <description>之前有讨论，在不改动代码的情况下，可以使用分组功能来做客户隔离。但是该方案面临的问题是，每个客户一套模板，模板可维护性低。
问题的关键就是如何共享SQL模板并客户隔离。需要改动源代码。
目标  代码复用。同一套SQL代码。不用copy/paste，好维护。一个dashboard所有客户都能看。 客户隔离，保证数据安全。不同客户只能看到自己的数据。  实现 执行dashboard/chart中SQL代码时，动态插入客户隔离标识。
首先来看下一次SQL Query的生命周期。
找了个比较接近的处理逻辑，substitute-parameters用于将{ {xxx} }替换为widget中选的值。模仿之，SQL中定义一个##client_id##占位符，写了一个substitute-placeholder方法使用用户的client-id替代占位符。
code: https://github.com/XUJiahua/metabase/pull/4/files
DEMO 效果
使用Sample Data数据集测试。
select * from PEOPLE where STATE={{STATE}} and SOURCE=##client_id## 返回的SQL中，可见占位符被替换为Google。
因为还没有集成SSO系统，client-id临时用first-name来代替。</description>
    </item>
    
    <item>
      <title>Metabase SSO 登录</title>
      <link>https://xujiahua.github.io/posts/20200609-metabase-sso-login/</link>
      <pubDate>Tue, 09 Jun 2020 10:37:09 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200609-metabase-sso-login/</guid>
      <description>探讨如何将 Metabase 融入业务系统（SaaS 服务）。
为何需要集成 Metabase 到业务系统中呢？一般，通用的数据需求都做到SaaS服务中了。而现实情况是，客户是有很多定制化数据需求的。使用 Metabase 制作报表，直接跳过前后端开发，快速满足客户需求。
（最终极地，进一步提高生产效率，把 Metabase 的组件化能力内化到 SaaS 服务中才是正道。）
试分析下 Metabase 提供的方案，以及适配我们的场景，分析该怎么改。
分析现存方案 开源版本的 Metabase 支持两种第三方登录：
 LDAP: Allows users within your LDAP directory to log in to Metabase with their LDAP credentials, and allows automatic mapping of LDAP groups to Metabase groups. Sign in with Google: Allows users with existing Metabase accounts to login with a Google account that matches their email address in addition to their Metabase username and password.</description>
    </item>
    
    <item>
      <title>Metabase 日期筛选控件实践</title>
      <link>https://xujiahua.github.io/posts/20200605-metabase-field-filter/</link>
      <pubDate>Fri, 05 Jun 2020 14:41:44 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200605-metabase-field-filter/</guid>
      <description>Metabase Dashboard 可以是动态的，常用的是指定时间范围筛选，查看这个时间段的指标。
简单示范 使用 SAMPLE DATASET 数据库。定义一个Question：在某一时间段，订单数是多少。使用以下 SQL模板。
select count(1) FROM ORDERS WHERE 1=1 [[AND {{CREATED_AT}} ]] 在Variables侧栏选择如下：
 Variable type：Field Filter。（其他选项，Text/Number/Date 都是单值，没有范围。） Field to map to：选择对应的数据表字段，这里使用ORDERS表的CREATED_AT字段。 Filter widget type：Date Range。注意，只有日期类型（date/ timestamp）有这些选择。（其他选项，大同小异，都会生成对应SQL语句。）  在日期控件中选择时间范围，实际执行的SQL语句如下。
select count(1) FROM ORDERS WHERE 1=1 AND CAST(&amp;#34;PUBLIC&amp;#34;.&amp;#34;ORDERS&amp;#34;.&amp;#34;CREATED_AT&amp;#34; AS date) BETWEEN date &amp;#39;2020-06-03&amp;#39; AND date &amp;#39;2020-06-04&amp;#39; 打开浏览器开发者工具就能看到。
可以看到，生成了这个过滤条件：CAST(&amp;quot;PUBLIC&amp;quot;.&amp;quot;ORDERS&amp;quot;.&amp;quot;CREATED_AT&amp;quot; AS date) BETWEEN date &#39;2020-06-03&#39; AND date &#39;2020-06-04&#39;替代了。
column CREATED_AT 被转为date类型。因为日期控件的日期精度只到年月日，没有时分秒，实际使用中确实也没必要时分秒。
不同的数据库，支持的数据类型是不同的，比如Impala就不支持date类型。Metabase 用如下语句达到相同效果（由各个数据库驱动负责实现），将timestamp类型的精度截断到年月日：
CAST(from_unixtime(unix_timestamp(from_timestamp(CAST(`table`.`column` AS timestamp), &amp;#39;yyyy-MM-dd&amp;#39;), &amp;#39;yyyy-MM-dd&amp;#39;)) AS timestamp) BETWEEN to_timestamp(&amp;#39;2020-05-25 00:00:00&amp;#39;, &amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;) AND to_timestamp(&amp;#39;2020-05-31 00:00:00&amp;#39;, &amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;) 参考：</description>
    </item>
    
    <item>
      <title>使用 REPL 调试 Clojure 项目（Metabase）</title>
      <link>https://xujiahua.github.io/posts/20200604-clojure-repl-debug/</link>
      <pubDate>Thu, 04 Jun 2020 16:13:27 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200604-clojure-repl-debug/</guid>
      <description>开发工具 Intellij IDEA + Cursive 安装 IDEA 社区版即可，并安装插件 Cursive。
Cursive 插件按键冲突 比如我会用组合键⌘ + [浏览代码，与 Cursive 插件的按键冲突。可以取消 Cursive 的这个组合键。
Emacs Added 2020-07-10
参考：How to Use Emacs, an Excellent Clojure Editor
实践Metabase代码库失败：在REPL中执行(-main)直接挂了，待研究。TBD
实践 Metabase 接触 Clojure 是因为 Metabase 这个项目 https://github.com/metabase/metabase 。以 Metabase 为例，说明如何调试 Clojure 项目。
Metabase 由前后端两部分组成，后端是由 Clojure 写的 REST API 项目。启动前端工程，需要在前端界面上触发 API 请求。
yarn build-hot 参考
 Metabase developers-guide https://github.com/metabase/metabase/blob/master/docs/developers-guide.md  REPL 调试 Clojure 项目 新建一个 Clojure REPL 配置。
展开右下角的 REPL 子窗口，Run REPL for metabase-core。（注意，此时，项目中的 clojure namespace 并没有实际加载。代码编辑区运行 Clojure 函数，会报错，Error: :namespace-not-found）</description>
    </item>
    
    <item>
      <title>Metabase Impala Driver 0528更新日志</title>
      <link>https://xujiahua.github.io/posts/20200528-metabase-impala-type/</link>
      <pubDate>Thu, 28 May 2020 09:30:09 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200528-metabase-impala-type/</guid>
      <description>体验过程中还是碰到不少问题。
1. TIMESTAMP 类型没有过滤器样式 现象 连 SparkSQL 没这个问题。同样是TIMESTAMP类型，表现不同。
初步分析 在数据库中查看存储的字段信息，Impala/SparkSQL对比看，发现 Impala 数据库下的字段 base_type 都是 type/*。而 database_type，Impala 都是大写的，比如TIMESTAMP，而不是timestamp。所以，并不仅仅是TIMESTAMP类型没有过滤器样式。
Metabase 数据库类型会映射为 Clojure类型，数据库类型的名称是大小写敏感的。所以不能复用hive-like中的实现（都是小写的），而且Hive与Impala的类型还是有些不同的。
Hive Impala的数据类型异同 以 Hive Data Types 为基准。
   Type Name Type Catgory Comment Impala Support?     TINYINT Numeric Types  Yes   SMALLINT Numeric Types  Yes   INT Numeric Types  Yes   BIGINT Numeric Types  Yes   FLOAT Numeric Types  Yes   DOUBLE Numeric Types  Yes   DOUBLE PRECISION Numeric Types alias for DOUBLE, only available starting with Hive 2.</description>
    </item>
    
    <item>
      <title>Metabase Impala Driver</title>
      <link>https://xujiahua.github.io/posts/20200527-metabase-impala-driver/</link>
      <pubDate>Wed, 27 May 2020 12:16:36 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200527-metabase-impala-driver/</guid>
      <description>更新日志
 Metabase Impala Driver 0528更新日志 Metabase Impala Driver 0710更新日志  背景 我们的数据仓库是 Hadoop/Hive 体系的。Hadoop 版本采用的是 CDH 发行版。在这个背景下 SQL on Hadoop 的方案有 Hive/Impala/(SparkSQL)。作为 BI 数据库，Impala 在我们的场景下比较合适。
 Hive：太慢了。做 ETL 可以，BI 非常不适。 SparkSQL：CDH 官方 Spark 不含 Thrift Server。为了能够使用 Metabase ，独立于 CDH 启了个 Thrift Server，用着还不错。问题就在于缺乏统一管理，比如 Kerberos 的管理就得自己写脚本处理、进程 OOM 挂掉了 CDH Manager 也监测不到。 Impala：CDH 官方出品，为 BI 而设计，由 CDH Manager 管理。根据这份报告，见下参考链接，Impala 好于 SparkSQL。  出于尽可能复用已有基础设施的目的，选择 Impala。而 Metabase 官方、社区并不提供 Impala 驱动。本文就是为了探索并解决这个问题。
参考：
 开源OLAP引擎测评报告(SparkSql、Presto、Impala、HAWQ、ClickHouse、GreenPlum) http://www.clickhouse.com.cn/topic/5c453371389ad55f127768ea  现有驱动探索 搭建 Impala 开发环境 使用 Cloudera Quickstart Docker 镜像（官方已经下架 quickstart vm ）。其中，Impala版本 2.</description>
    </item>
    
    <item>
      <title>Metabase &#43; Spark SQL</title>
      <link>https://xujiahua.github.io/posts/20200410-metabase-spark-sql/</link>
      <pubDate>Fri, 10 Apr 2020 16:41:53 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200410-metabase-spark-sql/</guid>
      <description>这是大数据 BI 平台的第二步，BI 工具的搭建。假设已经配置好 Spark SQL JDBC Server，并启用了Kerberos。参考 https://xujiahua.github.io/posts/20200410-spark-thrift-server-cdh/
这里，我们选择了开源产品 Metabase。
最终，大数据 BI 平台，是由 1) 以Metabase作为BI可视化，2) 由HDFS（分布式文件存储） + parquet（列式数据存储格式）+ Hive metastore（SQL表结构信息维护） + Spark SQL（批处理引擎）组合的OLAP数据库组成。
Metabase 简介 Metabase is the easy, open source way for everyone in your company to ask questions and learn from data.
https://www.metabase.com/
数据库支持  BigQuery Druid Google Analytics H2 MongoDB MySQL/MariaDB PostgreSQL Presto Amazon Redshift Snowflake Spark SQL SQLite SQL Server  https://www.metabase.com/docs/latest/faq/setup/which-databases-does-metabase-support.html
这里有我们需要的Spark SQL，我们的大数据集群可以支持。比较遗憾的是没有Impala。
Metabase 安装 MySQL 使用MySQL作为元数据存储。复用之前CDH的MySQL实例。</description>
    </item>
    
  </channel>
</rss>

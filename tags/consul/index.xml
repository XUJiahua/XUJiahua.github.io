<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>consul on 许嘉华的博客</title>
    <link>https://xujiahua.github.io/tags/consul/</link>
    <description>Recent content in consul on 许嘉华的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 17 Apr 2020 16:09:28 +0800</lastBuildDate>
    
	<atom:link href="https://xujiahua.github.io/tags/consul/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>k8s configmap 与热更新</title>
      <link>https://xujiahua.github.io/posts/20200417-kubernetes-configmap/</link>
      <pubDate>Fri, 17 Apr 2020 16:09:28 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200417-kubernetes-configmap/</guid>
      <description>configmap 简介 官方介绍：使用 ConfigMap 配置 Pod https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-pod-configmap/
他人总结：ConfigMap https://jimmysong.io/kubernetes-handbook/concepts/configmap.html
稍微总结下：
 每个configmap都有一个名字，名字全局唯一（命名空间内），重复创建会报错。 每个configmap本身是键值对。 configmap可以通过环境变量的方式让Pod内容器读取。 configmap可以通过挂载文件的方式让Pod内容器读取。k8s每隔一段时间同步configmap，如果有更新的话。当然，应用本身是不知道的。这个定时更新感觉有点鸡肋。 configmap更新，不会自动重启应用。只能人工方式，滚动重启应用。  把配置更新也当作一次应用变更看待，心情就好很多了。
官方不支持热更新，所以有了各种技巧，提高效率。
 create a new ConfigMap with the changes you want to make, and point your deployment at the new ConfigMap https://stackoverflow.com/a/40624029/820682 因为 deployment 文件变化了，触发滚动重启。 还有deployment 文件中配置 configmap hash值的。配置变化，hash值变化，deployment变化，滚动重启，一级级联动。 https://blog.questionable.services/article/kubernetes-deployments-configmap-change/ 还有使用sidecar的方式做热更新的，太复杂了 https://zhuanlan.zhihu.com/p/57570231  关于热更新 configmap的更新，容器化应用是无感知的。configmap这种方式没有推送更新到应用内的机制，要实现热更新过于复杂。
k8s最核心的功能还是自动部署、伸缩、容器管理以及资源分配。微服务架构还是得需要其他框架来辅助的。
配置热更新应用，就选择 etcd, consul 吧，有 watch 功能。</description>
    </item>
    
    <item>
      <title>Consul调研</title>
      <link>https://xujiahua.github.io/posts/20200326-use-consul/</link>
      <pubDate>Thu, 26 Mar 2020 09:01:38 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200326-use-consul/</guid>
      <description>Consul简介 Consul 是 HashiCorp 公司推出的开源分布式服务发现与配置系统。
 服务发现。特别是搭配Consul Connect（Service Mesh），可达到一种无侵入式的服务发现和客户端负载均衡。 Key/Value 存储 作为配置中心。 使用 Raft 算法来保证一致性。 支持多数据中心。 支持健康检查：服务注册的时候可以提供健康检查项，服务发现会过滤掉不健康的service。 支持 http 和 dns 协议接口。 Web 管理界面。 没有长连接，轮询方式可能不够及时。有watch。  核心概念  consul agent server：维护核心状态并参与leader选举。server节点一般建议3个或是5个，测试用1个即可。写压力大的集群，考虑升级服务器实例的配置和低延迟的存储。（TIP For write-heavy clusters, consider scaling vertically with larger machine instances and lower latency storage. https://learn.hashicorp.com/consul/datacenter-deploy/reference-architecture） consul agent client：与其他agent联通，并消息中转。agent的作用是健康检查。每个主机都有一个agent的好处是，只要与本地agent通信(In a multi-agent Consul datacenter, each service would register with its local Consul client, and the clients would forward the registration to the Consul servers, which maintain the service catalog.</description>
    </item>
    
  </channel>
</rss>
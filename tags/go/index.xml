<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 许嘉华的博客</title>
    <link>https://xujiahua.github.io/tags/go/</link>
    <description>Recent content in Go on 许嘉华的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 23 Jul 2020 16:12:51 +0800</lastBuildDate>
    
	<atom:link href="https://xujiahua.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>实验说明 Golang HTTP 连接池参数</title>
      <link>https://xujiahua.github.io/posts/20200723-golang-http-reuse/</link>
      <pubDate>Thu, 23 Jul 2020 16:12:51 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200723-golang-http-reuse/</guid>
      <description>连接相对于其他对象，创建成本较高，资源也有限。如果没有连接池，在高并发场景下，连接关闭又新建，很快就会因为过多的TIME_WAIT（连接主动关闭方）导致无法创建更多连接了，程序被压死。
net/http 连接池参数 Go （测试版本 go 1.14）的net/http包是有连接池功能的，具体地，是 Transport 用于连接池化。https://golang.org/pkg/net/http/#Transport
 Transport is an implementation of RoundTripper that supports HTTP, HTTPS, and HTTP proxies (for either HTTP or HTTPS with CONNECT).
By default, Transport caches connections for future re-use.
 // MaxIdleConns controls the maximum number of idle (keep-alive) 	// connections across all hosts. Zero means no limit. 	MaxIdleConns int // MaxIdleConnsPerHost, if non-zero, controls the maximum idle 	// (keep-alive) connections to keep per-host.</description>
    </item>
    
    <item>
      <title>Go库对URL Path中%2F的处理</title>
      <link>https://xujiahua.github.io/posts/20200312-slash-in-url-path/</link>
      <pubDate>Thu, 12 Mar 2020 15:17:36 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200312-slash-in-url-path/</guid>
      <description>问题描述  有同事反馈Go项目的接口404了。看了下nginx日志，只有部分请求404了，404请求的显著特征是URL里有%2F，也就是/的转义。 接口定义是这样的：/api/xxx/{mid}/{uid}。mid、uid是URL path的一部分。从现象来看，程序没处理好转义字符，因为多了一个path部分，路由不匹配了，404。 nginx的URL记录是%2F，其实调用方传的是微信ID，比如IEd5W/jqsdF9qpuagQscEg==。调用方在发请求之前对ID已经做好了转义。  Go内置库：不区分%2F和/ An application cannot distinguish between &amp;ldquo;/&amp;rdquo; used as a path segment delimiter and &amp;ldquo;/&amp;rdquo; encoded in a path segment.
这个问题由来已久了，看着官方也不打算解决了，见这个issue：https://github.com/golang/go/issues/3659
If your app needs to assign special meaning, the server can reprocess req.RequestURI as it sees fit, and the client can issue requests using &amp;amp;url.URL{Opaque: rawURI}.  reprocess req.RequestURI 就是让你别用内置路由库了。 issue requests using &amp;amp;url.URL{Opaque: rawURI}. 试了，问题没解决。客户端不管怎么做，最终都是以HTTP协议输出的。GET http://www.google.com/index.html HTTP/1.1 服务端代码最终解析的还是中间的那段URL文本。照理就不通啊。  源码角度 url.URL的定义，明确指出Path字段存储的是decode之后的数据，所以%2F在这里已经被转义成了/，跟之前的Path意义完全不同了。</description>
    </item>
    
    <item>
      <title>使用Go Modules</title>
      <link>https://xujiahua.github.io/posts/20200228-go-modules/</link>
      <pubDate>Fri, 28 Feb 2020 15:05:18 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200228-go-modules/</guid>
      <description>Go Modules使用着感觉不错，Go终于有正常点的依赖管理工具了。记录一二。
使用小结  go.mod, go.sum加入版本管理 Both go.mod and go.sum should be checked into version control. 直接依赖体现在go.mod，间接依赖由直接依赖自己管理，这是个递归的过程 Only direct dependencies are recorded in the go.mod file. go命令自动管理go.mod，这可太方便了 When it encounters an import of a package not provided by any module in go.mod, the go command automatically looks up the module containing that package and adds it to go.mod, using the latest version. 看着比之前的依赖管理好用很多。比如dep。因为网络下载包等问题，最后把依赖包全checkin到vendor目录了。太臃肿。  常用命令  go mod init creates a new module, initializing the go.</description>
    </item>
    
    <item>
      <title>Go Plugin</title>
      <link>https://xujiahua.github.io/posts/20190304-go-plugin/</link>
      <pubDate>Mon, 04 Mar 2019 08:27:31 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20190304-go-plugin/</guid>
      <description>（笔记迁移 @ 2020年）
早已忘记 C/C++ 中常用的动态链接库了。日常开发中，使用 Go 引入一个组件，常常是go get引入其源码，放在一起编译。
Go 1.8 起也提供了动态链接库的功能。
因为看 HyperLedger Fabric 源码的关系，接触到这块，稍微记录下。
一、使用流程 这里有个demo可以参考下：https://github.com/vladimirvivien/go-plugin-example
作者写作时，Go 1.8，plugin特性尚不支持MacOS。目前（Go 1.11.4），是支持Linux/MacOS的。
1. 编译模块（module, .so） go build -buildmode=plugin -o path/to/shared/object/file.so path/to/source/code.go 注意-buildmode=plugin这个编译Flag。
2. 引入&amp;quot;plugin&amp;rdquo; import &amp;quot;plugin&amp;quot; 3. 加载module plug, err := plugin.Open(&amp;quot;path/to/shared/object/file.so&amp;quot;) 4. 查找symbol，比如exported function/variable symGreeter, err := plug.Lookup(&amp;quot;Greeter&amp;quot;) plug.Lookup的返回类型是Symbol，其实就是interface{}，为了正常使用，需要做类型转换。
type Symbol interface{} 5. 类型转换 type assertion var greeter Greeter greeter, ok := symGreeter.(Greeter) 很重要，不然没法使用。
6. 正常使用 greeter.Greet() 二、已知问题 无法debug 分别在MacOS和Ubuntu尝试debug使用plugin包的应用，报错如下（Go 1.</description>
    </item>
    
    <item>
      <title>一点压力测试的经验</title>
      <link>https://xujiahua.github.io/posts/20181017-perf-testing/</link>
      <pubDate>Wed, 17 Oct 2018 07:42:56 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20181017-perf-testing/</guid>
      <description>（笔记迁移 @ 2020年）
一、概念，最基础最重要 1. 响应时间 TP99, TP90是什么 除了要看TPS，也要看请求的响应时间是否在合理的范围内。太离谱，压测该停了。
响应时间的指标有最大响应时间、平均响应时间、TPXXX等。
TP – Top Percentile
TP90 = 500ms ：90%的请求都是在500ms以内。
2. 错误率 压测过程中发现异常或是错误，或者，错误率明显上升，这时候压测就该停了。
3. 吞吐量 TPS 单纯看TPS是没有意义的。要结合上述两个指标，一般是0错误率，TP99在xxx ms（看具体应用场景）内的TPS。
比如这么描述TPS，TP99小于100ms的前提下，系统没有错误，系统可承载的TPS是1000。
4. 压测案例 选择生产环境中并发要求高的请求。
二、工具选型，选最合适的 工具的选择，一要看场景，二要看自己是否趁手。
ab (apache benchmark) ab -kc 1000 -n 10000 http://www.some-site.cc/tmp/index.html
 -k Enables HTTP keep-alive -c Number of concurrent requests -n Number of total requests to make  不足：
 只能使用单核。本身就可能是压测的瓶颈。 对于带多个步骤的压测场景无力。 没有（没找到）自定义断言的能力。  reference: https://en.wikipedia.org/wiki/ApacheBench
wrk wrk小巧，性能非常好，报告直观。
wrk -t2 -c100 -d30s -R2000 http://127.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>etcd on 许嘉华的笔记</title>
    <link>https://xujiahua.github.io/tags/etcd/</link>
    <description>Recent content in etcd on 许嘉华的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Apr 2020 14:12:38 +0800</lastBuildDate>
    
	<atom:link href="https://xujiahua.github.io/tags/etcd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>etcd 小结</title>
      <link>https://xujiahua.github.io/posts/20200420-use_etcd/</link>
      <pubDate>Mon, 20 Apr 2020 14:12:38 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200420-use_etcd/</guid>
      <description>简介 取名有意思。Linux下的/etc目录放的是配置文件。etcd，etc代表配置，d代表distributed，代表分布式配置。
特点：
 designed to reliably store infrequently updated data and provide reliable watch queries https://etcd.io/docs/v3.4.0/learning/data_model/ KV 核心用户接口 MVCC Multi-version Concurrency Control 也确实能读历史版本 Raft consensus algorithms 共识算法 Watch 配置更新能及时&amp;quot;通知&amp;quot;应用 RBAC 用户、角色、权限  基于 etcd 可以做哪些事情：
 配置中心。元数据存储。应用的配置集中存储在配置中心。 服务发现。配置中心的一个特例。相比起来，consul的服务发现是开箱即用的。 分布式锁。分布式系统协调。选主。像是Hadoop使用Zookeeper做Namenode的选主。  vs. Consul。Consul 官方（https://www.consul.io/）定义的usecase是 service discovery和 service mesh。
 etcd and Consul solve different problems. If looking for a distributed consistent key value store, etcd is a better choice over Consul.</description>
    </item>
    
    <item>
      <title>k8s configmap 与热更新</title>
      <link>https://xujiahua.github.io/posts/20200417-kubernetes-configmap/</link>
      <pubDate>Fri, 17 Apr 2020 16:09:28 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200417-kubernetes-configmap/</guid>
      <description>configmap 简介 官方介绍：使用 ConfigMap 配置 Pod https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-pod-configmap/
他人总结：ConfigMap https://jimmysong.io/kubernetes-handbook/concepts/configmap.html
稍微总结下：
 每个configmap都有一个名字，名字全局唯一（命名空间内），重复创建会报错。 每个configmap本身是键值对。 configmap可以通过环境变量的方式让Pod内容器读取。 configmap可以通过挂载文件的方式让Pod内容器读取。k8s每隔一段时间同步configmap，如果有更新的话。当然，应用本身是不知道的。这个定时更新感觉有点鸡肋。 configmap更新，不会自动重启应用。只能人工方式，滚动重启应用。  把配置更新也当作一次应用变更看待，心情就好很多了。
官方不支持热更新，所以有了各种技巧，提高效率。
 create a new ConfigMap with the changes you want to make, and point your deployment at the new ConfigMap https://stackoverflow.com/a/40624029/820682 因为 deployment 文件变化了，触发滚动重启。 还有deployment 文件中配置 configmap hash值的。配置变化，hash值变化，deployment变化，滚动重启，一级级联动。 https://blog.questionable.services/article/kubernetes-deployments-configmap-change/ 还有使用sidecar的方式做热更新的，太复杂了 https://zhuanlan.zhihu.com/p/57570231  关于热更新 configmap的更新，容器化应用是无感知的。configmap这种方式没有推送更新到应用内的机制，要实现热更新过于复杂。
k8s最核心的功能还是自动部署、伸缩、容器管理以及资源分配。微服务架构还是得需要其他框架来辅助的。
配置热更新应用，就选择 etcd, consul 吧，有 watch 功能。</description>
    </item>
    
    <item>
      <title>etcd api client 请求重试逻辑</title>
      <link>https://xujiahua.github.io/posts/20200417-etcd_client/</link>
      <pubDate>Fri, 17 Apr 2020 15:05:51 +0800</pubDate>
      
      <guid>https://xujiahua.github.io/posts/20200417-etcd_client/</guid>
      <description>使用 Consul 作为配置中心，按照官方的说法，没必要创建 consul client 节点。那么直接连 consul server 就好了。
 Running an agent is not required for discovering other services or getting/setting key/value data. The agent is responsible for health checking the services on the node as well as the node itself.
https://www.consul.io/intro/index.html#basic-architecture-of-consul
 Consul api client (https://github.com/hashicorp/consul/tree/master/api) 目前只能接收一个server地址。那么这个server地址得保证高可用才行啊。
etcd api client (https://github.com/etcd-io/etcd/tree/master/client) 倒是能接收多个server地址，看看 etcd 是怎么做的。
etcd api client 创建了 httpClusterClient。
多个 endpoint 的处理核心逻辑。https://github.com/etcd-io/etcd/blob/master/client/client.go#L362
 pinned 用于记录好用的连接地址的index，优先使用这个地址。 context 类错误，比如取消请求，直接退出。 遇到 5xx 类错误，服务端错误。需要考虑是否重试了。 isOneShot 标记，true 代表是 Set/Delete 操作，请求失败不再重试。应该跟请求是否幂等有关。 可以重试的请求，重试直到成功或是循环结束。  </description>
    </item>
    
  </channel>
</rss>